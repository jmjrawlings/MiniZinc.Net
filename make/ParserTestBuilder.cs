namespace Make;

using LibMiniZinc.Tests;
using static LibMiniZinc.Tests.TestType;

/// Generates parser integration tests
public sealed class ParserTestBuilder : TestBuilder
{
    public ParserTestBuilder()
        : base("ParserIntegrationTests") { }

    public override string Build(TestSpec spec)
    {
        var files = new HashSet<string>();
        foreach (var tcase in spec.TestCases)
        {
            if (tcase.Type is TEST_ERROR or TEST_SYNTAX_ERROR)
                continue;

            files.Add(tcase.Path);
        }
        Build(files);
        var source = ToString();
        return source;
    }

    void Build(IEnumerable<string> files)
    {
        using (BlockComment())
        {
            WriteLn("<auto-generated>");
            WriteLn("This file was generated by the following command:");
            WriteLn("dotnet run --project ./build/Make/Make.csproj --make-parser-tests");
            Write("</auto-generated>");
        }

        Block($"public sealed class {ClassName}");
        using (Block("private void TestParse(string path)"))
        {
            Var("ok", "Parser.ParseModelFromFile(path, out var model)");
            WriteLn("ok.Should().BeTrue();");
        }

        foreach (var path in files)
        {
            var testName = path.Replace(".mzn", "");
            testName = testName.Replace("/", "_");
            testName = testName.Replace("-", "_");
            testName = testName.Replace(".", "");
            testName = $"test_parse_{testName}";
            NewLine();
            Attribute("Fact", $"DisplayName=\"{path}\"");
            using (Block($"public void {testName}()"))
            {
                Var("path", $"\"{path}\"");
                WriteLn("TestParse(path);");
            }
        }
    }
}
