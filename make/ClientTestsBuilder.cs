namespace Make;

using System.Text;
using LibMiniZinc.Tests;

public sealed class ClientTestsBuilder : TestBuilder
{
    public ClientTestsBuilder()
        : base("ClientIntegrationTests") { }

    public override string Build(TestSpec spec)
    {
        using (BlockComment())
        {
            WriteLn("<auto-generated>");
            WriteLn("This file has been auto generated by the following command:");
            WriteLn("dotnet run --project ./build/Make/Make.csproj --make-client-tests");
            Write("</auto-generated>");
        }

        WriteLn("#nullable enable");
        NewLine();
        Block($"public class {ClassName} : ClientTest");
        NewLine();

        using (
            Block(
                $"public {ClassName}(ITestOutputHelper output, ClientFixture fixture) : base(output, fixture)"
            )
        ) { }

        foreach (var testCase in spec.TestCases)
        {
            if (GetTestInfo(testCase) is not { } info)
                continue;

            var ok = testCase.Type switch
            {
                TestType.TEST_SATISFY => true,
                TestType.TEST_OPTIMISE => true,
                TestType.TEST_ANY_SOLUTION => true,
                TestType.TEST_ALL_SOLUTIONS => true,
                TestType.TEST_UNSATISFIABLE => true,
                _ => false
            };

            // We don't care about checker solutions for now
            if (testCase.Solutions is { } sols)
                foreach (var sol in sols)
                    if (sol.Contains("_checker"))
                        ok = false;

            if (!ok)
                continue;

            WriteTest(info);
        }

        var source = ToString();
        return source;
    }

    void WriteTest(TestCaseInfo info)
    {
        IDisposable block;
        List<string> args = [$"path: \"{info.Path}\""];
        if (info.Solvers.Count > 1)
        {
            Attribute("Theory", $"DisplayName=\"{info.Path}\"");
            foreach (var (solver, enabled) in info.Solvers)
            {
                if (enabled)
                    Attribute("InlineData", $"\"{solver}\"");
                else
                    Attribute($"InlineData", $"\"{solver}\", Skip=\"Solver not supported\"");
            }

            block = Function($"public async Task {info.Name}", "string solver");
            args.Add("solver: solver");
        }
        else
        {
            var (solver, enabled) = info.Solvers[0];
            if (enabled)
                Attribute("Fact", $"DisplayName=\"{info.Path}\"");
            else
                Attribute("Fact", $"DisplayName=\"{info.Path}\"", "Skip=\"Solver not supported\"");

            block = Function($"public async Task {info.Name}");
            args.Add($"solver: {Quote(solver)}");
        }

        var ab = new StringBuilder();

        if (info.Solutions is { Count: > 0 } solutions)
        {
            ab.Append("solutions: [");
            int i = 0;
            foreach (var sol in solutions)
            {
                ab.Append(TripleQuote(sol));
                if (++i < solutions.Count)
                    ab.Append(',');
            }
            ab.Append(']');
            args.Add(ab.ToString());
        }

        ab.Clear();
        if (info.ExtraArgs is { Count: > 0 } extraArgs)
        {
            ab.Append("args: [");
            int i = 0;
            foreach (var arg in extraArgs)
            {
                ab.Append(FormatArg(arg));
                if (++i < extraArgs.Count)
                    ab.Append(',');
            }

            ab.Append(']');
            args.Add(ab.ToString());
        }
        ab.Clear();

        if (info.ErrorMessage is { } err)
            args.Add($"error: \"{err}\"");
        else if (info.ErrorRegex is { } regex)
        {
            var rgx = regex.Replace("\\", "");
            args.Add($"error: \"{rgx}\"");
        }

        if (info.Type is TestType.TEST_ALL_SOLUTIONS)
            args.Add($"allSolutions: true");

        switch (info.Type)
        {
            case TestType.TEST_COMPILE:
                break;
            case TestType.TEST_SATISFY:
                args.Add("statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]");
                break;
            case TestType.TEST_ANY_SOLUTION:
                args.Add("statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]");
                break;
            case TestType.TEST_ALL_SOLUTIONS:
                args.Add("statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]");
                break;
            case TestType.TEST_OPTIMISE:
                args.Add("statuses: [SolveStatus.Optimal]");
                break;
            case TestType.TEST_OUTPUT_MODEL:
                break;
            case TestType.TEST_UNSATISFIABLE:
                args.Add("statuses: [SolveStatus.Unsatisfiable]");
                break;
            case TestType.TEST_ERROR:
                break;
            case TestType.TEST_ASSERTION_ERROR:
                break;
            case TestType.TEST_EVALULATION_ERROR:
                break;
            case TestType.TEST_MINZINC_ERROR:
                break;
            case TestType.TEST_TYPE_ERROR:
                break;
            case TestType.TEST_SYNTAX_ERROR:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        WriteLn("await Test(");
        using (Indent())
        {
            int n = 0;
            foreach (var arg in args)
            {
                if (++n < args.Count)
                    WriteLn($"{arg},");
                else
                    WriteLn(arg);
            }
        }
        WriteLn(");");
        block.Dispose();
    }

    private string FormatDzn(string s)
    {
        var z = s.Replace("\n", "\\n");
        z = z.Replace("\"", "\\\"");
        z = $"\"{z}\"";
        return z;
    }

    private string FormatArg(string s)
    {
        // Some extra options are passed in as quoted strings
        if (s.StartsWith('"'))
            return s;

        var z = Quote(s);
        return z;
    }
}
