{
  "test_cases": [
    {
      "suite": "optimize-0",
      "path": "examples/2DPacking.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/alpha.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships10.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_1.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_2.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_3.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_5.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_7.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_9.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/blocksworld_instance_1.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/blocksworld_instance_2.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/cutstock.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/eq20.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/factory_planning_instance.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O0",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/golomb.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/halfreif.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/jobshop2x2.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/knights.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O0",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/langford.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/langford2.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/latin_squares_fd.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/magicsq_3.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/magicsq_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O0",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/magicsq_5.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O0",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/multidimknapsack_simple.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/oss.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O0",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/packing.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O0",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/perfsq.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/perfsq2.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/photo.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/product_fd.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/product_lp.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/quasigroup_qg5.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/queen_cp2.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/queen_ip.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/radiation.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O0",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/radiation.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "-O0"
    },
    {
      "suite": "optimize-0",
      "path": "examples/simple_sat.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/singHoist2.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/steiner-triples.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "sets=[\u00225..7\u0022,\u0022{3,4,7}\u0022,\u0022{2,4,6}\u0022,\u0022{2,3,5}\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u00224..6\u0022,\u0022{3,6,7}\u0022,\u0022{2,4,7}\u0022,\u0022{2,3,5}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,4}\u0022,\u0022{1,2,6}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u0022{3,5,7}\u0022,\u0022{2,5,6}\u0022,\u00222..4\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u00223..5\u0022,\u0022{2,5,6}\u0022,\u0022{2,3,7}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,4}\u0022];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/sudoku.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/template_design.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O0",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_1.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_2.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_3.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_4.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_5.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_6.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/timetabling.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/trucking.mzn",
      "type": "any_solution",
      "args": "-O0",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/warehouses.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "-O0"
    },
    {
      "suite": "optimize-0",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O0",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/zebra.mzn",
      "type": "solve",
      "args": "-O0",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/2DPacking.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/alpha.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships10.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_1.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_2.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_3.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_5.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_7.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_9.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/blocksworld_instance_1.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/blocksworld_instance_2.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/cutstock.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/eq20.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/factory_planning_instance.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O2",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/golomb.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/halfreif.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/jobshop2x2.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/knights.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O2",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/langford.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/langford2.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/latin_squares_fd.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/magicsq_3.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/magicsq_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O2",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/magicsq_5.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O2",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/multidimknapsack_simple.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/oss.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O2",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/packing.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O2",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/perfsq.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/perfsq2.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/photo.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/product_fd.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/product_lp.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/quasigroup_qg5.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/queen_cp2.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/queen_ip.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/radiation.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O2",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/radiation.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "-O2"
    },
    {
      "suite": "optimize-2",
      "path": "examples/simple_sat.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/singHoist2.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/steiner-triples.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "sets=[\u00225..7\u0022,\u0022{3,4,7}\u0022,\u0022{2,4,6}\u0022,\u0022{2,3,5}\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u00224..6\u0022,\u0022{3,6,7}\u0022,\u0022{2,4,7}\u0022,\u0022{2,3,5}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,4}\u0022,\u0022{1,2,6}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u0022{3,5,7}\u0022,\u0022{2,5,6}\u0022,\u00222..4\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u00223..5\u0022,\u0022{2,5,6}\u0022,\u0022{2,3,7}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,4}\u0022];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/sudoku.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/template_design.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O2",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_1.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_2.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_3.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_4.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_5.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_6.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/timetabling.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/trucking.mzn",
      "type": "any_solution",
      "args": "-O2",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/warehouses.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "-O2"
    },
    {
      "suite": "optimize-2",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O2",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/zebra.mzn",
      "type": "solve",
      "args": "-O2",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/2DPacking.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/alpha.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships10.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_1.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_2.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_3.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_5.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_7.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_9.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/blocksworld_instance_1.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/blocksworld_instance_2.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/cutstock.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/eq20.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/factory_planning_instance.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O3",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/golomb.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/halfreif.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/jobshop2x2.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/knights.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O3",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/langford.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/langford2.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/latin_squares_fd.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/magicsq_3.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/magicsq_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O3",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/magicsq_5.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O3",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/multidimknapsack_simple.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/oss.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-O3",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/packing.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O3",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/perfsq.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/perfsq2.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/photo.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/product_fd.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/product_lp.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/quasigroup_qg5.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/queen_cp2.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/queen_ip.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/radiation.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O3",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/radiation.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "-O3"
    },
    {
      "suite": "optimize-3",
      "path": "examples/simple_sat.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/singHoist2.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/steiner-triples.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "sets=[\u00225..7\u0022,\u0022{3,4,7}\u0022,\u0022{2,4,6}\u0022,\u0022{2,3,5}\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u00224..6\u0022,\u0022{3,6,7}\u0022,\u0022{2,4,7}\u0022,\u0022{2,3,5}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,4}\u0022,\u0022{1,2,6}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u0022{3,5,7}\u0022,\u0022{2,5,6}\u0022,\u00222..4\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u00223..5\u0022,\u0022{2,5,6}\u0022,\u0022{2,3,7}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,4}\u0022];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/sudoku.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/template_design.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O3",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_1.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_2.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_3.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_4.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_5.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_6.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/timetabling.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/trucking.mzn",
      "type": "any_solution",
      "args": "-O3",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/warehouses.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "-O3"
    },
    {
      "suite": "optimize-3",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-O3",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/zebra.mzn",
      "type": "solve",
      "args": "-O3",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/2DPacking.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/alpha.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships10.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_1.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_2.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_3.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_5.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_7.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_9.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/blocksworld_instance_1.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/blocksworld_instance_2.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/cutstock.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/eq20.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/factory_planning_instance.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/golomb.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/halfreif.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/jobshop2x2.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/knights.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/langford.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/langford2.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/latin_squares_fd.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/magicsq_3.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/magicsq_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/magicsq_5.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/multidimknapsack_simple.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/oss.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/packing.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/perfsq.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/perfsq2.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/photo.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/product_fd.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/product_lp.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/quasigroup_qg5.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/queen_cp2.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/queen_ip.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/radiation.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/radiation.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "-D fMIPdomains=false"
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/simple_sat.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/singHoist2.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/steiner-triples.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "sets=[\u00225..7\u0022,\u0022{3,4,7}\u0022,\u0022{2,4,6}\u0022,\u0022{2,3,5}\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u00224..6\u0022,\u0022{3,6,7}\u0022,\u0022{2,4,7}\u0022,\u0022{2,3,5}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,4}\u0022,\u0022{1,2,6}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u0022{3,5,7}\u0022,\u0022{2,5,6}\u0022,\u00222..4\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u00223..5\u0022,\u0022{2,5,6}\u0022,\u0022{2,3,7}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,4}\u0022];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/sudoku.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/template_design.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_1.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_2.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_3.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_4.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_5.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_6.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/timetabling.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/trucking.mzn",
      "type": "any_solution",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/warehouses.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "-D fMIPdomains=false"
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/zebra.mzn",
      "type": "solve",
      "solvers": [
        "cbc"
      ],
      "args": "-D fMIPdomains=false",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/2DPacking.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/alpha.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships10.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_1.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_2.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_3.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_5.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_7.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_9.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/blocksworld_instance_1.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/blocksworld_instance_2.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/cutstock.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/eq20.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/factory_planning_instance.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "--no-half-reifications",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/golomb.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/halfreif.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/jobshop2x2.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/knights.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-half-reifications",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/langford.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/langford2.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/latin_squares_fd.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/magicsq_3.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/magicsq_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-half-reifications",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/magicsq_5.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-half-reifications",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/multidimknapsack_simple.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/oss.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "--no-half-reifications",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/packing.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-half-reifications",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/perfsq.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/perfsq2.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/photo.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/product_fd.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/product_lp.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/quasigroup_qg5.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/queen_cp2.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/queen_ip.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/radiation.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-half-reifications",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/radiation.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "--no-half-reifications"
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/simple_sat.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/singHoist2.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/steiner-triples.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "sets=[\u00225..7\u0022,\u0022{3,4,7}\u0022,\u0022{2,4,6}\u0022,\u0022{2,3,5}\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u00224..6\u0022,\u0022{3,6,7}\u0022,\u0022{2,4,7}\u0022,\u0022{2,3,5}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,4}\u0022,\u0022{1,2,6}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u0022{3,5,7}\u0022,\u0022{2,5,6}\u0022,\u00222..4\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u00223..5\u0022,\u0022{2,5,6}\u0022,\u0022{2,3,7}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,4}\u0022];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/sudoku.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/template_design.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-half-reifications",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_1.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_2.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_3.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_4.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_5.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_6.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/timetabling.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/trucking.mzn",
      "type": "any_solution",
      "args": "--no-half-reifications",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/warehouses.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "--no-half-reifications"
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-half-reifications",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/zebra.mzn",
      "type": "solve",
      "args": "--no-half-reifications",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/2DPacking.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/alpha.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships10.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_1.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_2.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_3.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_5.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_7.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_9.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/blocksworld_instance_1.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/blocksworld_instance_2.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/cutstock.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/eq20.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/factory_planning_instance.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "--no-chain-compression",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/golomb.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/halfreif.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/jobshop2x2.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/knights.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-chain-compression",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/langford.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/langford2.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/latin_squares_fd.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/magicsq_3.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/magicsq_4.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-chain-compression",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/magicsq_5.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-chain-compression",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/multidimknapsack_simple.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/oss.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "cbc",
        "chuffed"
      ],
      "args": "--no-chain-compression",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/packing.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-chain-compression",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/perfsq.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/perfsq2.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/photo.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/product_fd.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/product_lp.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/quasigroup_qg5.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/queen_cp2.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/queen_ip.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/radiation.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-chain-compression",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/radiation.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "--no-chain-compression"
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/simple_sat.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/singHoist2.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/steiner-triples.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "sets=[\u00225..7\u0022,\u0022{3,4,7}\u0022,\u0022{2,4,6}\u0022,\u0022{2,3,5}\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u00224..6\u0022,\u0022{3,6,7}\u0022,\u0022{2,4,7}\u0022,\u0022{2,3,5}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,4}\u0022,\u0022{1,2,6}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u0022{3,5,7}\u0022,\u0022{2,5,6}\u0022,\u00222..4\u0022,\u0022{1,4,5}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,7}\u0022];",
        "sets=[\u0022{4,6,7}\u0022,\u00223..5\u0022,\u0022{2,5,6}\u0022,\u0022{2,3,7}\u0022,\u0022{1,5,7}\u0022,\u0022{1,3,6}\u0022,\u0022{1,2,4}\u0022];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/sudoku.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/template_design.mzn",
      "type": "solve",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-chain-compression",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_1.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_2.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_3.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_4.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_5.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_6.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/timetabling.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/trucking.mzn",
      "type": "any_solution",
      "args": "--no-chain-compression",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/warehouses.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "check_against",
      "solvers": [
        "cbc"
      ],
      "check_against": [
        "gecode"
      ],
      "args": "--no-chain-compression"
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "any_solution",
      "solvers": [
        "gecode",
        "chuffed"
      ],
      "args": "--no-chain-compression",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/zebra.mzn",
      "type": "solve",
      "args": "--no-chain-compression",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    }
  ]
}