{
  "test_cases": [
    {
      "suite": "default",
      "path": "unit/test-globals-float.mzn",
      "type": "test_solve",
      "solutions": [
        "inc_avf=[1.0,2.0,2.0];min_vf1=0.0;min_vf2=0.0;max_vf1=9.9;max_vf2=0.0;",
        "inc_avf=[1.0,2.0,2.0];min_vf1=0.0;min_vf2=0.0;max_vf1=9.9;max_vf2=9.9;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/aggregation.mzn",
      "type": "test_compile",
      "output_files": [
        "aggregation.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/annotate_bool_literal.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/annotate_from_array.mzn",
      "type": "test_compile",
      "output_files": [
        "annotate_from_array.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/assert_dbg_flag.mzn",
      "type": "test_assertion_error",
      "args": "--debug"
    },
    {
      "suite": "default",
      "path": "unit/compilation/assert_dbg_ignore.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/call_root_ctx.mzn",
      "type": "test_compile",
      "output_files": [
        "call_root_ctx.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/chain_compr_mult_clause.mzn",
      "type": "test_compile",
      "output_files": [
        "chain_compr_mult_clause.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/clause_disable_hr.mzn",
      "type": "test_compile",
      "output_files": [
        "clause_disable_hr.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/commutative_cse.mzn",
      "type": "test_compile",
      "output_files": [
        "commutative_cse.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/comp_domain_ann.mzn",
      "type": "test_compile",
      "output_files": [
        "comp_domain_ann.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/count_rewrite.mzn",
      "type": "test_compile",
      "output_files": [
        "count_rewrite.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/cv_domain.mzn",
      "type": "test_solve",
      "solutions": [
        "xs=[3,3,3,3,3];y=15;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/debug_mode_false.mzn",
      "type": "test_solve",
      "solutions": [
        "b=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/debug_mode_true.mzn",
      "type": "test_solve",
      "args": "--debug",
      "solutions": [
        "b=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/defines_var_cycle_breaking.mzn",
      "type": "test_compile",
      "output_files": [
        "defines_var_cycle_breaking.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/float_inf_range_dom.mzn",
      "type": "test_compile",
      "output_files": [
        "float_inf_range_dom.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/has_ann.mzn",
      "type": "test_solve",
      "solutions": [
        "b=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/if_then_no_else.mzn",
      "type": "test_solve",
      "solutions": [
        "b=true;s=;x=[];y=[];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/implied_exists_chain.mzn",
      "type": "test_compile",
      "output_files": [
        "implied_exists_chain.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/implied_hr.mzn",
      "type": "test_compile",
      "output_files": [
        "implied_hr.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/int_inf_dom.mzn",
      "type": "test_compile",
      "output_files": [
        "int_inf_dom.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/maybe_partial_cv.mzn",
      "type": "test_solve",
      "args": "-Werror"
    },
    {
      "suite": "default",
      "path": "unit/compilation/most_specific_reif.mzn",
      "type": "test_compile",
      "output_files": [
        "most_specific_reif.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/multiple_neg.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/compilation/optimization.mzn",
      "type": "test_compile",
      "args": "-O0",
      "output_files": [
        "optimization_0.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/optimization.mzn",
      "type": "test_compile",
      "args": "-O1",
      "output_files": [
        "optimization_1.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/optimization.mzn",
      "type": "test_compile",
      "args": "-O2",
      "output_files": [
        "optimization_2.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/optimization.mzn",
      "type": "test_compile",
      "args": "-O3",
      "output_files": [
        "optimization_3.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/optimize_unify.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "x=false;z=0;obj=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/op_precedences.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/compilation/par_arg_out_of_bounds.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/compilation/poly_overload.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/quoted_id_flatzinc.mzn",
      "type": "test_compile",
      "output_files": [
        "quoted_id_flatzinc.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/set2iter.mzn",
      "type": "test_solve",
      "solutions": [
        "x=2..3;y=4..5;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/struct_lex.mzn",
      "type": "test_compile",
      "output_files": [
        "struct_lex.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/struct_table.mzn",
      "type": "test_compile",
      "output_files": [
        "struct_table.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/struct_table_filter.mzn",
      "type": "test_compile",
      "output_files": [
        "struct_table_filter.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/test_bug_863.mzn",
      "type": "test_compile",
      "output_files": [
        "test_bug_863.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/test_bug_863b.mzn",
      "type": "test_compile",
      "output_files": [
        "test_bug_863b.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/test_bug_enum_constr_in_dom.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/test_mzn_in_root.mzn",
      "type": "test_compile",
      "output_files": [
        "test_mzn_in_root.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/compilation/time_limit.mzn",
      "type": "test_error",
      "args": "--time-limit 1",
      "error_message": "time limit reached"
    },
    {
      "suite": "default",
      "path": "unit/compilation/tuple_with_any_in_let.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div10.mzn",
      "type": "test_solve",
      "solutions": [
        "y=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div11.mzn",
      "type": "test_solve",
      "solutions": [
        "y=0;",
        "y=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div12.mzn",
      "type": "test_solve",
      "solutions": [
        "aCostSupport=0;mdl8_Z=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div2.mzn",
      "type": "test_solve",
      "solutions": [
        "y=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div3.mzn",
      "type": "test_solve",
      "solutions": [
        "i=4;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div4.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div5.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/division/test_div6.mzn",
      "type": "test_solve",
      "solutions": [
        "y=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div7.mzn",
      "type": "test_solve",
      "solutions": [
        "y=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div8.mzn",
      "type": "test_solve",
      "solutions": [
        "y=0;",
        "y=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div9.mzn",
      "type": "test_solve",
      "solutions": [
        "y=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_div_mod_bounds.mzn",
      "type": "test_solve",
      "solutions": [
        "x=20;y=-3;z=-6;zbnd=[-20,20];zfbnd=[0.15,1.333333333333333];zif=-6.666666666666667;tf=1.0;tfbnd=[0.1125,8.888888888888889];zmbnd=[0,6];zm2lb=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_fldiv_01.mzn",
      "type": "test_solve",
      "solutions": [
        "x=0.3;y=2.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/division/test_fldiv_02.mzn",
      "type": "test_solve",
      "solutions": [
        "x=2.0;y=1.5;z=1.5;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/fdlp/test_lp_solve_satisfy.mzn",
      "type": "test_solve",
      "solutions": [
        "X=6;",
        "X=7;",
        "X=8;",
        "X=9;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/fznjson/fznjson-basic.mzn",
      "type": "test_compile",
      "output_files": [
        "fznjson-basic.json"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/annotated_expression_1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/anon_var_flatten.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[{0},0..9];",
        "x=[{0},{}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/array_access_out_of_bounds_1.mzn",
      "type": "test_error",
      "error_regex": ".*array access out of bounds, array \u0060x\u0027 has index set A\\.\\.B, but given index is C.*"
    },
    {
      "suite": "default",
      "path": "unit/general/array_access_out_of_bounds_2.mzn",
      "type": "test_error",
      "error_regex": ".*array access out of bounds, array \u0060x\u0027 is empty.*"
    },
    {
      "suite": "default",
      "path": "unit/general/array_access_record_out_of_bounds.mzn",
      "type": "test_error",
      "error_regex": ".*array access out of bounds.*"
    },
    {
      "suite": "default",
      "path": "unit/general/array_access_tuple_out_of_bounds.mzn",
      "type": "test_error",
      "error_regex": ".*array access out of bounds.*"
    },
    {
      "suite": "default",
      "path": "unit/general/array_intersect_context.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=[{1},{2},{3}];b=true;",
        "x=[{1,2,3},{1,2,3},{1,2,3}];b=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/array_param_non_array_return.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/array_string_gen.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=foosbarsbazs;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/array_union_intersect_enum.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[{A},{B},{C}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/assert_bad_1.mzn",
      "type": "test_assertion_error"
    },
    {
      "suite": "default",
      "path": "unit/general/assert_bad_2.mzn",
      "type": "test_assertion_error"
    },
    {
      "suite": "default",
      "path": "unit/general/assert_good.mzn",
      "type": "test_solve",
      "solutions": [
        "x=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/auto_par_function.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/bind_par_opt.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/general/bin_pack_multiobj.mzn",
      "type": "test_solve",
      "solutions": [
        "load=[3,8,10];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/builtins_arg_max.mzn",
      "type": "test_solve",
      "solutions": [
        "bool_output=3;int_output=1;float_output=2;indexed_output=4;enumed_output=TWO;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/builtins_debug.mzn",
      "type": "test_solve",
      "solutions": [
        "assert_par_int=1;assert_var_int=2;assert_par_opt_int=3;assert_var_opt_int=4;assert_array_of_par_int=[1];assert_array_of_var_int=[2];assert_array_of_par_opt_int=[3];assert_array_of_var_opt_int=[4];trace_par_int=1;trace_var_int=2;trace_par_opt_int=3;trace_var_opt_int=4;trace_array_of_par_int=[1];trace_array_of_var_int=[2];trace_array_of_par_opt_int=[3];trace_array_of_var_opt_int=[4];logstream=trace_logstream_par_int\ntrace_logstream_var_int\ntrace_logstream_par_opt_int\ntrace_logstream_var_opt_int\ntrace_logstream_array_of_par_int\ntrace_logstream_array_of_var_int\ntrace_logstream_array_of_par_opt_int\ntrace_logstream_array_of_var_opt_int\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/circular_calls_in_type_inst.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/general/circular_calls_in_type_inst_struct.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/general/comprehension_asg_gen_where.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[2];y=[1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/comprehension_cv_struct.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;z=[\u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/comprehension_var_ub.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/cse_ctx.mzn",
      "type": "test_all_solutions",
      "args": "-G std",
      "solutions": [
        "x=1;b=true;a=true;c=false;",
        "x=0;b=false;a=false;c=true;",
        "x=0;b=false;a=true;c=true;",
        "x=1;b=true;a=false;c=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/empty_enum_index_set_mismatch.mzn",
      "type": "test_evalulation_error"
    },
    {
      "suite": "default",
      "path": "unit/general/empty_enum_sets.mzn",
      "type": "test_solve",
      "solutions": [
        "s1={};s2={};s3={};s4={};s5={};s6={};s7={};s8={};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/enum_constructor_quoting.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=\u0027Q~\u0027(\u0027F!\u0027(\u0027\u0022\u0027));"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/enum_order.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/enum_out_of_range_1.mzn",
      "type": "test_error",
      "error_regex": ".*declared domain of \u0060x\u0027 is {A}, but assigned value is B.*"
    },
    {
      "suite": "default",
      "path": "unit/general/enum_out_of_range_2.mzn",
      "type": "test_error",
      "error_regex": ".*declared domain of \u0060x\u0027 is {A}, but assigned value is {B}.*"
    },
    {
      "suite": "default",
      "path": "unit/general/enum_set_in_error.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/general/enum_set_subset_error.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/general/enum_set_superset_error.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/general/enum_set_to_ranges.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[P,Q,S,S];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/eval_par_bool_bottom.mzn",
      "type": "test_solve",
      "solutions": [
        "b=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/eval_par_opt_set.mzn",
      "type": "test_solve",
      "solutions": [
        "x=\u003C\u003E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/explicit_enum2int.mzn",
      "type": "test_solve",
      "args": "-Werror",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/fix_struct.mzn",
      "type": "test_solve",
      "solutions": [
        "x=(a:[1],b:1,);y=(a:[1],b:1,);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/fn_par_array_undefined.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[2];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/function_param_out_of_range.mzn",
      "type": "test_error",
      "error_regex": ".*declared domain of \u0060\u0027\u003Cunnamed argument\u003E\u0027\u0027 is 1\\.\\.1, but assigned value is 2.*"
    },
    {
      "suite": "default",
      "path": "unit/general/function_return_out_of_range.mzn",
      "type": "test_error",
      "error_regex": ".*result of function \u0060foo\u0027 is B, which violates function type-inst {A}.*"
    },
    {
      "suite": "default",
      "path": "unit/general/function_return_out_of_range_opt.mzn",
      "type": "test_error",
      "error_regex": ".*function result violates function type-inst, array contains value B which is not contained in {A}.*"
    },
    {
      "suite": "default",
      "path": "unit/general/ids_in_type_insts.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/ids_in_type_insts_circular.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/general/iffall_bv.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/implicit_enum2int.mzn",
      "type": "test_error",
      "args": "-Werror"
    },
    {
      "suite": "default",
      "path": "unit/general/indexed_var_comp.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,2,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/infinite_domain_bind.mzn",
      "type": "test_solve",
      "solutions": [
        "x=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/json_ignore.mzn",
      "input_files": [
        "json_ignore.mzc.mzn",
        "json_ignore.json"
      ],
      "type": "test_solve",
      "solutions": [
        "_checker=data_2 = 2;\n;data_1=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/let_struct_domain.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=1;y=2;",
        "x=2;y=2;",
        "x=1;y=3;",
        "x=2;y=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/md_exists.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/general/md_exists.mzn",
      "type": "test_solve",
      "solutions": [
        "b=true;bs=[true,true,false,false,false,false,false,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/md_forall.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/general/md_forall.mzn",
      "type": "test_solve",
      "solutions": [
        "b=true;bs=[true,true,true,true,true,true,true,true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/md_iffall.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/general/md_iffall.mzn",
      "type": "test_solve",
      "solutions": [
        "b=false;bs=[false,false,false,false,false,false,false,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/md_product_int.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/general/md_sum_float.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/general/md_sum_float.mzn",
      "type": "test_solve",
      "solutions": [
        "a=55.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/md_sum_int.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/general/md_xorall.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/general/min_max_enum.mzn",
      "type": "test_solve",
      "solutions": [
        "x1=1;x2=5;x3=2;x4=4;x5=\u003C\u003E;x6=\u003C\u003E;y1=A;y2=C;y3=A;y4=C;y6=\u003C\u003E;y7=\u003C\u003E;a1=[1,2];a2=1;a3=2;a4=[\u003C\u003E,1,2];a5=1;a6=2;a7=[\u003C\u003E];a8=\u003C\u003E;a9=\u003C\u003E;b1=[A,C];b2=A;b3=C;b4=[\u003C\u003E,A,C];b5=A;b6=C;b7=[\u003C\u003E];b8=\u003C\u003E;b9=\u003C\u003E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/missing_ozn_decl.mzn",
      "type": "test_solve",
      "solutions": [
        "I1=7;B2=true;B3=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/mortgage.mzn",
      "type": "test_solve",
      "solutions": [
        "P=373.0277986476333;mortgage=[260.3305785123967,136.3636363636363,0.0];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/multidim_array_concat.mzn",
      "type": "test_solve",
      "solutions": [
        "a=[1,2,3];b=[1,2,3,4,5,6];c=[1,2,3,4,5,6,7,8,9,10,11,12];d=[1,2,3,4,5,6,7,8,9,10,11,12];e=[1,2,3,4,5,6,7,8,9,10,11,12];f=[1,2,3,4,5,6,7,8,9,10,11,12];x=[1,2,3];y=[4,5,6,7,8,9];z=[1,2,3,4,5,6,7,8,9];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/mzn-implicit1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,1,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/mzn-implicit2.mzn",
      "type": "test_solve",
      "solutions": [
        "ia=1..3;ib=2..5;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/mzn-implicit3.mzn",
      "type": "test_solve",
      "solutions": [
        "ax=1..2;bx=1..2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/mzn-implicit4.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/mzn-implicit5.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,1,1,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/mzn-implicit6.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,1,1,1];ix=3..4;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/mzn-implicit7.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/mzn-implicit8.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,1,1,1,1,1,1,1];y=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];z=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/mzn_div.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/mzn_mod.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/negated_boolean_let.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/nosets_empty.mzn",
      "type": "test_solve",
      "solutions": [
        "x={};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/overload_bottom.mzn",
      "type": "test_solve",
      "solutions": [
        "x={};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/param_out_of_range_float.mzn",
      "type": "test_error",
      "error_regex": ".*declared domain of \u0060x\u0027 is -infinity\\.\\.-1.0 union 1.0\\.\\.infinity, but assigned value is 0\\.0.*"
    },
    {
      "suite": "default",
      "path": "unit/general/param_out_of_range_int.mzn",
      "type": "test_error",
      "error_regex": ".*declared domain of \u0060x\u0027 is -infinity\\.\\.-1 union 1\\.\\.infinity, but assigned value is 0.*"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_1.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_2.mzn",
      "type": "test_all_solutions",
      "args": "-D x -2..2; y 0"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_2.mzn",
      "type": "test_all_solutions",
      "args": "-D x -2..2; y 1"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_2.mzn",
      "type": "test_all_solutions",
      "args": "-D x 0..1; y 2"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_2.mzn",
      "type": "test_all_solutions",
      "args": "-D x -1..1; y 3"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_2.mzn",
      "type": "test_all_solutions",
      "args": "-D x 1..3; y -1"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_2.mzn",
      "type": "test_all_solutions",
      "args": "-D x 2..3; y 2"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_2.mzn",
      "type": "test_all_solutions",
      "args": "-D x -1..2; y -2"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_3.mzn",
      "type": "test_all_solutions",
      "args": "-D x 0..1; y 0..1"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_3.mzn",
      "type": "test_all_solutions",
      "args": "-D x 0..1; y 1..2"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_3.mzn",
      "type": "test_all_solutions",
      "args": "-D x -1..2; y 0..2"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_3.mzn",
      "type": "test_all_solutions",
      "args": "-D x -2..2 diff {0}; y -2..-1"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_3.mzn",
      "type": "test_all_solutions",
      "args": "-D x -2..2 diff {0}; y -1..2"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_3.mzn",
      "type": "test_all_solutions",
      "args": "-D x -1..1; y -1..1"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_4.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/pow_bounds.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/quoted_id_1.mzn",
      "type": "test_solve",
      "solutions": [
        "hello!=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/quoted_id_2.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/quoted_id_3.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=A?;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/quoted_id_4.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Foo~(A?);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/range_var_enum.mzn",
      "type": "test_solve",
      "solutions": [
        "x_to_y={A,B,C};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/reverse_map_path.mzn",
      "type": "test_all_solutions",
      "args": "--keep-paths",
      "solutions": [
        "x=[\u003C\u003E,\u003C\u003E];",
        "x=[1,\u003C\u003E];",
        "x=[\u003C\u003E,1];",
        "x=[1,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/set_function_enum_types.mzn",
      "type": "test_solve",
      "args": "-Werror"
    },
    {
      "suite": "default",
      "path": "unit/general/slice_array_of_array.mzn",
      "type": "test_solve",
      "solutions": [
        "y=[1,2,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/stack_overflow.mzn",
      "type": "test_error",
      "error_regex": ".*stack overflow.*"
    },
    {
      "suite": "default",
      "path": "unit/general/string_length.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/string_split.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/struct_flat_cv_path.mzn",
      "type": "test_solve",
      "args": "--keep-paths",
      "solutions": [
        "a=2;b=1;c=[1,2,3,4];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/struct_literal_context.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/general/test-search1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=3;y=8;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_array1.mzn",
      "type": "test_solve",
      "solutions": [
        "i=4;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_array1and2d.mzn",
      "type": "test_solve",
      "solutions": [
        "a=[1,2,3,4];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_array1d_bad_1.mzn",
      "type": "test_evalulation_error"
    },
    {
      "suite": "default",
      "path": "unit/general/test_array1d_bad_2.mzn",
      "type": "test_evalulation_error"
    },
    {
      "suite": "default",
      "path": "unit/general/test_array1d_bad_3.mzn",
      "type": "test_evalulation_error"
    },
    {
      "suite": "default",
      "path": "unit/general/test_array1d_bad_4.mzn",
      "type": "test_evalulation_error"
    },
    {
      "suite": "default",
      "path": "unit/general/test_array2.mzn",
      "type": "test_solve",
      "solutions": [
        "i=4;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_array_as_generator.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/test_bad_array_size-bad.mzn",
      "type": "test_error"
    },
    {
      "suite": "default",
      "path": "unit/general/test_bad_lb_ub_dom-bad.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/test_bool_var_array_access.mzn",
      "type": "test_solve",
      "solutions": [
        "i=2;y=true;",
        "i=2;y=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_concat1.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=\u0022abcdefghi\u0022;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_concat2.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=105.31..3A String;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_concat3.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_empty_enum.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_is_fixed.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/test_join1.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=a, b, c, d;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_join2.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=10, 5.3, A String, foobar;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_join3.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=10, 5.3, A String, foobar;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_lb_ub_array_int.mzn",
      "type": "test_solve",
      "solutions": [
        "test_1=1;test_2=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_lb_ub_dom_int.mzn",
      "type": "test_solve",
      "solutions": [
        "test_1=3;test_2=3;test_3=1;test_4=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_lb_ub_float.mzn",
      "type": "test_solve",
      "solutions": [
        "test_1=3.0;test_2=3.0;test_3=1.0;test_4=10.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_let_complex.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,3,5,7,9];y=[1,3,5,8,9];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_let_par_array.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_let_simple.mzn",
      "type": "test_solve",
      "solutions": [
        "x=42;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_let_var_array.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;",
        "x=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_let_with_annotation.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;",
        "x=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_min_var_array.mzn",
      "type": "test_solve",
      "solutions": [
        "a=[1,1,1];x=1;",
        "a=[2,2,2];x=2;",
        "a=[3,3,3];x=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_mod_bounds.mzn",
      "type": "test_solve",
      "solutions": [
        "b=0..2;c=-2..2;d=-2..0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_negated_and.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=false;y=false;z=false;",
        "x=false;y=false;z=true;",
        "x=false;y=true;z=false;",
        "x=false;y=true;z=true;",
        "x=true;y=false;z=false;",
        "x=true;y=false;z=true;",
        "x=true;y=true;z=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_negated_and_or.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=true;y=false;z=false;",
        "x=false;y=true;z=false;",
        "x=false;y=false;z=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_negated_let_bad.mzn",
      "type": "test_minzinc_error"
    },
    {
      "suite": "default",
      "path": "unit/general/test_negated_let_good.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;",
        "x=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_negated_let_good_2.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=[0];",
        "x=[2];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_negated_or.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=false;y=false;z=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_par_set_element.mzn",
      "type": "test_solve",
      "solutions": [
        "a=[{1},1..2,1..3];s={1};x=1;",
        "a=[{1},1..2,1..3];s=1..2;x=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_par_set_id_array_index_sets.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_queens.mzn",
      "type": "test_solve",
      "solutions": [
        "q=[9,13,2,8,11,20,10,6,19,15,18,12,7,16,4,17,14,5,3,1];",
        "q=[9,7,10,14,11,15,4,12,5,13,1,3,6,8,2,17,19,16,18,20];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_reified_element_constraint.mzn",
      "type": "test_solve",
      "solutions": [
        "a=[1,1,1];b=false;i=4;x=1;",
        "a=[2,1,1];b=false;i=4;x=1;",
        "a=[2,3,3];b=false;i=4;x=1;",
        "a=[10,10,10];b=false;i=6;x=100;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_reified_let_bad.mzn",
      "type": "test_minzinc_error"
    },
    {
      "suite": "default",
      "path": "unit/general/test_reified_let_good.mzn",
      "type": "test_solve",
      "solutions": [
        "b=false;x=1;",
        "b=false;x=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_rounding_a.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "_output_item=-2.00, -2, -2, -2 OK;x=-2.0;",
        "_output_item=-1.75, -1, -2, -2 OK;x=-1.75;",
        "_output_item=-1.50, -1, -2, -2 OK;x=-1.5;",
        "_output_item=-1.25, -1, -2, -1 OK;x=-1.25;",
        "_output_item=-1.00, -1, -1, -1 OK;x=-1.0;",
        "_output_item=-0.25, 0, -1, 0 OK;x=-0.25;",
        "_output_item=-0.00, 0, 0, 0 OK;x=0.0;",
        "_output_item=0.00, 0, 0, 0 OK;x=0.0;",
        "_output_item=0.25, 1, 0, 0 OK;x=0.25;",
        "_output_item=0.50, 1, 0, 1 OK;x=0.5;",
        "_output_item=0.75, 1, 0, 1 OK;x=0.75;",
        "_output_item=1.00, 1, 1, 1 OK;x=1.0;",
        "_output_item=1.25, 2, 1, 1 OK;x=1.25;",
        "_output_item=1.50, 2, 1, 2 OK;x=1.5;",
        "_output_item=1.75, 2, 1, 2 OK;x=1.75;",
        "_output_item=2.00, 2, 2, 2 OK;x=2.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_rounding_b.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "_output_item=0.00, 0, 0, 0 OK;x=0.0;",
        "_output_item=0.25, 1, 0, 0 OK;x=0.25;",
        "_output_item=0.50, 1, 0, 1 OK;x=0.5;",
        "_output_item=0.75, 1, 0, 1 OK;x=0.75;",
        "_output_item=1.00, 1, 1, 1 OK;x=1.0;",
        "_output_item=1.25, 2, 1, 1 OK;x=1.25;",
        "_output_item=1.50, 2, 1, 2 OK;x=1.5;",
        "_output_item=1.75, 2, 1, 2 OK;x=1.75;",
        "_output_item=2.00, 2, 2, 2 OK;x=2.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_rounding_c.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "_output_item=-2.00, -2, -2, -2 OK;x=-2.0;",
        "_output_item=-1.75, -1, -2, -2 OK;x=-1.75;",
        "_output_item=-1.50, -1, -2, -2 OK;x=-1.5;",
        "_output_item=-1.25, -1, -2, -1 OK;x=-1.25;",
        "_output_item=-1.00, -1, -1, -1 OK;x=-1.0;",
        "_output_item=-0.25, 0, -1, 0 OK;x=-0.25;",
        "_output_item=-0.00, 0, 0, 0 OK;x=0.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_same.mzn",
      "type": "test_solve",
      "solutions": [
        "if5_5=1;if5f_5=0;if5_4=0;if5f_5f=1;if2_set2_4=0;ifTwoVars=0;ifTwoOptVars=0;ifEqualInitVars=1;ifEqualChainInitVars=1;ifOneVar=1;ifOneOptVar=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_set_inequality_par.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/test_set_lt_1.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "sets=[1..3,{1,2,4},{1,2,5},{1,2,6},{1,3,4},{1,3,5},{1,3,6},{1,4,5},{1,4,6},{1,5,6},2..4,{2,3,5},{2,3,6},{2,4,5},{2,4,6},{2,5,6},3..5,{3,4,6},{3,5,6},4..6];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_set_lt_2.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "sets=[{},{1},1..2,1..3,{1,3},{2},2..3,{3}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_set_lt_2.mzn",
      "type": "test_solve",
      "solutions": [
        "sets=[{},{1},1..2,1..3,{1,3},{2},2..3,{3}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_set_lt_3.mzn",
      "type": "test_solve",
      "solutions": [
        "y={1,4};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_string_array_var.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=All is well;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_string_cmp.mzn",
      "type": "test_solve",
      "solutions": [
        "xs=[1,2,3,1,2,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_string_var.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=All is well;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_string_with_quote.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Escaped single \u0027quotes\u0027 are fine.;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_times_int_float_eq.mzn",
      "type": "test_solve",
      "args": "-D QuadrFloat=true;QuadrIntCard=0",
      "solutions": [
        "objective=-5;x=5;y=6;z=30;xf=5.0;yf=6.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_times_int_float_eq__defaultopt.mzn",
      "type": "test_solve",
      "solutions": [
        "objective=-5;x=5;y=6;z=30;xf=5.0;yf=6.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_to_enum.mzn",
      "type": "test_solve",
      "solutions": [
        "par_int=b;var_int=c;array_of_int=[a,b,c];array_of_var_int=[a,b,c];array_of_set_of_int=[{a},{a,b},{a,b,c}];array_of_var_set_of_int=[{a},{a,b},{a,b,c}];set_of_int={a,b,c};var_set_of_int={a,b,c};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_undefined_enum.mzn",
      "type": "test_compile",
      "args": "--model-check-only",
      "output_files": [
        "test_undefined_enum.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_var_array.mzn",
      "type": "test_solve",
      "solutions": [
        "b=[true,false,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_var_array_access.mzn",
      "type": "test_solve",
      "solutions": [
        "i=1;x=1;y={1};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_var_prod.mzn",
      "type": "test_solve",
      "solutions": [
        "p=1;xs=[1,1,1,1];",
        "p=140;xs=[2,7,10,1];",
        "p=700;xs=[10,10,7,1];",
        "p=1000;xs=[1,10,10,10];",
        "p=1000;xs=[10,10,1,10];",
        "p=1000;xs=[10,10,10,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_var_set_assignment.mzn",
      "type": "test_solve",
      "solutions": [
        "a=[{1},2..3,4..5];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/test_var_set_element.mzn",
      "type": "test_solve",
      "solutions": [
        "a=[{},{},{}];s={};x=3;",
        "a=[1..5,1..5,1..5];s=1..5;x=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/unicode_file_name_\u03BC.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/general/unify_and_remove.mzn",
      "type": "test_solve",
      "solutions": [
        "x=\u003C\u003E;y=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/wolfgoatetc.mzn",
      "type": "test_solve",
      "solutions": [
        "A=[2,2,0,0,3,3,2,2,1,1,0,0,2,2,0];solved=15;",
        "A=[2,2,0,0,1,1,2,2,3,3,0,0,2,2,0];solved=15;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/general/xorall_bv.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/typecheck_globals.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/anon_enum_json.mzn",
      "input_files": [
        "anon_enum_json.json"
      ],
      "type": "test_solve",
      "solutions": [
        "x=Foo(1);y=Foo(2);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/anon_enum_json.mzn",
      "input_files": [
        "anon_enum_json_err.json"
      ],
      "type": "test_error",
      "error_regex": ".*invalid enum object.*"
    },
    {
      "suite": "default",
      "path": "unit/json/coerce_enum_str.mzn",
      "input_files": [
        "coerce_enum_str.json"
      ],
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/coerce_enum_str_err.mzn",
      "input_files": [
        "coerce_enum_str_err.json"
      ],
      "type": "test_error",
      "error_regex": ".*has invalid type-inst.*"
    },
    {
      "suite": "default",
      "path": "unit/json/coerce_indices.mzn",
      "input_files": [
        "coerce_indices.json"
      ],
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/coerce_set.mzn",
      "input_files": [
        "coerce_set.json"
      ],
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/enum_array_xd.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/enum_constructor_basic.mzn",
      "input_files": [
        "enum_constructor_basic.json"
      ],
      "type": "test_solve",
      "solutions": [
        "x=F(A);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/enum_constructor_basic_2.mzn",
      "input_files": [
        "enum_constructor_basic_2.json"
      ],
      "type": "test_solve",
      "solutions": [
        "x=F(A);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/enum_constructor_int.mzn",
      "input_files": [
        "enum_constructor_int.json"
      ],
      "type": "test_solve",
      "solutions": [
        "x=Foo(2);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/enum_constructor_nested.mzn",
      "input_files": [
        "enum_constructor_nested.json"
      ],
      "type": "test_solve",
      "solutions": [
        "x=G(F(A));"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/enum_escaping.mzn",
      "type": "test_solve",
      "solutions": [
        "x=\u0022;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/enum_int_coercion.mzn",
      "input_files": [
        "enum_int_coercion.json"
      ],
      "type": "test_solve",
      "solutions": [
        "t=[1,2,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/float_json_exponent.mzn",
      "input_files": [
        "float_json_exponent.json"
      ],
      "type": "test_solve",
      "solutions": [
        "x=2.0e-05;y=1500.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/json_array2d_set.mzn",
      "input_files": [
        "json_array2d_set.json"
      ],
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/json_enum_def.mzn",
      "input_files": [
        "json_enum_def.json"
      ],
      "type": "test_solve",
      "solutions": [
        "w=A;x=D;y=G;z=J;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/json_input_1.mzn",
      "input_files": [
        "json_input_1.json"
      ],
      "type": "test_solve",
      "solutions": [
        "int_set={1,2,4,5,7,9};float_set={1.0,2.0};array_1d_float=[1.0,2.0,3.0];array_2d_bool=[true];array_3d_int=[1,2,3,4,5,6,7,8];array_opt_float=[1.5,\u003C\u003E];x=1;y=2.0;z=true;o=\u003C\u003E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/json_input_multidim_enum_str.mzn",
      "input_files": [
        "json_input_multidim_enum_str.json"
      ],
      "type": "test_solve",
      "solutions": [
        "x=[A,B,C,D];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/json_input_set.mzn",
      "input_files": [
        "json_input_set.json"
      ],
      "type": "test_solve",
      "solutions": [
        "_output_item=x = {1,2,3,4,6,9,10,11}, y = 1.0..1.0 union 2.0..4.0 union 6.0..6.0 union 9.0..11.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/json_input_str.mzn",
      "input_files": [
        "json_input_str.json"
      ],
      "type": "test_solve",
      "solutions": [
        "s=abcd;ss=[abc,def,ghi];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/json_unicode_escapes.mzn",
      "input_files": [
        "json_unicode_escapes.json"
      ],
      "type": "test_solve",
      "solutions": [
        "a=A;mu=\u03BC;arrow=\u2191;clef=\uD834\uDD1E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/mult_dim_enum.mzn",
      "input_files": [
        "mult_dim_enum.json"
      ],
      "type": "test_solve",
      "solutions": [
        "use_e=[A,B,B,C];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/record_json_input.mzn",
      "input_files": [
        "record_json_input.json"
      ],
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/json/tuple_json_input.mzn",
      "input_files": [
        "tuple_json_input.json"
      ],
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/on_restart/complete.mzn",
      "type": "test_solve",
      "args": "--restart constant --restart-base 100",
      "solutions": [
        "x=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/on_restart/last_val_bool.mzn",
      "type": "test_solve",
      "args": "--restart constant --restart-base 100",
      "solutions": [
        "x=4;y=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/on_restart/last_val_float.mzn",
      "type": "test_solve",
      "args": "--restart constant --restart-base 100",
      "solutions": [
        "x=4;y=0.85;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/on_restart/last_val_int.mzn",
      "type": "test_solve",
      "args": "--restart constant --restart-base 100",
      "solutions": [
        "x=4;y=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/on_restart/last_val_set.mzn",
      "type": "test_solve",
      "args": "--restart constant --restart-base 100",
      "solutions": [
        "x=4;y={1,2,4,8};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/on_restart/sol_bool.mzn",
      "type": "test_solve",
      "args": "--restart constant --restart-base 100",
      "solutions": [
        "x=3;is_even=false;y=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/on_restart/sol_float.mzn",
      "type": "test_solve",
      "args": "--restart constant --restart-base 100",
      "solutions": [
        "x=3;y=2.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/on_restart/sol_int.mzn",
      "type": "test_solve",
      "args": "--restart constant --restart-base 100",
      "solutions": [
        "x=3;y=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/on_restart/sol_set.mzn",
      "type": "test_solve",
      "args": "--restart constant --restart-base 100",
      "solutions": [
        "x={};y={1};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/bind_absent.mzn",
      "type": "test_solve",
      "solutions": [
        "x=\u003C\u003E;y=\u003C\u003E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/comprehension_of_absent_1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[\u003C\u003E,\u003C\u003E,\u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/comprehension_of_absent_2.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[\u003C\u003E,\u003C\u003E,\u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/conj_absent_1.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/optional/conj_absent_2.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/optional/fn_return_array_absent.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[\u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/opt_array_access.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/opt_array_access_absent.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/opt_array_access_absent_empty.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[];i=\u003C\u003E;y=\u003C\u003E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/opt_math_abs.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/opt_math_neg.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/opt_string_comprehension.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[\u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/opt_top_absent.mzn",
      "type": "test_solve",
      "solutions": [
        "x=true;a=true;b=true;c=true;p=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-binop-flatten.mzn",
      "type": "test_solve",
      "solutions": [
        "z=5;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-bool-1.mzn",
      "type": "test_solve",
      "solutions": [
        "conjunction=[true,false,true,false,false,false,true,false,true];disjunction=[false,false,true,false,false,true,true,true,true];negation=[\u003C\u003E,true,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-bool-2.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=true;y=true;",
        "x=true;y=\u003C\u003E;",
        "x=\u003C\u003E;y=true;",
        "x=\u003C\u003E;y=\u003C\u003E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-bool-3.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=true;y=true;",
        "x=true;y=\u003C\u003E;",
        "x=\u003C\u003E;y=true;",
        "x=false;y=true;",
        "x=true;y=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-bool-4.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=true;y=false;",
        "x=false;y=true;",
        "x=\u003C\u003E;y=\u003C\u003E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-bool-5.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=[\u003C\u003E,\u003C\u003E,\u003C\u003E];",
        "x=[true,\u003C\u003E,\u003C\u003E];",
        "x=[\u003C\u003E,true,\u003C\u003E];",
        "x=[true,true,\u003C\u003E];",
        "x=[\u003C\u003E,\u003C\u003E,true];",
        "x=[true,\u003C\u003E,true];",
        "x=[\u003C\u003E,true,true];",
        "x=[true,true,true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-bool-6.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=[true,\u003C\u003E,\u003C\u003E];",
        "x=[true,false,\u003C\u003E];",
        "x=[true,\u003C\u003E,false];",
        "x=[true,false,false];",
        "x=[\u003C\u003E,true,\u003C\u003E];",
        "x=[false,true,\u003C\u003E];",
        "x=[\u003C\u003E,true,false];",
        "x=[false,true,false];",
        "x=[true,true,\u003C\u003E];",
        "x=[true,true,false];",
        "x=[\u003C\u003E,\u003C\u003E,true];",
        "x=[false,\u003C\u003E,true];",
        "x=[\u003C\u003E,false,true];",
        "x=[false,false,true];",
        "x=[true,\u003C\u003E,true];",
        "x=[true,false,true];",
        "x=[\u003C\u003E,true,true];",
        "x=[false,true,true];",
        "x=[true,true,true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-compute-bounds.mzn",
      "type": "test_solve",
      "solutions": [
        "z=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-float-1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1.0,\u003C\u003E];",
        "x=[\u003C\u003E,1.0];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-float-2.mzn",
      "type": "test_solve",
      "solutions": [
        "addn=[0.0,-2.0,-1.0,0.0,1.0,2.0,-2.0,-4.0,-3.0,-2.0,-1.0,0.0,-1.0,-3.0,-2.0,-1.0,0.0,1.0,0.0,-2.0,-1.0,0.0,1.0,2.0,1.0,-1.0,0.0,1.0,2.0,3.0,2.0,0.0,1.0,2.0,3.0,4.0];subn=[\u003C\u003E,\u003C\u003E,\u003C\u003E,\u003C\u003E,\u003C\u003E,\u003C\u003E,-2.0,0.0,-1.0,-2.0,-3.0,-4.0,-1.0,1.0,0.0,-1.0,-2.0,-3.0,0.0,2.0,1.0,0.0,-1.0,-2.0,1.0,3.0,2.0,1.0,0.0,-1.0,2.0,4.0,3.0,2.0,1.0,0.0];prod=[1.0,-2.0,-1.0,0.0,1.0,2.0,-2.0,4.0,2.0,0.0,-2.0,-4.0,-1.0,2.0,1.0,0.0,-1.0,-2.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,-2.0,-1.0,0.0,1.0,2.0,2.0,-4.0,-2.0,0.0,2.0,4.0];divn=[\u003C\u003E,\u003C\u003E,\u003C\u003E,\u003C\u003E,\u003C\u003E,-2.0,1.0,2.0,-2.0,-1.0,-1.0,0.5,1.0,-1.0,-0.5,1.0,-0.5,-1.0,1.0,0.5,2.0,-1.0,-2.0,2.0,1.0];gt=[true,true,true,true,false,false,true,true,false];ge=[true,true,true,true,true,false,true,true,true];lt=[true,true,true,true,false,true,true,false,false];le=[true,true,true,true,true,true,true,false,true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-if-then-else.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=1;y=\u003C\u003E;p=false;a=1;b=\u003C\u003E;c=\u003C\u003E;",
        "x=\u003C\u003E;y=1;p=false;a=1;b=1;c=\u003C\u003E;",
        "x=\u003C\u003E;y=1;p=true;a=\u003C\u003E;b=\u003C\u003E;c=\u003C\u003E;",
        "x=1;y=\u003C\u003E;p=true;a=\u003C\u003E;b=1;c=\u003C\u003E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-int-1.mzn",
      "type": "test_solve",
      "solutions": [
        "addn=[0,-2,-1,0,1,2,-2,-4,-3,-2,-1,0,-1,-3,-2,-1,0,1,0,-2,-1,0,1,2,1,-1,0,1,2,3,2,0,1,2,3,4];subn=[\u003C\u003E,\u003C\u003E,\u003C\u003E,\u003C\u003E,\u003C\u003E,\u003C\u003E,-2,0,-1,-2,-3,-4,-1,1,0,-1,-2,-3,0,2,1,0,-1,-2,1,3,2,1,0,-1,2,4,3,2,1,0];prod=[1,-2,-1,0,1,2,-2,4,2,0,-2,-4,-1,2,1,0,-1,-2,0,0,0,0,0,0,1,-2,-1,0,1,2,2,-4,-2,0,2,4];divn=[\u003C\u003E,\u003C\u003E,\u003C\u003E,\u003C\u003E,\u003C\u003E,-2,1,2,-2,-1,-1,0,1,-1,0,1,0,-1,1,0,2,-1,-2,2,1];gt=[true,true,true,true,false,false,true,true,false];ge=[true,true,true,true,true,false,true,true,true];lt=[true,true,true,true,false,true,true,false,false];le=[true,true,true,true,true,true,true,false,true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-int-2.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=[2,\u003C\u003E,\u003C\u003E];",
        "x=[\u003C\u003E,2,\u003C\u003E];",
        "x=[1,1,\u003C\u003E];",
        "x=[\u003C\u003E,\u003C\u003E,2];",
        "x=[1,\u003C\u003E,1];",
        "x=[\u003C\u003E,1,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test-opt-int-3.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=[3,2,\u003C\u003E];",
        "x=[2,3,\u003C\u003E];",
        "x=[3,\u003C\u003E,2];",
        "x=[2,\u003C\u003E,3];",
        "x=[\u003C\u003E,3,2];",
        "x=[\u003C\u003E,2,3];",
        "x=[3,2,1];",
        "x=[2,3,1];",
        "x=[3,1,2];",
        "x=[1,3,2];",
        "x=[2,1,3];",
        "x=[1,2,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test_bug_456.mzn",
      "type": "test_compile",
      "output_files": [
        "test_bug_456.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test_count_set.mzn",
      "type": "test_solve",
      "solutions": [
        "i=0;x=6..10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test_deopt_absent.mzn",
      "type": "test_solve",
      "solutions": [
        "b=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test_if_then_else_opt_bool.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/optional/test_if_then_else_opt_float.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/optional/test_if_then_else_opt_int.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/optional/test_if_then_else_var_opt_bool.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/optional/test_if_then_else_var_opt_float.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/optional/test_if_then_else_var_opt_int.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/optional/test_optional_not_absent.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/optional/test_opt_comprehension.mzn",
      "type": "test_solve",
      "solutions": [
        "z=[false,false,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test_opt_dom_empty.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/optional/test_opt_dom_empty_no_absent_zero.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/optional/test_opt_max.mzn",
      "type": "test_solve",
      "solutions": [
        "y=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/optional/test_opt_min.mzn",
      "type": "test_solve",
      "solutions": [
        "y=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/arg-reif-output.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=WORKED;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/array-ann.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/array_of_array.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=[1,2,2];y=[1,1,2,2,2];z=[-1,1,0,2];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/bug288a.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/bug288b.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/bug288c.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/ctx_ann.mzn",
      "type": "test_solve",
      "solutions": [
        "c=5;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/dzn_output_array.mzn",
      "type": "test_output_model",
      "output_files": [
        "dzn_output_array.ozn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/enum_constructor_functions.mzn",
      "type": "test_output_model",
      "output_files": [
        "enum_constructor_functions.ozn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/format_justified_enums.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=\u003E      [Hello, World]\u003C;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/json_ann.mzn",
      "type": "test_solve",
      "solutions": [
        "x=promise_total;y=expression_name(\u0022test\u0022);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/json_multidim.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[[{\u0022e\u0022:\u0022A\u0022}, {\u0022e\u0022:\u0022B\u0022}], [{\u0022e\u0022:\u0022C\u0022}, {\u0022e\u0022:\u0022D\u0022}]] [[{\u0022e\u0022:\u0022A\u0022}, {\u0022e\u0022:\u0022B\u0022}], [{\u0022e\u0022:\u0022C\u0022}, {\u0022e\u0022:\u0022D\u0022}]];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/local_output.mzn",
      "type": "test_solve",
      "solutions": [
        "a=[1];x@14.5-28|a@13.6=[1];_output_item=predicate: [1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/mzn_bottom1.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item={};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/mzn_bottom2.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=1..3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/mzn_bottom3.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=1..2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/mzn_bottom4.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/mzn_bottom5.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/mzn_bottom6.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[1, _, _, _, _, _, _, _];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/no_output_reverse_mapped_var.mzn",
      "type": "test_solve",
      "solutions": [
        "y=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/opt_set_enum.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item={A, C}, \u003C\u003E, [{A, B}, \u003C\u003E, {A, C}, \u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_annotations_1.mzn",
      "type": "test_solve",
      "solutions": [
        "b=4;y=1;z=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_annotations_2.mzn",
      "type": "test_solve",
      "solutions": [
        "x@10.3-24=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_annotations_3.mzn",
      "type": "test_solve",
      "solutions": [
        "objective=6;x@15.3-23|i=1@14.23|sum@14.18-16.7|=@14.12-16.7=1;x@15.3-23|i=2@14.23|sum@14.18-16.7|=@14.12-16.7=2;x@15.3-23|i=3@14.23|sum@14.18-16.7|=@14.12-16.7=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_annotations_4.mzn",
      "type": "test_solve",
      "solutions": [
        "a=9;y@11.3-24|foo@15.12-17=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_sections_1.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=aebdc;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_sections_1.mzn",
      "type": "test_solve",
      "args": "--only-sections foo,bar",
      "solutions": [
        "_output_item=bdc;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_sections_1.mzn",
      "type": "test_solve",
      "args": "--not-sections foo,bar",
      "solutions": [
        "_output_item=ae;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_sections_2.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=aebdc;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_sections_2.mzn",
      "type": "test_solve",
      "args": "--only-sections foo,bar",
      "solutions": [
        "_output_item=bdc;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_sections_2.mzn",
      "type": "test_solve",
      "args": "--not-sections foo,bar",
      "solutions": [
        "_output_item=ae;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_sections_3.mzn",
      "type": "test_solve",
      "solutions": [
        "objective=9;_output_item=x = 10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_sections_4.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=x = 10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_sections_5.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=x = 10\ny = 1\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_sections_6.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=output_to_section: 10\noutput_item: 10\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/output_sections_7.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[1]\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/quoted_id_ozn.mzn",
      "type": "test_output_model",
      "output_files": [
        "quoted_id_ozn.ozn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/record_access_printing.mzn",
      "type": "test_output_model",
      "output_files": [
        "record_access_printing.ozn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/show2d_empty.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[| |];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/show3d_empty.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[| | | |];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/show_empty.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/show_float.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=  123.46@\n123.46  @\n123     @\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/show_float_set.mzn",
      "type": "test_solve",
      "solutions": [
        "y=[{},4.0..infinity,{2.0,3.0},2.0..2.0 union 3.0..3.0 union 4.0..infinity,-1.0..1.0,-1.0..1.0 union 4.0..infinity,-1.0..1.0 union 2.0..2.0 union 3.0..3.0,-1.0..1.0 union 2.0..2.0 union 3.0..3.0 union 4.0..infinity,{-3.0,-2.0},-3.0..-3.0 union -2.0..-2.0 union 4.0..infinity,{-3.0,-2.0,2.0,3.0},-3.0..-3.0 union -2.0..-2.0 union 2.0..2.0 union 3.0..3.0 union 4.0..infinity,-3.0..-3.0 union -2.0..-2.0 union -1.0..1.0,-3.0..-3.0 union -2.0..-2.0 union -1.0..1.0 union 4.0..infinity,-3.0..-3.0 union -2.0..-2.0 union -1.0..1.0 union 2.0..2.0 union 3.0..3.0,-3.0..-3.0 union -2.0..-2.0 union -1.0..1.0 union 2.0..2.0 union 3.0..3.0 union 4.0..infinity,-infinity..-4.0,-infinity..-4.0 union 4.0..infinity,-infinity..-4.0 union 2.0..2.0 union 3.0..3.0,-infinity..-4.0 union 2.0..2.0 union 3.0..3.0 union 4.0..infinity,-infinity..-4.0 union -1.0..1.0,-infinity..-4.0 union -1.0..1.0 union 4.0..infinity,-infinity..-4.0 union -1.0..1.0 union 2.0..2.0 union 3.0..3.0,-infinity..-4.0 union -1.0..1.0 union 2.0..2.0 union 3.0..3.0 union 4.0..infinity,-infinity..-4.0 union -3.0..-3.0 union -2.0..-2.0,-infinity..-4.0 union -3.0..-3.0 union -2.0..-2.0 union 4.0..infinity,-infinity..-4.0 union -3.0..-3.0 union -2.0..-2.0 union 2.0..2.0 union 3.0..3.0,-infinity..-4.0 union -3.0..-3.0 union -2.0..-2.0 union 2.0..2.0 union 3.0..3.0 union 4.0..infinity,-infinity..-4.0 union -3.0..-3.0 union -2.0..-2.0 union -1.0..1.0,-infinity..-4.0 union -3.0..-3.0 union -2.0..-2.0 union -1.0..1.0 union 4.0..infinity,-infinity..-4.0 union -3.0..-3.0 union -2.0..-2.0 union -1.0..1.0 union 2.0..2.0 union 3.0..3.0,-infinity..-4.0 union -3.0..-3.0 union -2.0..-2.0 union -1.0..1.0 union 2.0..2.0 union 3.0..3.0 union 4.0..infinity];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/show_int.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=561@\n 561@\n561 @\n1234567@\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/show_int_set.mzn",
      "type": "test_solve",
      "solutions": [
        "y=[{},7..infinity,{3,5},{3,5} union 7..infinity,-1..1,{-1,0,1} union 7..infinity,{-1,0,1,3,5},{-1,0,1,3,5} union 7..infinity,{-5,-3},{-5,-3} union 7..infinity,{-5,-3,3,5},{-5,-3,3,5} union 7..infinity,{-5,-3,-1,0,1},{-5,-3,-1,0,1} union 7..infinity,{-5,-3,-1,0,1,3,5},{-5,-3,-1,0,1,3,5} union 7..infinity,-infinity..-7,-infinity..-7 union {} union 7..infinity,-infinity..-7 union {3,5},-infinity..-7 union {3,5} union 7..infinity,-infinity..-7 union {-1,0,1},-infinity..-7 union {-1,0,1} union 7..infinity,-infinity..-7 union {-1,0,1,3,5},-infinity..-7 union {-1,0,1,3,5} union 7..infinity,-infinity..-7 union {-5,-3},-infinity..-7 union {-5,-3} union 7..infinity,-infinity..-7 union {-5,-3,3,5},-infinity..-7 union {-5,-3,3,5} union 7..infinity,-infinity..-7 union {-5,-3,-1,0,1},-infinity..-7 union {-5,-3,-1,0,1} union 7..infinity,-infinity..-7 union {-5,-3,-1,0,1,3,5},-infinity..-7 union {-5,-3,-1,0,1,3,5} union 7..infinity];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/test-in-output.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "_output_item=x = 1\ny = 2\nNO\n;",
        "_output_item=x = 1\ny = 2\nYES\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/tuple_interpolation.mzn",
      "type": "test_syntax_error"
    },
    {
      "suite": "default",
      "path": "unit/output/var_enum.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[\u0022X_INTRODUCED_16_\u0022, \u0022X_INTRODUCED_17_\u0022, \u0022X_INTRODUCED_18_\u0022] [X_INTRODUCED_16_, X_INTRODUCED_17_, X_INTRODUCED_18_] [Inch, Inch, Inch];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/very_empty.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/output/very_empty_set.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/param_file/param_file_array.mzn",
      "type": "test_solve",
      "args": "--param-file ./spec/unit/param_file/param_file_array.json",
      "solutions": [
        "x=true;y=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/param_file/param_file_blacklist.mzn",
      "input_files": [
        "param_file_blacklist_1.mpc"
      ],
      "type": "test_error",
      "error_regex": ".*not allowed in configuration file.*"
    },
    {
      "suite": "default",
      "path": "unit/param_file/param_file_blacklist.mzn",
      "input_files": [
        "param_file_blacklist_2.mpc"
      ],
      "type": "test_error",
      "error_regex": ".*not allowed in configuration file.*"
    },
    {
      "suite": "default",
      "path": "unit/param_file/param_file_nested_object.mzn",
      "input_files": [
        "param_file_nested_object.mpc"
      ],
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/param_file/param_file_recursive.mzn",
      "input_files": [
        "param_file_recursive.mpc"
      ],
      "type": "test_error",
      "error_regex": ".*Cyclic parameter configuration file.*"
    },
    {
      "suite": "default",
      "path": "unit/param_file/param_file_resolution.mzn",
      "input_files": [
        "param_file_resolution.mpc"
      ],
      "type": "test_solve",
      "solutions": [
        "x=1;y=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/absent_id_crash.mzn",
      "type": "test_solve",
      "solutions": [
        "z=[\u003C\u003E,\u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/abs_bug.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[4, 10]\n{4,10,13}\n{1,3,4}\ndepot(a,4).\ndepot(c,10).\n;",
        "_output_item=[4, 13]\n{4,10,13}\n{1,3,4}\ndepot(a,4).\ndepot(d,13).;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/arg-reif-array-float.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/arg-reif-array-int.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/arg-reif-float.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/arg-reif-int-set.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/arg-reif-int.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/array_of_empty_sets.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/array_set_element_nosets.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;y=[{1},{2},{3}];z={1};",
        "x=3;y=[{1},{2},{3}];z={3};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/array_var_set_element_nosets.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;y=[1..3,{},{1}];z=1..3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/assign_reverse_map.mzn",
      "type": "test_solve",
      "solutions": [
        "x=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/big_array_lit.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/bind-defines-var.mzn",
      "type": "test_unsatisfiable",
      "args": "-G std"
    },
    {
      "suite": "default",
      "path": "unit/regression/binop_mult_gclock.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bizarre.mzn",
      "type": "test_solve",
      "solutions": [
        "allsym=[P,L,E,A,S,E, ,S,O,L,V,E,P,U,Z,Z,L,E,?,?,?,?,?,?];num_symbols2=11;sym2=[A, ,S,O,V,P,U,Z,L,E,?];x=0;",
        "allsym=[P,L,E,A,S,E, ,S,O,L,V,E,P,U,Z,Z,L,E,?,?,?,?,?,?];num_symbols2=11;sym2=[A, ,S,O,V,P,U,Z,L,E,?];x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bool2float_let.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/bounds_for_linear_01_max_0.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bounds_for_linear_01_max_1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bounds_for_linear_01_min_0.mzn",
      "type": "test_solve",
      "solutions": [
        "x=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bounds_for_linear_01_min_1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug109.mzn",
      "type": "test_solve",
      "solutions": [
        "p=[1,2,1];",
        "p=[2,2,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug110.mzn",
      "type": "test_solve",
      "solutions": [
        "board=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];",
        "board=[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug131.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/bug141.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,1,1,1,1,1,1,1,1];",
        "x=[9,9,9,9,9,9,9,9,9];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug202.mzn",
      "type": "test_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/bug212.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/bug222.mzn",
      "type": "test_solve",
      "solutions": [
        "K=11;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug244.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/bug256.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/bug256b.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[{},{},{}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug259.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=sz[1][1][1][5] = 1\nsz[1][2][1][1] = 1\npz[1][1][1][2][13] = 1\npz[1][2][1][1][13] = 1\n;obj=62;",
        "_output_item=sz[1][1][1][5] = 1\nsz[1][2][1][1] = 1\npz[1][1][1][1][13] = 1\npz[1][2][1][2][13] = 1\n;obj=62;",
        "_output_item=sz[1][1][1][1] = 1\nsz[1][2][1][5] = 1\npz[1][1][1][1][13] = 1\npz[1][2][1][2][13] = 1\n;obj=62;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug269.mzn",
      "type": "test_solve",
      "solutions": [
        "queens=[4,6,1,5,2,8,3,7];",
        "queens=[4,6,8,3,1,7,5,2];",
        "queens=[8,4,1,3,6,2,7,5];",
        "queens=[2,5,7,4,1,8,6,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug282.mzn",
      "type": "test_solve",
      "solutions": [
        "P=-2147483645;Q=-2147483644;R=-2147483646;",
        "P=1;Q=2;R=0;",
        "P=-499999999;Q=-499999998;R=-500000000;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug283.mzn",
      "type": "test_solve",
      "solutions": [
        "A3=false;B3=true;",
        "A3=true;B3=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug284.mzn",
      "type": "test_solve",
      "solutions": [
        "ignore_me=true;",
        "A=1;B=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug287.mzn",
      "type": "test_solve",
      "solutions": [
        "q=[1,2];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug290_orig.mzn",
      "type": "test_solve",
      "solutions": [
        "b=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug290_simple.mzn",
      "type": "test_solve",
      "solutions": [
        "b=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug312.mzn",
      "type": "test_solve",
      "solutions": [
        "objective=1;var1=1;var2=2;var3=1;var4=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug318_orig.mzn",
      "type": "test_solve",
      "solutions": [
        "objective=-2147483646;var1=1;var2=-2147483646;var3=-2147483646;",
        "objective=-500000000;var1=1;var2=-500000000;var3=-500000000;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug335.mzn",
      "type": "test_solve",
      "solutions": [
        "sokPosns=[14,13,8,7,8,9,4,5,10,1,1,1];stime=9;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug337.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[false,false];y=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug337_mod.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[false,true];y=0;",
        "x=[false,false];y=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug341.mzn",
      "type": "test_solve",
      "solutions": [
        "S=[1..3,4..6];",
        "S=[{},{}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug347.mzn",
      "type": "test_solve",
      "solutions": [
        "execution_unit_1000_3=0;execution_unit_1000_4=0;uav1=0;",
        "execution_unit_1000_3=1;execution_unit_1000_4=1;uav1=1;",
        "execution_unit_1000_3=2;execution_unit_1000_4=2;uav1=2;",
        "execution_unit_1000_3=3;execution_unit_1000_4=3;uav1=3;",
        "execution_unit_1000_3=4;execution_unit_1000_4=4;uav1=4;",
        "execution_unit_1000_3=5;execution_unit_1000_4=5;uav1=5;",
        "execution_unit_1000_3=6;execution_unit_1000_4=6;uav1=6;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug380.mzn",
      "type": "test_solve",
      "solutions": [
        "a=[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];d=[3,3,3,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug45.mzn",
      "type": "test_solve",
      "solutions": [
        "i=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug52.mzn",
      "type": "test_solve",
      "solutions": [
        "x1d1=3;x1d9=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug532.mzn",
      "type": "test_solve",
      "solutions": [
        "y=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug534.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[,];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug536.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "x=[1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug552.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[2.0];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug565.mzn",
      "type": "test_solve",
      "solutions": [
        "x=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug570.mzn",
      "type": "test_output_model",
      "output_files": [
        "bug570.ozn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug620.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/regression/bug635.mzn",
      "type": "test_solve",
      "args": "-O2"
    },
    {
      "suite": "default",
      "path": "unit/regression/bug67.mzn",
      "type": "test_solve",
      "solutions": [
        "x=-2147483646;y=-2147483646;z=-2147483646;",
        "x=-500000000;y=-500000000;z=-500000000;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug68b.mzn",
      "type": "test_solve",
      "solutions": [
        "b=[1,1,1];",
        "b=[1,3,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug69_1.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/regression/bug69_2.mzn",
      "type": "test_solve",
      "solutions": [
        "y=2;",
        "y=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug69_3.mzn",
      "type": "test_solve",
      "solutions": [
        "y=1..3;",
        "y={2};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug69_4.mzn",
      "type": "test_solve",
      "solutions": [
        "y=[2,1,1];",
        "y=[10,10,10];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug70.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug71_1.mzn",
      "type": "test_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/bug71_2.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug82.mzn",
      "type": "test_solve",
      "solutions": [
        "pos=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];",
        "pos=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,3,1,1,4,1,1,5,1,1,4,1,1,3,1,1,2,1,1,1,1,1];",
        "pos=[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug85.mzn",
      "type": "test_solve",
      "solutions": [
        "mark=[0,1,3];objective=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug_08.mzn",
      "type": "test_solve",
      "solutions": [
        "objective=-2;x=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug_629.mzn",
      "type": "test_compile",
      "args": "-O1",
      "output_files": [
        "bug_629.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug_629.mzn",
      "type": "test_compile",
      "args": "-O2",
      "output_files": [
        "bug_629.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug_empty_enum_extension.mzn",
      "type": "test_solve",
      "solutions": [
        "as=[z(z2),z(z1),x(x2),x(x1)];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug_opt_polymorphic.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/bug_r7995.mzn",
      "type": "test_solve",
      "solutions": [
        "network__104=[true,true,true,true,false,false,false,true,false,true];objective=6;",
        "network__104=[false,false,true,false,true,true,true,true,true,false];objective=6;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/cardinality_atmost_partition.mzn",
      "type": "test_solve",
      "solutions": [
        "nvar=2;partitions=[{1,3},{4},{2,6}];variables=[2,3,7,1,6,0];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/card_flatten_lb.mzn",
      "type": "test_solve",
      "solutions": [
        "objective=0;x={};y=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/change_partition.mzn",
      "type": "test_solve",
      "solutions": [
        "nchange=2;partitions=[{1,3},{4},{2,6}];variables=[6,6,2,1,3,3,1,6,2,2,2];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/checker_mzn_check_var.mzn",
      "input_files": [
        "checker_mzn_check_var.mzc.mzn"
      ],
      "type": "test_solve",
      "solutions": [
        "_checker=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/checker_opt.mzn",
      "input_files": [
        "checker_opt.mzc.mzn"
      ],
      "type": "test_solve",
      "solutions": [
        "_checker=y = 20;;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/checker_params.mzn",
      "input_files": [
        "checker_params.mzc.mzn"
      ],
      "type": "test_solve",
      "solutions": [
        "_checker=yay!;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/checker_same_var.mzn",
      "input_files": [
        "checker_same_var.mzc.mzn"
      ],
      "type": "test_solve",
      "solutions": [
        "_checker=x = 10;;objective=5;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/checker_var_bug.mzn",
      "input_files": [
        "checker_var_bug.mzc.mzn"
      ],
      "type": "test_solve",
      "solutions": [
        "_checker=x = 1;\n;",
        "_checker=x = 2;\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/check_dom_float_array.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/coerce_set_to_array_1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/coerce_set_to_array_2.mzn",
      "type": "test_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/coercion_par.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,\u003C\u003E];y=[1.0,\u003C\u003E];z=[0.0,\u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/comprehension_where.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/comp_in_empty_set.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/constructor_of_set.mzn",
      "type": "test_solve",
      "solutions": [
        "y=C(2);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/cse_array_lit.mzn",
      "type": "test_compile",
      "output_files": [
        "cse_array_lit.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/cyclic_include.mzn",
      "type": "test_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/decision_tree_binary.mzn",
      "type": "test_solve",
      "solutions": [
        "node_used=[3,4,6,9,11,13,15,8,9,10,11,12,13,14,15];x=[6,2,6,2,4,6,8,1,2,3,4,5,6,7,8];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/dim_1_struct_merge.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/empty-array1d.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/enigma_1568.mzn",
      "type": "test_solve",
      "solutions": [
        "D=6;E=5;L=3;O=9;ODD=966;P=1;PUZZLE=102235;U=0;Z=2;num1=161;num2=635;num3=805;num4=483;x=[9,6,1,0,2,3,5];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/error_in_comprehension.mzn",
      "type": "test_minzinc_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/flatten_comp_in.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/flatten_comp_in2.mzn",
      "type": "test_solve",
      "solutions": [
        "bs=[false,true,false,true];",
        "bs=[true,false,true,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/flat_cv_call.mzn",
      "type": "test_solve",
      "solutions": [
        "objective=4;a=[0,0,2,2];rem=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/flat_cv_let.mzn",
      "type": "test_solve",
      "solutions": [
        "objective=4;a=[0,0,2,2];num=4;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/flat_set_lit.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/flipstrip_simple.mzn",
      "type": "test_solve",
      "solutions": [
        "f1=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/float_card.mzn",
      "type": "test_solve",
      "solutions": [
        "xc=3;zc=1;bc=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/float_ceil_floor.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "c=-1;f=-1;p=-1.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/float_div_crash.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/float_mod_crash.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/float_opt_crash.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/follow_id_absent_crash.mzn",
      "type": "test_solve",
      "solutions": [
        "y=\u003C\u003E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github537.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "b=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_638_reduced.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_639_part1.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_639_part2.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_644_a.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_644_b.mzn",
      "type": "test_solve",
      "solutions": [
        "a=[\u003C\u003E];b=[1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_644_c.mzn",
      "type": "test_solve",
      "solutions": [
        "arr=[1];x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_644_d.mzn",
      "type": "test_solve",
      "solutions": [
        "value=\u003C\u003E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_644_e.mzn",
      "type": "test_solve",
      "solutions": [
        "x=\u003C\u003E;y=\u003C\u003E;z=\u003C\u003E;p=3;q=1;r=4;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_646.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_648_par_array_decl.mzn",
      "type": "test_error",
      "error_regex": ".*declared domain of \u0060x\\[1\\]\u0027 is 1\\.\\.3, but assigned value is 0.*"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_648_par_decl.mzn",
      "type": "test_error",
      "error_regex": ".*declared domain of \u0060x\u0027 is 1\\.\\.3, but assigned value is 0.*"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_656.mzn",
      "type": "test_error",
      "error_regex": ".*cannot coerce set into 2-dimensional array.*"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_660a.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_660b.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_661_part1.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_661_part2.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;y=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_664.mzn",
      "type": "test_solve",
      "solutions": [
        "x={1};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_666.mzn",
      "type": "test_unsatisfiable",
      "args": "-G std"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_667.mzn",
      "type": "test_solve",
      "solutions": [
        "arr=[false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_668.mzn",
      "type": "test_solve",
      "solutions": [
        "x=\u003C\u003E;arr=[false];",
        "x=\u003C\u003E;arr=[true];",
        "x=1;arr=[false];",
        "x=1;arr=[true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_669.mzn",
      "type": "test_solve",
      "solutions": [
        "v=\u003C\u003E;",
        "v=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_670.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_671.mzn",
      "type": "test_solve",
      "solutions": [
        "arr=[true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_673.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[X, \u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_674.mzn",
      "type": "test_solve",
      "solutions": [
        "arr=[true,false];ns=[false,false,false,false,false,false,false,false,false,true,false];es=[false,false,false,false,false,false,false,false,false,false,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_675a.mzn",
      "type": "test_solve",
      "solutions": [
        "t=[false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_675b.mzn",
      "type": "test_solve",
      "args": "--keep-paths"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_680.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_681.mzn",
      "type": "test_solve",
      "solutions": [
        "arr=[true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_683.mzn",
      "type": "test_solve",
      "solutions": [
        "vars=[2,1];c=1;",
        "vars=[1,2];c=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_685.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[false,true];y=[true,false];",
        "x=[true,false];y=[false,true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_687.mzn",
      "type": "test_solve",
      "solutions": [
        "r=(x:0,);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_691.mzn",
      "type": "test_solve",
      "solutions": [
        "a=-1;c=-2;",
        "a=0;c=0;",
        "a=1;c=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_693_part1.mzn",
      "type": "test_solve",
      "solutions": [
        "c=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_693_part2.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[{},{2},{1},1..2];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_695.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=-3;y=-3;idx=0;val=-3;p=true;",
        "x=-3;y=-3;idx=1;val=-3;p=true;",
        "x=-3;y=-3;idx=2;val=-3;p=false;",
        "x=-3;y=-3;idx=2;val=-3;p=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_700.mzn",
      "type": "test_solve",
      "solutions": [
        "c={1};d=1..2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_700_bad_sol.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "c={1};d={};",
        "c={};d={1};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_716.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "BV9=false;BV8=true;BV7=false;BV4=true;",
        "BV9=true;BV8=true;BV7=false;BV4=true;",
        "BV9=false;BV8=false;BV7=true;BV4=true;",
        "BV9=true;BV8=false;BV7=true;BV4=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_719.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "foo=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_725.mzn",
      "type": "test_syntax_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_726.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_728.mzn",
      "type": "test_solve",
      "solutions": [
        "wanted={1};",
        "wanted={4};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_730.mzn",
      "type": "test_syntax_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_732.mzn",
      "type": "test_solve",
      "solutions": [
        "sts=[(x:0,),(x:1,)];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_747.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[\u003C\u003E,\u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_748.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=[true,false,false];y=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_748.mzn",
      "type": "test_all_solutions",
      "args": "-O0",
      "solutions": [
        "x=[true,false,false];y=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_749.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[true,false,false];y=false;c=2;",
        "x=[false,false,false];y=false;c=3;",
        "x=[true,true,false];y=false;c=1;",
        "x=[false,true,false];y=false;c=2;",
        "x=[true,false,true];y=false;c=1;",
        "x=[false,true,true];y=false;c=1;",
        "x=[false,false,true];y=false;c=2;",
        "x=[true,false,false];y=true;c=1;",
        "x=[false,true,false];y=true;c=1;",
        "x=[true,true,false];y=true;c=2;",
        "x=[false,false,true];y=true;c=1;",
        "x=[true,false,true];y=true;c=2;",
        "x=[false,true,true];y=true;c=2;",
        "x=[true,true,true];y=true;c=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_752.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_754.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "a=false;b=false;c=true;d=true;",
        "a=false;b=false;c=false;d=true;",
        "a=false;b=false;c=true;d=false;",
        "a=false;b=false;c=false;d=false;",
        "a=true;b=false;c=false;d=false;",
        "a=false;b=true;c=false;d=false;",
        "a=true;b=true;c=false;d=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_758.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_758.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "x=[true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_760.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;",
        "x=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_761.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_762.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[true];",
        "x=[false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_765.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_766.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "a=-2;b=-2;",
        "a=-2;b=2;",
        "a=2;b=-2;",
        "a=2;b=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_768a.mzn",
      "type": "test_compile",
      "output_files": [
        "github_768a.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_768b.mzn",
      "type": "test_compile",
      "output_files": [
        "github_768b.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_771.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_773.mzn",
      "type": "test_compile",
      "output_files": [
        "github_773.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_776.mzn",
      "input_files": [
        "github_776.dzn"
      ],
      "type": "test_solve",
      "solutions": [
        "x=A(1);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_778.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_779.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_783.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_785.mzn",
      "type": "test_unsatisfiable",
      "args": "-G std"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_792.mzn",
      "type": "test_solve",
      "args": "-G std",
      "solutions": [
        "y=true;",
        "y=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_793.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[{\u0022e\u0022:\u0022A\u0022}] {\u0022v\u0022: [{\u0022e\u0022:\u0022A\u0022}]};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_798.mzn",
      "type": "test_unsatisfiable",
      "args": "-G gecode_presolver"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_802.mzn",
      "type": "test_all_solutions",
      "args": "--keep-paths",
      "solutions": [
        "i=1;x=5;",
        "i=2;x=10;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_803.mzn",
      "type": "test_solve",
      "solutions": [
        "BV0=false;IV0=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_805.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_806.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_807.mzn",
      "type": "test_solve",
      "solutions": [
        "bar=[1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_809.mzn",
      "type": "test_solve",
      "solutions": [
        "bar=\u003C\u003E;biz={B};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_810a.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_810b.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_813.mzn",
      "type": "test_solve",
      "solutions": [
        "a=true;b=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_818.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[\u003C\u003E,{1}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_821.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[B,A];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_822.mzn",
      "type": "test_solve",
      "solutions": [
        "i64_min=-9223372036854775808;i64_max=9223372036854775807;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_823.mzn",
      "type": "test_solve",
      "solutions": [
        "dzn_str=(\u0027x \u002B \\\u0027: 1);json_str={\u0022x \u002B \\\\\u0022: 1};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_826.mzn",
      "type": "test_solve",
      "solutions": [
        "v=[false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_828.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_832.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_842.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_844.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[];y=[];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_845.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_848.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_856.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item={\n  \u0022x\u0022 : 1\n}\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_858.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[1][1][1]\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_865.mzn",
      "type": "test_solve",
      "args": "-G std",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/github_867.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_879.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/github_887.mzn",
      "type": "test_solve",
      "args": "-Werror"
    },
    {
      "suite": "default",
      "path": "unit/regression/hundred_doors_unoptimized.mzn",
      "type": "test_solve",
      "solutions": [
        "s={1,4,9,16,25,36,49,64,81,100};x=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,0,0,1,0,1,1,1,0,0,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1,0,1,1,1,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,1,1,1,0,0,1,0,0,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,0,0,1,1,1,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,1,0,1,0,0,1,1,1,1,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,0,1,0,0,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/if_then_else_absent.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[\u003C\u003E];b=true;",
        "x=[1];b=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/int2float_subst.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x_int=1;y_int=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/int_times.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/in_array_eval_error.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1];y=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/is_fixed.mzn",
      "type": "test_solve",
      "solutions": [
        "y=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/is_fixed_comp.mzn",
      "type": "test_solve",
      "solutions": [
        "len=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/lb_ub_dom_array_opt.mzn",
      "type": "test_solve",
      "solutions": [
        "l=1;u=2;d=1..2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/let_domain_from_generator.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/linear_bool_elem_bug.mzn",
      "type": "test_solve",
      "solutions": [
        "firstin=1;lastin=1;",
        "firstin=1;lastin=2;",
        "firstin=2;lastin=2;",
        "firstin=1;lastin=3;",
        "firstin=2;lastin=3;",
        "firstin=3;lastin=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/makepar_output.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=1..1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/move_where_clause.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/multi_goal_hierarchy_error.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/nested_clause.mzn",
      "type": "test_solve",
      "solutions": [
        "x=2;y=[false,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/non-set-array-ti-location.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/non_pos_pow.mzn",
      "type": "test_solve",
      "solutions": [
        "a=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/nosets_369.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/nosets_set_search.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1..3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/no_macro.mzn",
      "type": "test_solve",
      "solutions": [
        "x=4;r=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/opt_minmax.mzn",
      "type": "test_solve",
      "solutions": [
        "xmax=10;xmin=1;ymax=10.0;ymin=1.0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/opt_noncontiguous_domain.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/opt_removed_items.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,1,1];",
        "x=[1,1,4];",
        "x=[1,4,1];",
        "x=[1,4,4];",
        "x=[4,1,1];",
        "x=[4,1,4];",
        "x=[4,4,1];",
        "x=[4,4,4];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/output_2d_array_enum.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/output_fn_toplevel_var.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[1][true];",
        "_output_item=[2][false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/output_only_fn.mzn",
      "type": "test_output_model",
      "output_files": [
        "output_only_fn.ozn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/output_only_no_rhs.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/overloading.mzn",
      "type": "test_solve",
      "solutions": [
        "b1=false;b2=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/parser_location.mzn",
      "type": "test_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/parse_assignments.mzn",
      "input_files": [
        "parse_assignments.mzc.mzn"
      ],
      "type": "test_solve",
      "solutions": [
        "_checker=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/par_opt_dom.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/par_opt_equal.mzn",
      "type": "test_solve",
      "solutions": [
        "a=true;b=false;c=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/polymorphic_var_and_par.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/pow_undefined.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/regression/pred_param_r7550.mzn",
      "type": "test_solve",
      "solutions": [
        "end=53;objective=53;s=[0,0,0,4,7,7,6,8,12,8,6,4,14,19,12,12,13,18,8,11,14,18,19,4,16,10,20,9,14,6,24,26,21,16,9,21,24,28,31,22,24,11,25,16,30,26,38,25,25,30,33,36,39,34,33,47,25,44,50,38];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/round.mzn",
      "type": "test_solve",
      "solutions": [
        "y=4;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/seq_search_bug.mzn",
      "type": "test_solve",
      "solutions": [
        "evedays=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];flatroster=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];morndays=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];restdays=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];roster=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/set_inequality_par.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/slice_enum_indexset.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/string-test-arg.mzn",
      "type": "test_solve",
      "solutions": [
        "x=4;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/subsets_100.mzn",
      "type": "test_solve",
      "solutions": [
        "s=1..9;t={45};s_total=45;t_total=45;",
        "s={100};t={49,51};s_total=100;t_total=100;",
        "s={1,2,40,56,94};t={3,93,97};s_total=193;t_total=193;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_annotation_on_exists.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "b=true;c=true;d=false;",
        "b=true;c=false;d=true;",
        "b=true;c=true;d=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bool2int.mzn",
      "type": "test_solve",
      "solutions": [
        "b=true;x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug218.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,1,1];a=1;y=[1,1,1];b=1;",
        "x=[3,3,3];a=9;y=[3,3,3];b=9;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug359.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "p1=1;p2=1;p3=0;p4=0;",
        "p1=1;p2=1;p3=0;p4=1;",
        "p1=1;p2=1;p3=1;p4=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug45.mzn",
      "type": "test_solve",
      "solutions": [
        "i=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug53.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug54.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=7;y=1;z=7;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug54.mzn",
      "type": "test_solve",
      "solutions": [
        "x=7;y=1;z=7;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug55.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug57.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug65.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug66.mzn",
      "type": "test_solve",
      "solutions": [
        "s1={1};s2=1..2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug67.mzn",
      "type": "test_minzinc_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug70.mzn",
      "type": "test_solve",
      "solutions": [
        "killed=1;eFailureModes=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug71.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug72.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x={1};b=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug72.mzn",
      "type": "test_solve",
      "solutions": [
        "x={1};b=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_129.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_476.mzn",
      "type": "test_solve",
      "solutions": [
        "b=1;c=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_483.mzn",
      "type": "test_compile",
      "output_files": [
        "test_bug_483.fzn"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_493.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item={};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_494.mzn",
      "type": "test_solve",
      "solutions": [
        "x1=1;x2=[0];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_520.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item={a}\u0022b\u0022;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_521.mzn",
      "type": "test_solve",
      "solutions": [
        "x=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_527.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_529.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_588.mzn",
      "type": "test_solve",
      "solutions": [
        "x=2;y=1;z=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_637.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_851.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_859.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_860.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_864.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_891.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_array_sum_bounds.mzn",
      "type": "test_solve",
      "solutions": [
        "C=[0,0,0];y=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_ite_array_eq.mzn",
      "type": "test_solve",
      "solutions": [
        "b=true;x=[false,false,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_bug_pred_arg.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "b=false;x=1;",
        "b=true;x=1;",
        "b=false;x=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_equality_of_indirect_annotations.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_github_30.mzn",
      "type": "test_solve",
      "solutions": [
        "X=[3,0,0,0,3,0,0,0];",
        "X=[3,10,10,10,3,10,10,10];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_multioutput.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=one\ntwo;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_not_in.mzn",
      "type": "test_solve",
      "solutions": [
        "bla=2;",
        "bla=4;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_opt_bool_impl.mzn",
      "type": "test_solve",
      "solutions": [
        "b=true;",
        "b=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_opt_exists_forall.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_output_array_of_set.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_output_string_var.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=a;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_parout.mzn",
      "type": "test_solve",
      "solutions": [
        "x=10;y=-2147483646;",
        "x=10;y=11;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_parout.mzn",
      "type": "test_error"
    },
    {
      "suite": "default",
      "path": "unit/regression/test_seq_precede_chain_set.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[{1},{1}];",
        "x=[{1},{2}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/test_slice_1d_array.mzn",
      "type": "test_solve",
      "solutions": [
        "xs=[2,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/ti_error_location.mzn",
      "type": "test_error",
      "error_regex": "^(?!unknown file:0.0).*$"
    },
    {
      "suite": "default",
      "path": "unit/regression/ts_bug.mzn",
      "type": "test_solve",
      "solutions": [
        "cost=48;s=[4,1,2,3,6,5];dur=[{2,4},{1,2,4},{1,3,4},{1,3,4},{1,3},{1,3}];bef=[{},{2,4},{1,2,4},{1,2,3,4},{1,2,3,4},{1,2,3,4}];aft=[{1,2,3,4},{1,2,3,4},{1,3,4},{1,3,4},{1,3},{}];a=[{1,2},{2,3},{3,4},{2,4},{1,3},{1,4}];",
        "cost=48;s=[4,1,2,3,6,5];dur=[{2,4},{1,2,4},{1,3,4},{1,3,4},{1,3},{1,3}];bef=[{},{2,4},{1,2,4},1..4,1..4,1..4];aft=[1..4,1..4,{1,3,4},{1,3,4},{1,3},{}];a=[1..2,2..3,3..4,{2,4},{1,3},{1,4}];",
        "cost=48;s=[5,3,2,1,4,6];dur=[{1,3},{1,3,4},{1,2,4},{1,2,4},{1,4},{1,4}];bef=[{},{1,3},{1,3,4},1..4,1..4,1..4];aft=[1..4,1..4,{1,2,4},{1,2,4},{1,4},{}];a=[1..2,2..3,3..4,{2,4},{1,3},{1,4}];",
        "cost=48;s=[4,1,2,3,5,6];dur=[{2,4},{1,2,4},{1,3,4},{1,3,4},{1,4},{1,4}];bef=[{},{2,4},{1,2,4},1..4,1..4,1..4];aft=[1..4,1..4,{1,3,4},{1,3,4},{1,4},{}];a=[1..2,2..3,3..4,{2,4},{1,3},{1,4}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/type_specialise_array_return.mzn",
      "type": "test_solve",
      "solutions": [
        "y=5;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/var_bool_comp.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[2,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/var_opt_unconstrained.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=\u003C\u003E;",
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/var_self_assign_bug.mzn",
      "type": "test_solve",
      "solutions": [
        "partitions=[{1,2,3},{1,2,3},{1,2,3}];",
        "partitions=[1..3,1..3,1..3];",
        "partitions=[{},{},{}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/warm_start.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/regression/where-forall-bug.mzn",
      "type": "test_solve",
      "solutions": [
        "b=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/regression/xor_mixed_context.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,0,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/int_choice_1.mzn",
      "type": "test_solve",
      "solutions": [
        "q=[1,5,8,6,3,7,2,4];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/int_choice_2.mzn",
      "type": "test_solve",
      "solutions": [
        "q=[8,4,1,3,6,2,7,5];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/int_choice_6.mzn",
      "type": "test_solve",
      "solutions": [
        "q=[1,5,8,6,3,7,2,4];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/int_var_select_1.mzn",
      "type": "test_solve",
      "solutions": [
        "q=[1,5,8,6,3,7,2,4];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/int_var_select_2.mzn",
      "type": "test_solve",
      "solutions": [
        "q=[1,5,8,6,3,7,2,4];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/int_var_select_3.mzn",
      "type": "test_solve",
      "solutions": [
        "q=[1,7,4,6,8,2,5,3];",
        "q=[1,7,5,8,2,4,6,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/int_var_select_4.mzn",
      "type": "test_solve",
      "solutions": [
        "q=[1,7,4,6,8,2,5,3];",
        "q=[1,7,5,8,2,4,6,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/int_var_select_6.mzn",
      "type": "test_solve",
      "solutions": [
        "q=[1,5,8,6,3,7,2,4];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/test-ff1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=3;y=8;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/test-ff2.mzn",
      "type": "test_solve",
      "solutions": [
        "x=5;y=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/test-ff3.mzn",
      "type": "test_solve",
      "solutions": [
        "x=5;y=1;z=1;w=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/test-large1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=5;y=8;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/test-large1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=6;y=7;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/test-med1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=5;y=6;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/search/test-small1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=9;y=2;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/alias.mzn",
      "type": "test_solve",
      "solutions": [
        "x=3;y=[\u003C\u003E,1];tup=[2,true];tuptup=[2,true,2,true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/alias_call.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/alias_extern_dom.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/types/alias_set_of_array.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/array_of_array.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=[[A, B, C], [D, E, F], [G, H, I]]\n[[{\u0022e\u0022:\u0022A\u0022}, {\u0022e\u0022:\u0022B\u0022}, {\u0022e\u0022:\u0022C\u0022}], [{\u0022e\u0022:\u0022D\u0022}, {\u0022e\u0022:\u0022E\u0022}, {\u0022e\u0022:\u0022F\u0022}], [{\u0022e\u0022:\u0022G\u0022}, {\u0022e\u0022:\u0022H\u0022}, {\u0022e\u0022:\u0022I\u0022}]];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/array_of_array_alias.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,2,3,4,5,6,7,8,9];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/array_of_tuple_of_var_opt_set.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/array_of_var_opt_set.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/array_var_opt_set_comprehension.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/common_record.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/common_struct_bottom.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,];y=[(a:[(a:1,)],),(a:[],)];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/comprehension_of_absent_any_1.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/comprehension_type.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[A,A,A,A];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/cv_comprehension.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/enum_decl.mzn",
      "type": "test_solve",
      "solutions": [
        "__val__=;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/enum_refl.mzn",
      "type": "test_solve",
      "solutions": [
        "x={};ubx={a,b,c};y=a;lby=a;uby=c;domy={a,b,c};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/github_647.mzn",
      "type": "test_solve",
      "solutions": [
        "b=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/if_then_else_bottom_struct.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/if_then_else_nested_struct.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/types/if_then_else_struct.mzn",
      "type": "test_solve",
      "solutions": [
        "t=[\u003C\u003E,\u003C\u003E];b=false;u=[0,0];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/nested_type_inst_id.mzn",
      "type": "test_error",
      "error_regex": ".*type-inst variable \\$X used in both array and non-array position.*"
    },
    {
      "suite": "default",
      "path": "unit/types/nonbool_constraint.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/nonbool_constraint_let.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/non_contig_enum.mzn",
      "type": "test_solve",
      "solutions": [
        "x=S(6);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/opt_alias._int.mzn",
      "type": "test_solve",
      "solutions": [
        "x=\u003C\u003E;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/opt_alias._record.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/opt_alias._tuple.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/opt_array_access_tuple.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/overload_inst_tuple_return.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/types/par_struct_tiid.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/types/polymorphic_overloading.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/record_access_error.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/record_access_success.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=onetwo;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/record_array_access_error.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/record_binop_par.mzn",
      "type": "test_solve",
      "solutions": [
        "eq1=true;eq0=false;nq1=true;nq0=false;in1=true;in0=false;le1=true;le0=false;lq1=true;lq0=false;merge1=(x:1,y:2.0,z:true,);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/record_binop_var.mzn",
      "type": "test_solve",
      "solutions": [
        "eqA=(a:2,b:true,);nq=(a:3,b:true,);leA=(x:2,y:4,);lqA=(x:2,y:4,);arrin=(a:3,b:5.0,);merge1=(a:2,b:true,x:2,y:4,);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/record_comprehensions.mzn",
      "type": "test_solve",
      "solutions": [
        "simple=[(x:2,y:true,),(x:1,y:false,),(x:0,y:true,),(x:1,y:false,),(x:2,y:true,)];indexed=[(a:4,b:true,),(a:6,b:true,),(a:8,b:true,),(a:9,b:false,),(a:11,b:false,)];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/record_decl_error.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/record_in_checker.mzn",
      "input_files": [
        "record_in_checker.mzc.mzn"
      ],
      "type": "test_solve",
      "solutions": [
        "_checker={\u0022x\u0022: 1};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/record_ite_error.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/record_lit_dup.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/record_nested.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/types/record_output.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=full var: (a: 0, b: true, c: 1.5)\nvar array: [(a: 2, b: false), (a: 1, b: true)]\nnested: (inner: (left: 3, right: 4), outer: false)\nelement: 3\npartial: (x: 10, y: true)\ndata: (e: -3.2, f: false)\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/record_subtyping.mzn",
      "type": "test_solve",
      "solutions": [
        "single=(a:1,);double=(a:1.0,b:[1,2,3],);tupId=(x:1,y:0.0,);tupExpr=(a:-5.0,b:0,);arr1=[(a:5,b:1.0,),(a:1,b:-1.0,)];arr2=[(a:0,b:1,),(a:0,b:1,)];arrId=[(a:0.0,b:1.0,),(a:0.0,b:1.0,)];arrExpr=[(a:1.0,b:0.0,),(a:2.0,b:1.0,),(a:3.0,b:0.0,)];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/record_var_element.mzn",
      "type": "test_solve",
      "solutions": [
        "idx=iE;selected=(a:6,b:(c:3,d:3,),);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/record_var_ite.mzn",
      "type": "test_solve",
      "solutions": [
        "tups=[(x:12,y:false,),(x:10,y:true,),(x:11,y:false,)];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/specialise_large_struct.mzn",
      "type": "test_solve",
      "solutions": [
        "t=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];u=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_array_coercion.mzn",
      "type": "test_solve",
      "solutions": [
        "mzn_enum_X=[A,,B,,G,0,1..3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_bind_1.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "a=[1,1];x=[1,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_bind_2.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "a=[1];x=[1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_domain_1.mzn",
      "type": "test_solve",
      "solutions": [
        "a=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_domain_2.mzn",
      "type": "test_solve",
      "solutions": [
        "a=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_domain_3.mzn",
      "type": "test_solve",
      "solutions": [
        "a=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_domain_4.mzn",
      "type": "test_solve",
      "solutions": [
        "a=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_domain_5.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/types/struct_domain_6.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/types/struct_index_sets_1.mzn",
      "type": "test_error",
      "error_regex": ".* Declared index set of \u0060x\\.1\u0027 is \\[1\\.\\.1\\], but is assigned to array with index set \\[2\\.\\.2\\].*"
    },
    {
      "suite": "default",
      "path": "unit/types/struct_index_sets_2.mzn",
      "type": "test_error",
      "error_regex": ".* Declared index set of \u0060x\\.1\u0027 is \\[1\\.\\.1\\], but is assigned to array with index set \\[2\\.\\.2\\].*"
    },
    {
      "suite": "default",
      "path": "unit/types/struct_member_paths.mzn",
      "type": "test_solve",
      "args": "--keep-paths",
      "solutions": [
        "a=[(o:1,s:\u003C\u003E,)];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_opt_supertype.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/types/struct_par_function_version.mzn",
      "type": "test_solve",
      "solutions": [
        "p=true;a=false;b=true;c=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_return_ti_1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_return_ti_2.mzn",
      "type": "test_solve",
      "solutions": [
        "x=false;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_return_ti_3.mzn",
      "type": "test_error",
      "error_regex": ".*function result violates function type-inst.*"
    },
    {
      "suite": "default",
      "path": "unit/types/struct_return_ti_4.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/types/struct_specialise.mzn",
      "type": "test_solve",
      "solutions": [
        "foo_int=1;foo_str=test;foo_enum=B;bar_int=2;bar_str=pred;bar_enum=C;baz_tup=[3,func];baz_rec=(x:B,);"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/struct_specialise_return.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item={C}, [(A,)];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/test_any_enum_typeinstid.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=[true,false];",
        "x=[true,true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/test_enum_constr_set.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_access_error1.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_access_error2.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_access_success.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=onetwo;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_array_access_error.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_binop_par.mzn",
      "type": "test_solve",
      "solutions": [
        "eq1=true;eq0=false;nq1=true;nq0=false;in1=true;in0=false;le1=true;le0=false;lq1=true;lq0=false;con1=[1,2.0,true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_binop_var.mzn",
      "type": "test_solve",
      "solutions": [
        "eqA=[2,true];nq=[3,true];leA=[2,4];lqA=[2,4];arrin=[3,5.0];con1=[2,true,3,true];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_comprehensions.mzn",
      "type": "test_solve",
      "solutions": [
        "simple=[2,true,1,false,0,true,1,false,2,true];indexed=[4,true,6,true,8,true,9,false,11,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_if_then_else.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "b=true;p0=[3,4];",
        "b=false;p0=[3,5];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_int_set_of_int_specialisation.mzn",
      "type": "test_solve",
      "solutions": [
        "f=true;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_ite_error.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_ite_error_ann.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_ite_error_float_set.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_ite_error_string.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_lit.mzn",
      "type": "test_solve",
      "solutions": [
        "single=[1];double=[false,-1];triple=[1,false,200.0];square=[1,one,-2,two];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_mkpar.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;y=3;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_output.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=full var: (0, true, 1.5)\nvar array: [(2, false), (1, true)]\nnested: (false, (3, 4))\nelement: 3\npartial: (10, true)\ndata: (-3.2, false)\nenumtup: ((x: a a, y: c), c)\n;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_subtyping.mzn",
      "type": "test_solve",
      "solutions": [
        "single=[1];double=[1.0,1,2,3];tupId=[1,0.0];tupExpr=[-5.0,0];arr1=[5,1.0,1,-1.0];arr2=[1,0,1,0];arrId=[1.0,0.0,1.0,0.0];arrExpr=[1.0,0.0,2.0,1.0,3.0,0.0];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_var_element.mzn",
      "type": "test_solve",
      "solutions": [
        "idx=iE;selected=[6,3,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/tuple_var_ite.mzn",
      "type": "test_solve",
      "solutions": [
        "tups=[12,false,10,true,11,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/type_specialise_param_arrays.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/types/type_specialise_struct_domain.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[(a:[A],),(a:[B],),(a:[C],)];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/types/var_ann_a.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_ann_b.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_ann_comprehension.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_array_access_ann.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_array_access_float_set.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_array_access_string.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_array_access_tuple_ann.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_array_access_tuple_float_set.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_array_access_tuple_string.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_opt_set_if_then_else.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_set_bool.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_set_comprehension_tuple.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_set_float.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_set_float_comprehension.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_string_a.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_string_b.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_string_comprehension.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/types/var_where_comprehension_tuple.mzn",
      "type": "test_type_error"
    },
    {
      "suite": "default",
      "path": "unit/globals/alldifferent/globals_alldiff_set_nosets.mzn",
      "type": "test_solve",
      "solutions": [
        "alldiff_avsi2=[{},{1},1..2,1..3,{1,3},{2},2..3,{3}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/alldifferent/globals_all_different_int.mzn",
      "type": "test_solve",
      "solutions": [
        "alldiff_avi1=[1,2,3,4,5];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/alldifferent/globals_all_different_int_opt.mzn",
      "type": "test_solve",
      "solutions": [
        "alldiff_avi1=[1,2,3,4,5,\u003C\u003E];",
        "alldiff_avi1=[1,\u003C\u003E,3,4,5,\u003C\u003E];",
        "alldiff_avi1=[1,2,3,\u003C\u003E,5,\u003C\u003E];",
        "alldiff_avi1=[1,\u003C\u003E,3,\u003C\u003E,5,\u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/alldifferent/globals_all_different_set.mzn",
      "type": "test_solve",
      "solutions": [
        "alldiff_avsi2=[{},{3},{2},2..3,{1},{1,3},1..2,1..3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/alldifferent_except_0/test_alldiff_except0.mzn",
      "type": "test_solve",
      "solutions": [
        "_output_item=Ok;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/alldifferent_except_0/test_alldiff_except0b.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/all_disjoint/globals_all_disjoint.mzn",
      "type": "test_solve",
      "solutions": [
        "alldisj_avsi=[6..7,3..4,{5,8},1..2];",
        "alldisj_avsi=[{5,7},3..4,{6,8},1..2];",
        "alldisj_avsi=[5..6,3..4,7..8,1..2];",
        "alldisj_avsi=[6..7,{3,5},{4,8},1..2];",
        "alldisj_avsi=[{4,7},{3,5},{6,8},1..2];",
        "alldisj_avsi=[{4,6},{3,5},7..8,1..2];",
        "alldisj_avsi=[{5,7},{3,6},{4,8},1..2];",
        "alldisj_avsi=[{4,7},{3,6},{5,8},1..2];",
        "alldisj_avsi=[4..5,{3,6},7..8,1..2];",
        "alldisj_avsi=[5..6,{3,7},{4,8},1..2];",
        "alldisj_avsi=[{4,6},{3,7},{5,8},1..2];",
        "alldisj_avsi=[4..5,{3,7},{6,8},1..2];",
        "alldisj_avsi=[3..4,6..7,{5,8},1..2];",
        "alldisj_avsi=[3..4,{5,7},{6,8},1..2];",
        "alldisj_avsi=[3..4,5..6,7..8,1..2];",
        "alldisj_avsi=[{3,5},6..7,{4,8},1..2];",
        "alldisj_avsi=[{3,5},{4,7},{6,8},1..2];",
        "alldisj_avsi=[{3,5},{4,6},7..8,1..2];",
        "alldisj_avsi=[{3,6},{5,7},{4,8},1..2];",
        "alldisj_avsi=[{3,6},{4,7},{5,8},1..2];",
        "alldisj_avsi=[{3,6},4..5,7..8,1..2];",
        "alldisj_avsi=[{3,7},5..6,{4,8},1..2];",
        "alldisj_avsi=[{3,7},{4,6},{5,8},1..2];",
        "alldisj_avsi=[{3,7},4..5,{6,8},1..2];",
        "alldisj_avsi=[6..7,4..5,{3,8},1..2];",
        "alldisj_avsi=[{5,7},{4,6},{3,8},1..2];",
        "alldisj_avsi=[5..6,{4,7},{3,8},1..2];",
        "alldisj_avsi=[{4,7},5..6,{3,8},1..2];",
        "alldisj_avsi=[{4,6},{5,7},{3,8},1..2];",
        "alldisj_avsi=[4..5,6..7,{3,8},1..2];",
        "alldisj_avsi=[6..7,2..3,{5,8},{1,4}];",
        "alldisj_avsi=[{5,7},2..3,{6,8},{1,4}];",
        "alldisj_avsi=[5..6,2..3,7..8,{1,4}];",
        "alldisj_avsi=[6..7,2..3,{4,8},{1,5}];",
        "alldisj_avsi=[{4,7},2..3,{6,8},{1,5}];",
        "alldisj_avsi=[{4,6},2..3,7..8,{1,5}];",
        "alldisj_avsi=[{5,7},2..3,{4,8},{1,6}];",
        "alldisj_avsi=[{4,7},2..3,{5,8},{1,6}];",
        "alldisj_avsi=[4..5,2..3,7..8,{1,6}];",
        "alldisj_avsi=[5..6,2..3,{4,8},{1,7}];",
        "alldisj_avsi=[{4,6},2..3,{5,8},{1,7}];",
        "alldisj_avsi=[4..5,2..3,{6,8},{1,7}];",
        "alldisj_avsi=[3..4,{2,7},{5,8},{1,6}];",
        "alldisj_avsi=[3..4,{2,6},{5,8},{1,7}];",
        "alldisj_avsi=[3..4,{2,7},{6,8},{1,5}];",
        "alldisj_avsi=[3..4,{2,5},{6,8},{1,7}];",
        "alldisj_avsi=[3..4,{2,6},7..8,{1,5}];",
        "alldisj_avsi=[3..4,{2,5},7..8,{1,6}];",
        "alldisj_avsi=[{3,5},{2,7},{6,8},{1,4}];",
        "alldisj_avsi=[{3,5},{2,6},7..8,{1,4}];",
        "alldisj_avsi=[{3,5},{2,7},{4,8},{1,6}];",
        "alldisj_avsi=[{3,5},{2,4},7..8,{1,6}];",
        "alldisj_avsi=[{3,5},{2,6},{4,8},{1,7}];",
        "alldisj_avsi=[{3,5},{2,4},{6,8},{1,7}];",
        "alldisj_avsi=[{3,6},{2,7},{4,8},{1,5}];",
        "alldisj_avsi=[{3,6},{2,5},{4,8},{1,7}];",
        "alldisj_avsi=[{3,6},{2,7},{5,8},{1,4}];",
        "alldisj_avsi=[{3,6},{2,4},{5,8},{1,7}];",
        "alldisj_avsi=[{3,6},{2,5},7..8,{1,4}];",
        "alldisj_avsi=[{3,6},{2,4},7..8,{1,5}];",
        "alldisj_avsi=[{3,7},{2,4},{6,8},{1,5}];",
        "alldisj_avsi=[{3,7},{2,4},{5,8},{1,6}];",
        "alldisj_avsi=[{3,7},{2,5},{6,8},{1,4}];",
        "alldisj_avsi=[{3,7},{2,5},{4,8},{1,6}];",
        "alldisj_avsi=[{3,7},{2,6},{5,8},{1,4}];",
        "alldisj_avsi=[{3,7},{2,6},{4,8},{1,5}];",
        "alldisj_avsi=[6..7,{2,4},{3,8},{1,5}];",
        "alldisj_avsi=[{5,7},{2,4},{3,8},{1,6}];",
        "alldisj_avsi=[5..6,{2,4},{3,8},{1,7}];",
        "alldisj_avsi=[6..7,{2,4},{5,8},{1,3}];",
        "alldisj_avsi=[{5,7},{2,4},{6,8},{1,3}];",
        "alldisj_avsi=[5..6,{2,4},7..8,{1,3}];",
        "alldisj_avsi=[{4,6},{2,5},7..8,{1,3}];",
        "alldisj_avsi=[{4,6},{2,5},{3,8},{1,7}];",
        "alldisj_avsi=[{4,7},{2,5},{6,8},{1,3}];",
        "alldisj_avsi=[{4,7},{2,5},{3,8},{1,6}];",
        "alldisj_avsi=[6..7,{2,5},{4,8},{1,3}];",
        "alldisj_avsi=[6..7,{2,5},{3,8},{1,4}];",
        "alldisj_avsi=[{5,7},{2,6},{3,8},{1,4}];",
        "alldisj_avsi=[{4,7},{2,6},{3,8},{1,5}];",
        "alldisj_avsi=[4..5,{2,6},{3,8},{1,7}];",
        "alldisj_avsi=[{5,7},{2,6},{4,8},{1,3}];",
        "alldisj_avsi=[{4,7},{2,6},{5,8},{1,3}];",
        "alldisj_avsi=[4..5,{2,6},7..8,{1,3}];",
        "alldisj_avsi=[4..5,{2,7},{6,8},{1,3}];",
        "alldisj_avsi=[4..5,{2,7},{3,8},{1,6}];",
        "alldisj_avsi=[{4,6},{2,7},{5,8},{1,3}];",
        "alldisj_avsi=[{4,6},{2,7},{3,8},{1,5}];",
        "alldisj_avsi=[5..6,{2,7},{4,8},{1,3}];",
        "alldisj_avsi=[5..6,{2,7},{3,8},{1,4}];",
        "alldisj_avsi=[{2,4},6..7,{5,8},{1,3}];",
        "alldisj_avsi=[{2,4},{5,7},{6,8},{1,3}];",
        "alldisj_avsi=[{2,4},5..6,7..8,{1,3}];",
        "alldisj_avsi=[{2,5},6..7,{4,8},{1,3}];",
        "alldisj_avsi=[{2,5},{4,7},{6,8},{1,3}];",
        "alldisj_avsi=[{2,5},{4,6},7..8,{1,3}];",
        "alldisj_avsi=[{2,6},{5,7},{4,8},{1,3}];",
        "alldisj_avsi=[{2,6},{4,7},{5,8},{1,3}];",
        "alldisj_avsi=[{2,6},4..5,7..8,{1,3}];",
        "alldisj_avsi=[{2,7},5..6,{4,8},{1,3}];",
        "alldisj_avsi=[{2,7},{4,6},{5,8},{1,3}];",
        "alldisj_avsi=[{2,7},4..5,{6,8},{1,3}];",
        "alldisj_avsi=[4..5,6..7,{2,8},{1,3}];",
        "alldisj_avsi=[{4,6},{5,7},{2,8},{1,3}];",
        "alldisj_avsi=[{4,7},5..6,{2,8},{1,3}];",
        "alldisj_avsi=[5..6,{4,7},{2,8},{1,3}];",
        "alldisj_avsi=[{5,7},{4,6},{2,8},{1,3}];",
        "alldisj_avsi=[6..7,4..5,{2,8},{1,3}];",
        "alldisj_avsi=[6..7,{3,5},{2,8},{1,4}];",
        "alldisj_avsi=[{2,7},{3,5},{6,8},{1,4}];",
        "alldisj_avsi=[{2,6},{3,5},7..8,{1,4}];",
        "alldisj_avsi=[{5,7},{3,6},{2,8},{1,4}];",
        "alldisj_avsi=[{2,7},{3,6},{5,8},{1,4}];",
        "alldisj_avsi=[{2,5},{3,6},7..8,{1,4}];",
        "alldisj_avsi=[5..6,{3,7},{2,8},{1,4}];",
        "alldisj_avsi=[{2,6},{3,7},{5,8},{1,4}];",
        "alldisj_avsi=[{2,5},{3,7},{6,8},{1,4}];",
        "alldisj_avsi=[{3,7},5..6,{2,8},{1,4}];",
        "alldisj_avsi=[{2,7},5..6,{3,8},{1,4}];",
        "alldisj_avsi=[2..3,5..6,7..8,{1,4}];",
        "alldisj_avsi=[{3,6},{5,7},{2,8},{1,4}];",
        "alldisj_avsi=[{2,6},{5,7},{3,8},{1,4}];",
        "alldisj_avsi=[2..3,{5,7},{6,8},{1,4}];",
        "alldisj_avsi=[{3,5},6..7,{2,8},{1,4}];",
        "alldisj_avsi=[{2,5},6..7,{3,8},{1,4}];",
        "alldisj_avsi=[2..3,6..7,{5,8},{1,4}];",
        "alldisj_avsi=[6..7,3..4,{2,8},{1,5}];",
        "alldisj_avsi=[{4,7},{3,6},{2,8},{1,5}];",
        "alldisj_avsi=[{4,6},{3,7},{2,8},{1,5}];",
        "alldisj_avsi=[{3,7},{4,6},{2,8},{1,5}];",
        "alldisj_avsi=[{3,6},{4,7},{2,8},{1,5}];",
        "alldisj_avsi=[3..4,6..7,{2,8},{1,5}];",
        "alldisj_avsi=[{2,7},{4,6},{3,8},{1,5}];",
        "alldisj_avsi=[{2,6},{4,7},{3,8},{1,5}];",
        "alldisj_avsi=[{2,4},6..7,{3,8},{1,5}];",
        "alldisj_avsi=[{2,7},{3,6},{4,8},{1,5}];",
        "alldisj_avsi=[{2,6},{3,7},{4,8},{1,5}];",
        "alldisj_avsi=[2..3,6..7,{4,8},{1,5}];",
        "alldisj_avsi=[{2,7},3..4,{6,8},{1,5}];",
        "alldisj_avsi=[{2,4},{3,7},{6,8},{1,5}];",
        "alldisj_avsi=[2..3,{4,7},{6,8},{1,5}];",
        "alldisj_avsi=[{2,6},3..4,7..8,{1,5}];",
        "alldisj_avsi=[{2,4},{3,6},7..8,{1,5}];",
        "alldisj_avsi=[2..3,{4,6},7..8,{1,5}];",
        "alldisj_avsi=[2..3,{5,7},{4,8},{1,6}];",
        "alldisj_avsi=[2..3,{4,7},{5,8},{1,6}];",
        "alldisj_avsi=[2..3,4..5,7..8,{1,6}];",
        "alldisj_avsi=[{2,4},{5,7},{3,8},{1,6}];",
        "alldisj_avsi=[{2,4},{3,7},{5,8},{1,6}];",
        "alldisj_avsi=[{2,4},{3,5},7..8,{1,6}];",
        "alldisj_avsi=[{2,5},{4,7},{3,8},{1,6}];",
        "alldisj_avsi=[{2,5},{3,7},{4,8},{1,6}];",
        "alldisj_avsi=[{2,5},3..4,7..8,{1,6}];",
        "alldisj_avsi=[{2,7},4..5,{3,8},{1,6}];",
        "alldisj_avsi=[{2,7},{3,5},{4,8},{1,6}];",
        "alldisj_avsi=[{2,7},3..4,{5,8},{1,6}];",
        "alldisj_avsi=[3..4,{5,7},{2,8},{1,6}];",
        "alldisj_avsi=[{3,5},{4,7},{2,8},{1,6}];",
        "alldisj_avsi=[{3,7},4..5,{2,8},{1,6}];",
        "alldisj_avsi=[4..5,{3,7},{2,8},{1,6}];",
        "alldisj_avsi=[{4,7},{3,5},{2,8},{1,6}];",
        "alldisj_avsi=[{5,7},3..4,{2,8},{1,6}];",
        "alldisj_avsi=[5..6,3..4,{2,8},{1,7}];",
        "alldisj_avsi=[{2,6},3..4,{5,8},{1,7}];",
        "alldisj_avsi=[{2,5},3..4,{6,8},{1,7}];",
        "alldisj_avsi=[{4,6},{3,5},{2,8},{1,7}];",
        "alldisj_avsi=[{2,6},{3,5},{4,8},{1,7}];",
        "alldisj_avsi=[{2,4},{3,5},{6,8},{1,7}];",
        "alldisj_avsi=[4..5,{3,6},{2,8},{1,7}];",
        "alldisj_avsi=[{2,5},{3,6},{4,8},{1,7}];",
        "alldisj_avsi=[{2,4},{3,6},{5,8},{1,7}];",
        "alldisj_avsi=[{3,6},4..5,{2,8},{1,7}];",
        "alldisj_avsi=[{2,6},4..5,{3,8},{1,7}];",
        "alldisj_avsi=[2..3,4..5,{6,8},{1,7}];",
        "alldisj_avsi=[{3,5},{4,6},{2,8},{1,7}];",
        "alldisj_avsi=[{2,5},{4,6},{3,8},{1,7}];",
        "alldisj_avsi=[2..3,{4,6},{5,8},{1,7}];",
        "alldisj_avsi=[3..4,5..6,{2,8},{1,7}];",
        "alldisj_avsi=[{2,4},5..6,{3,8},{1,7}];",
        "alldisj_avsi=[2..3,5..6,{4,8},{1,7}];",
        "alldisj_avsi=[2..3,6..7,{1,8},4..5];",
        "alldisj_avsi=[2..3,{5,7},{1,8},{4,6}];",
        "alldisj_avsi=[2..3,5..6,{1,8},{4,7}];",
        "alldisj_avsi=[2..3,{4,7},{1,8},5..6];",
        "alldisj_avsi=[2..3,{4,6},{1,8},{5,7}];",
        "alldisj_avsi=[2..3,4..5,{1,8},6..7];",
        "alldisj_avsi=[{2,4},6..7,{1,8},{3,5}];",
        "alldisj_avsi=[{2,4},{5,7},{1,8},{3,6}];",
        "alldisj_avsi=[{2,4},5..6,{1,8},{3,7}];",
        "alldisj_avsi=[{2,4},{3,7},{1,8},5..6];",
        "alldisj_avsi=[{2,4},{3,6},{1,8},{5,7}];",
        "alldisj_avsi=[{2,4},{3,5},{1,8},6..7];",
        "alldisj_avsi=[{2,5},6..7,{1,8},3..4];",
        "alldisj_avsi=[{2,5},{4,7},{1,8},{3,6}];",
        "alldisj_avsi=[{2,5},{4,6},{1,8},{3,7}];",
        "alldisj_avsi=[{2,5},{3,7},{1,8},{4,6}];",
        "alldisj_avsi=[{2,5},{3,6},{1,8},{4,7}];",
        "alldisj_avsi=[{2,5},3..4,{1,8},6..7];",
        "alldisj_avsi=[{2,6},{5,7},{1,8},3..4];",
        "alldisj_avsi=[{2,6},{4,7},{1,8},{3,5}];",
        "alldisj_avsi=[{2,6},4..5,{1,8},{3,7}];",
        "alldisj_avsi=[{2,6},{3,7},{1,8},4..5];",
        "alldisj_avsi=[{2,6},{3,5},{1,8},{4,7}];",
        "alldisj_avsi=[{2,6},3..4,{1,8},{5,7}];",
        "alldisj_avsi=[{2,7},5..6,{1,8},3..4];",
        "alldisj_avsi=[{2,7},{4,6},{1,8},{3,5}];",
        "alldisj_avsi=[{2,7},4..5,{1,8},{3,6}];",
        "alldisj_avsi=[{2,7},{3,6},{1,8},4..5];",
        "alldisj_avsi=[{2,7},{3,5},{1,8},{4,6}];",
        "alldisj_avsi=[{2,7},3..4,{1,8},5..6];",
        "alldisj_avsi=[3..4,6..7,{1,8},{2,5}];",
        "alldisj_avsi=[3..4,{5,7},{1,8},{2,6}];",
        "alldisj_avsi=[3..4,5..6,{1,8},{2,7}];",
        "alldisj_avsi=[3..4,{2,7},{1,8},5..6];",
        "alldisj_avsi=[3..4,{2,6},{1,8},{5,7}];",
        "alldisj_avsi=[3..4,{2,5},{1,8},6..7];",
        "alldisj_avsi=[{3,5},6..7,{1,8},{2,4}];",
        "alldisj_avsi=[{3,5},{4,7},{1,8},{2,6}];",
        "alldisj_avsi=[{3,5},{4,6},{1,8},{2,7}];",
        "alldisj_avsi=[{3,5},{2,7},{1,8},{4,6}];",
        "alldisj_avsi=[{3,5},{2,6},{1,8},{4,7}];",
        "alldisj_avsi=[{3,5},{2,4},{1,8},6..7];",
        "alldisj_avsi=[{3,6},{5,7},{1,8},{2,4}];",
        "alldisj_avsi=[{3,6},{4,7},{1,8},{2,5}];",
        "alldisj_avsi=[{3,6},4..5,{1,8},{2,7}];",
        "alldisj_avsi=[{3,6},{2,7},{1,8},4..5];",
        "alldisj_avsi=[{3,6},{2,5},{1,8},{4,7}];",
        "alldisj_avsi=[{3,6},{2,4},{1,8},{5,7}];",
        "alldisj_avsi=[{3,7},5..6,{1,8},{2,4}];",
        "alldisj_avsi=[{3,7},{4,6},{1,8},{2,5}];",
        "alldisj_avsi=[{3,7},4..5,{1,8},{2,6}];",
        "alldisj_avsi=[{3,7},{2,6},{1,8},4..5];",
        "alldisj_avsi=[{3,7},{2,5},{1,8},{4,6}];",
        "alldisj_avsi=[{3,7},{2,4},{1,8},5..6];",
        "alldisj_avsi=[4..5,6..7,{1,8},2..3];",
        "alldisj_avsi=[4..5,{3,7},{1,8},{2,6}];",
        "alldisj_avsi=[4..5,{3,6},{1,8},{2,7}];",
        "alldisj_avsi=[4..5,{2,7},{1,8},{3,6}];",
        "alldisj_avsi=[4..5,{2,6},{1,8},{3,7}];",
        "alldisj_avsi=[4..5,2..3,{1,8},6..7];",
        "alldisj_avsi=[{4,6},{5,7},{1,8},2..3];",
        "alldisj_avsi=[{4,6},{3,7},{1,8},{2,5}];",
        "alldisj_avsi=[{4,6},{3,5},{1,8},{2,7}];",
        "alldisj_avsi=[{4,6},{2,7},{1,8},{3,5}];",
        "alldisj_avsi=[{4,6},{2,5},{1,8},{3,7}];",
        "alldisj_avsi=[{4,6},2..3,{1,8},{5,7}];",
        "alldisj_avsi=[{4,7},5..6,{1,8},2..3];",
        "alldisj_avsi=[{4,7},{3,6},{1,8},{2,5}];",
        "alldisj_avsi=[{4,7},{3,5},{1,8},{2,6}];",
        "alldisj_avsi=[{4,7},{2,6},{1,8},{3,5}];",
        "alldisj_avsi=[{4,7},{2,5},{1,8},{3,6}];",
        "alldisj_avsi=[{4,7},2..3,{1,8},5..6];",
        "alldisj_avsi=[5..6,{4,7},{1,8},2..3];",
        "alldisj_avsi=[5..6,{3,7},{1,8},{2,4}];",
        "alldisj_avsi=[5..6,3..4,{1,8},{2,7}];",
        "alldisj_avsi=[5..6,{2,7},{1,8},3..4];",
        "alldisj_avsi=[5..6,{2,4},{1,8},{3,7}];",
        "alldisj_avsi=[5..6,2..3,{1,8},{4,7}];",
        "alldisj_avsi=[{5,7},{4,6},{1,8},2..3];",
        "alldisj_avsi=[{5,7},{3,6},{1,8},{2,4}];",
        "alldisj_avsi=[{5,7},3..4,{1,8},{2,6}];",
        "alldisj_avsi=[{5,7},{2,6},{1,8},3..4];",
        "alldisj_avsi=[{5,7},{2,4},{1,8},{3,6}];",
        "alldisj_avsi=[{5,7},2..3,{1,8},{4,6}];",
        "alldisj_avsi=[6..7,4..5,{1,8},2..3];",
        "alldisj_avsi=[6..7,{3,5},{1,8},{2,4}];",
        "alldisj_avsi=[6..7,3..4,{1,8},{2,5}];",
        "alldisj_avsi=[6..7,{2,5},{1,8},3..4];",
        "alldisj_avsi=[6..7,{2,4},{1,8},{3,5}];",
        "alldisj_avsi=[6..7,2..3,{1,8},4..5];",
        "alldisj_avsi=[6..7,{1,4},{5,8},2..3];",
        "alldisj_avsi=[{5,7},{1,4},{6,8},2..3];",
        "alldisj_avsi=[5..6,{1,4},7..8,2..3];",
        "alldisj_avsi=[6..7,{1,5},{4,8},2..3];",
        "alldisj_avsi=[{4,7},{1,5},{6,8},2..3];",
        "alldisj_avsi=[{4,6},{1,5},7..8,2..3];",
        "alldisj_avsi=[{5,7},{1,6},{4,8},2..3];",
        "alldisj_avsi=[{4,7},{1,6},{5,8},2..3];",
        "alldisj_avsi=[4..5,{1,6},7..8,2..3];",
        "alldisj_avsi=[5..6,{1,7},{4,8},2..3];",
        "alldisj_avsi=[{4,6},{1,7},{5,8},2..3];",
        "alldisj_avsi=[4..5,{1,7},{6,8},2..3];",
        "alldisj_avsi=[{1,7},4..5,{6,8},2..3];",
        "alldisj_avsi=[{1,6},4..5,7..8,2..3];",
        "alldisj_avsi=[{1,7},{4,6},{5,8},2..3];",
        "alldisj_avsi=[{1,5},{4,6},7..8,2..3];",
        "alldisj_avsi=[{1,6},{4,7},{5,8},2..3];",
        "alldisj_avsi=[{1,5},{4,7},{6,8},2..3];",
        "alldisj_avsi=[{1,7},5..6,{4,8},2..3];",
        "alldisj_avsi=[{1,4},5..6,7..8,2..3];",
        "alldisj_avsi=[{1,6},{5,7},{4,8},2..3];",
        "alldisj_avsi=[{1,4},{5,7},{6,8},2..3];",
        "alldisj_avsi=[{1,5},6..7,{4,8},2..3];",
        "alldisj_avsi=[{1,4},6..7,{5,8},2..3];",
        "alldisj_avsi=[{1,3},6..7,{5,8},{2,4}];",
        "alldisj_avsi=[{1,3},{5,7},{6,8},{2,4}];",
        "alldisj_avsi=[{1,3},5..6,7..8,{2,4}];",
        "alldisj_avsi=[{1,5},6..7,{3,8},{2,4}];",
        "alldisj_avsi=[{1,5},{3,7},{6,8},{2,4}];",
        "alldisj_avsi=[{1,5},{3,6},7..8,{2,4}];",
        "alldisj_avsi=[{1,6},{5,7},{3,8},{2,4}];",
        "alldisj_avsi=[{1,6},{3,7},{5,8},{2,4}];",
        "alldisj_avsi=[{1,6},{3,5},7..8,{2,4}];",
        "alldisj_avsi=[{1,7},5..6,{3,8},{2,4}];",
        "alldisj_avsi=[{1,7},{3,6},{5,8},{2,4}];",
        "alldisj_avsi=[{1,7},{3,5},{6,8},{2,4}];",
        "alldisj_avsi=[{3,5},{1,7},{6,8},{2,4}];",
        "alldisj_avsi=[{3,5},{1,6},7..8,{2,4}];",
        "alldisj_avsi=[{3,6},{1,7},{5,8},{2,4}];",
        "alldisj_avsi=[{3,6},{1,5},7..8,{2,4}];",
        "alldisj_avsi=[{3,7},{1,6},{5,8},{2,4}];",
        "alldisj_avsi=[{3,7},{1,5},{6,8},{2,4}];",
        "alldisj_avsi=[5..6,{1,7},{3,8},{2,4}];",
        "alldisj_avsi=[5..6,{1,3},7..8,{2,4}];",
        "alldisj_avsi=[{5,7},{1,6},{3,8},{2,4}];",
        "alldisj_avsi=[{5,7},{1,3},{6,8},{2,4}];",
        "alldisj_avsi=[6..7,{1,5},{3,8},{2,4}];",
        "alldisj_avsi=[6..7,{1,3},{5,8},{2,4}];",
        "alldisj_avsi=[6..7,{1,3},{4,8},{2,5}];",
        "alldisj_avsi=[{4,7},{1,3},{6,8},{2,5}];",
        "alldisj_avsi=[{4,6},{1,3},7..8,{2,5}];",
        "alldisj_avsi=[6..7,{1,4},{3,8},{2,5}];",
        "alldisj_avsi=[{3,7},{1,4},{6,8},{2,5}];",
        "alldisj_avsi=[{3,6},{1,4},7..8,{2,5}];",
        "alldisj_avsi=[{4,7},{1,6},{3,8},{2,5}];",
        "alldisj_avsi=[{3,7},{1,6},{4,8},{2,5}];",
        "alldisj_avsi=[3..4,{1,6},7..8,{2,5}];",
        "alldisj_avsi=[{4,6},{1,7},{3,8},{2,5}];",
        "alldisj_avsi=[{3,6},{1,7},{4,8},{2,5}];",
        "alldisj_avsi=[3..4,{1,7},{6,8},{2,5}];",
        "alldisj_avsi=[{1,7},3..4,{6,8},{2,5}];",
        "alldisj_avsi=[{1,6},3..4,7..8,{2,5}];",
        "alldisj_avsi=[{1,7},{3,6},{4,8},{2,5}];",
        "alldisj_avsi=[{1,4},{3,6},7..8,{2,5}];",
        "alldisj_avsi=[{1,6},{3,7},{4,8},{2,5}];",
        "alldisj_avsi=[{1,4},{3,7},{6,8},{2,5}];",
        "alldisj_avsi=[{1,7},{4,6},{3,8},{2,5}];",
        "alldisj_avsi=[{1,3},{4,6},7..8,{2,5}];",
        "alldisj_avsi=[{1,6},{4,7},{3,8},{2,5}];",
        "alldisj_avsi=[{1,3},{4,7},{6,8},{2,5}];",
        "alldisj_avsi=[{1,4},6..7,{3,8},{2,5}];",
        "alldisj_avsi=[{1,3},6..7,{4,8},{2,5}];",
        "alldisj_avsi=[{1,3},{5,7},{4,8},{2,6}];",
        "alldisj_avsi=[{1,3},{4,7},{5,8},{2,6}];",
        "alldisj_avsi=[{1,3},4..5,7..8,{2,6}];",
        "alldisj_avsi=[{1,4},{5,7},{3,8},{2,6}];",
        "alldisj_avsi=[{1,4},{3,7},{5,8},{2,6}];",
        "alldisj_avsi=[{1,4},{3,5},7..8,{2,6}];",
        "alldisj_avsi=[{1,5},{4,7},{3,8},{2,6}];",
        "alldisj_avsi=[{1,5},{3,7},{4,8},{2,6}];",
        "alldisj_avsi=[{1,5},3..4,7..8,{2,6}];",
        "alldisj_avsi=[{1,7},4..5,{3,8},{2,6}];",
        "alldisj_avsi=[{1,7},{3,5},{4,8},{2,6}];",
        "alldisj_avsi=[{1,7},3..4,{5,8},{2,6}];",
        "alldisj_avsi=[3..4,{1,7},{5,8},{2,6}];",
        "alldisj_avsi=[3..4,{1,5},7..8,{2,6}];",
        "alldisj_avsi=[{3,5},{1,7},{4,8},{2,6}];",
        "alldisj_avsi=[{3,5},{1,4},7..8,{2,6}];",
        "alldisj_avsi=[{3,7},{1,5},{4,8},{2,6}];",
        "alldisj_avsi=[{3,7},{1,4},{5,8},{2,6}];",
        "alldisj_avsi=[4..5,{1,7},{3,8},{2,6}];",
        "alldisj_avsi=[4..5,{1,3},7..8,{2,6}];",
        "alldisj_avsi=[{4,7},{1,5},{3,8},{2,6}];",
        "alldisj_avsi=[{4,7},{1,3},{5,8},{2,6}];",
        "alldisj_avsi=[{5,7},{1,4},{3,8},{2,6}];",
        "alldisj_avsi=[{5,7},{1,3},{4,8},{2,6}];",
        "alldisj_avsi=[5..6,{1,4},{3,8},{2,7}];",
        "alldisj_avsi=[{4,6},{1,5},{3,8},{2,7}];",
        "alldisj_avsi=[4..5,{1,6},{3,8},{2,7}];",
        "alldisj_avsi=[{1,6},4..5,{3,8},{2,7}];",
        "alldisj_avsi=[{1,5},{4,6},{3,8},{2,7}];",
        "alldisj_avsi=[{1,4},5..6,{3,8},{2,7}];",
        "alldisj_avsi=[5..6,{1,3},{4,8},{2,7}];",
        "alldisj_avsi=[{3,6},{1,5},{4,8},{2,7}];",
        "alldisj_avsi=[{3,5},{1,6},{4,8},{2,7}];",
        "alldisj_avsi=[{1,6},{3,5},{4,8},{2,7}];",
        "alldisj_avsi=[{1,5},{3,6},{4,8},{2,7}];",
        "alldisj_avsi=[{1,3},5..6,{4,8},{2,7}];",
        "alldisj_avsi=[{4,6},{1,3},{5,8},{2,7}];",
        "alldisj_avsi=[{3,6},{1,4},{5,8},{2,7}];",
        "alldisj_avsi=[3..4,{1,6},{5,8},{2,7}];",
        "alldisj_avsi=[{1,6},3..4,{5,8},{2,7}];",
        "alldisj_avsi=[{1,4},{3,6},{5,8},{2,7}];",
        "alldisj_avsi=[{1,3},{4,6},{5,8},{2,7}];",
        "alldisj_avsi=[4..5,{1,3},{6,8},{2,7}];",
        "alldisj_avsi=[{3,5},{1,4},{6,8},{2,7}];",
        "alldisj_avsi=[3..4,{1,5},{6,8},{2,7}];",
        "alldisj_avsi=[{1,5},3..4,{6,8},{2,7}];",
        "alldisj_avsi=[{1,4},{3,5},{6,8},{2,7}];",
        "alldisj_avsi=[{1,3},4..5,{6,8},{2,7}];",
        "alldisj_avsi=[3..4,1..2,7..8,5..6];",
        "alldisj_avsi=[3..4,1..2,{6,8},{5,7}];",
        "alldisj_avsi=[3..4,1..2,{5,8},6..7];",
        "alldisj_avsi=[{3,5},1..2,7..8,{4,6}];",
        "alldisj_avsi=[{3,5},1..2,{6,8},{4,7}];",
        "alldisj_avsi=[{3,5},1..2,{4,8},6..7];",
        "alldisj_avsi=[{3,6},1..2,7..8,4..5];",
        "alldisj_avsi=[{3,6},1..2,{5,8},{4,7}];",
        "alldisj_avsi=[{3,6},1..2,{4,8},{5,7}];",
        "alldisj_avsi=[{3,7},1..2,{6,8},4..5];",
        "alldisj_avsi=[{3,7},1..2,{5,8},{4,6}];",
        "alldisj_avsi=[{3,7},1..2,{4,8},5..6];",
        "alldisj_avsi=[4..5,1..2,7..8,{3,6}];",
        "alldisj_avsi=[4..5,1..2,{6,8},{3,7}];",
        "alldisj_avsi=[4..5,1..2,{3,8},6..7];",
        "alldisj_avsi=[{4,6},1..2,7..8,{3,5}];",
        "alldisj_avsi=[{4,6},1..2,{5,8},{3,7}];",
        "alldisj_avsi=[{4,6},1..2,{3,8},{5,7}];",
        "alldisj_avsi=[{4,7},1..2,{6,8},{3,5}];",
        "alldisj_avsi=[{4,7},1..2,{5,8},{3,6}];",
        "alldisj_avsi=[{4,7},1..2,{3,8},5..6];",
        "alldisj_avsi=[5..6,1..2,7..8,3..4];",
        "alldisj_avsi=[5..6,1..2,{4,8},{3,7}];",
        "alldisj_avsi=[5..6,1..2,{3,8},{4,7}];",
        "alldisj_avsi=[{5,7},1..2,{6,8},3..4];",
        "alldisj_avsi=[{5,7},1..2,{4,8},{3,6}];",
        "alldisj_avsi=[{5,7},1..2,{3,8},{4,6}];",
        "alldisj_avsi=[6..7,1..2,{5,8},3..4];",
        "alldisj_avsi=[6..7,1..2,{4,8},{3,5}];",
        "alldisj_avsi=[6..7,1..2,{3,8},4..5];",
        "alldisj_avsi=[6..7,{1,3},{2,8},4..5];",
        "alldisj_avsi=[{2,7},{1,3},{6,8},4..5];",
        "alldisj_avsi=[{2,6},{1,3},7..8,4..5];",
        "alldisj_avsi=[{5,7},{1,3},{2,8},{4,6}];",
        "alldisj_avsi=[{2,7},{1,3},{5,8},{4,6}];",
        "alldisj_avsi=[{2,5},{1,3},7..8,{4,6}];",
        "alldisj_avsi=[5..6,{1,3},{2,8},{4,7}];",
        "alldisj_avsi=[{2,6},{1,3},{5,8},{4,7}];",
        "alldisj_avsi=[{2,5},{1,3},{6,8},{4,7}];",
        "alldisj_avsi=[{4,7},{1,3},{2,8},5..6];",
        "alldisj_avsi=[{2,7},{1,3},{4,8},5..6];",
        "alldisj_avsi=[{2,4},{1,3},7..8,5..6];",
        "alldisj_avsi=[{4,6},{1,3},{2,8},{5,7}];",
        "alldisj_avsi=[{2,6},{1,3},{4,8},{5,7}];",
        "alldisj_avsi=[{2,4},{1,3},{6,8},{5,7}];",
        "alldisj_avsi=[4..5,{1,3},{2,8},6..7];",
        "alldisj_avsi=[{2,5},{1,3},{4,8},6..7];",
        "alldisj_avsi=[{2,4},{1,3},{5,8},6..7];",
        "alldisj_avsi=[2..3,{1,4},7..8,5..6];",
        "alldisj_avsi=[2..3,{1,4},{6,8},{5,7}];",
        "alldisj_avsi=[2..3,{1,4},{5,8},6..7];",
        "alldisj_avsi=[{2,5},{1,4},7..8,{3,6}];",
        "alldisj_avsi=[{2,5},{1,4},{6,8},{3,7}];",
        "alldisj_avsi=[{2,5},{1,4},{3,8},6..7];",
        "alldisj_avsi=[{2,6},{1,4},7..8,{3,5}];",
        "alldisj_avsi=[{2,6},{1,4},{5,8},{3,7}];",
        "alldisj_avsi=[{2,6},{1,4},{3,8},{5,7}];",
        "alldisj_avsi=[{2,7},{1,4},{6,8},{3,5}];",
        "alldisj_avsi=[{2,7},{1,4},{5,8},{3,6}];",
        "alldisj_avsi=[{2,7},{1,4},{3,8},5..6];",
        "alldisj_avsi=[{3,5},{1,4},{2,8},6..7];",
        "alldisj_avsi=[{3,6},{1,4},{2,8},{5,7}];",
        "alldisj_avsi=[{3,7},{1,4},{2,8},5..6];",
        "alldisj_avsi=[5..6,{1,4},{2,8},{3,7}];",
        "alldisj_avsi=[{5,7},{1,4},{2,8},{3,6}];",
        "alldisj_avsi=[6..7,{1,4},{2,8},{3,5}];",
        "alldisj_avsi=[2..3,{1,5},7..8,{4,6}];",
        "alldisj_avsi=[2..3,{1,5},{6,8},{4,7}];",
        "alldisj_avsi=[2..3,{1,5},{4,8},6..7];",
        "alldisj_avsi=[{2,4},{1,5},7..8,{3,6}];",
        "alldisj_avsi=[{2,4},{1,5},{6,8},{3,7}];",
        "alldisj_avsi=[{2,4},{1,5},{3,8},6..7];",
        "alldisj_avsi=[{2,6},{1,5},7..8,3..4];",
        "alldisj_avsi=[{2,6},{1,5},{4,8},{3,7}];",
        "alldisj_avsi=[{2,6},{1,5},{3,8},{4,7}];",
        "alldisj_avsi=[{2,7},{1,5},{6,8},3..4];",
        "alldisj_avsi=[{2,7},{1,5},{4,8},{3,6}];",
        "alldisj_avsi=[{2,7},{1,5},{3,8},{4,6}];",
        "alldisj_avsi=[3..4,{1,5},{2,8},6..7];",
        "alldisj_avsi=[{3,6},{1,5},{2,8},{4,7}];",
        "alldisj_avsi=[{3,7},{1,5},{2,8},{4,6}];",
        "alldisj_avsi=[{4,6},{1,5},{2,8},{3,7}];",
        "alldisj_avsi=[{4,7},{1,5},{2,8},{3,6}];",
        "alldisj_avsi=[6..7,{1,5},{2,8},3..4];",
        "alldisj_avsi=[2..3,{1,6},7..8,4..5];",
        "alldisj_avsi=[2..3,{1,6},{5,8},{4,7}];",
        "alldisj_avsi=[2..3,{1,6},{4,8},{5,7}];",
        "alldisj_avsi=[{2,4},{1,6},7..8,{3,5}];",
        "alldisj_avsi=[{2,4},{1,6},{5,8},{3,7}];",
        "alldisj_avsi=[{2,4},{1,6},{3,8},{5,7}];",
        "alldisj_avsi=[{2,5},{1,6},7..8,3..4];",
        "alldisj_avsi=[{2,5},{1,6},{4,8},{3,7}];",
        "alldisj_avsi=[{2,5},{1,6},{3,8},{4,7}];",
        "alldisj_avsi=[{2,7},{1,6},{5,8},3..4];",
        "alldisj_avsi=[{2,7},{1,6},{4,8},{3,5}];",
        "alldisj_avsi=[{2,7},{1,6},{3,8},4..5];",
        "alldisj_avsi=[3..4,{1,6},{2,8},{5,7}];",
        "alldisj_avsi=[{3,5},{1,6},{2,8},{4,7}];",
        "alldisj_avsi=[{3,7},{1,6},{2,8},4..5];",
        "alldisj_avsi=[4..5,{1,6},{2,8},{3,7}];",
        "alldisj_avsi=[{4,7},{1,6},{2,8},{3,5}];",
        "alldisj_avsi=[{5,7},{1,6},{2,8},3..4];",
        "alldisj_avsi=[5..6,{1,7},{2,8},3..4];",
        "alldisj_avsi=[{2,6},{1,7},{5,8},3..4];",
        "alldisj_avsi=[{2,5},{1,7},{6,8},3..4];",
        "alldisj_avsi=[{4,6},{1,7},{2,8},{3,5}];",
        "alldisj_avsi=[{2,6},{1,7},{4,8},{3,5}];",
        "alldisj_avsi=[{2,4},{1,7},{6,8},{3,5}];",
        "alldisj_avsi=[4..5,{1,7},{2,8},{3,6}];",
        "alldisj_avsi=[{2,5},{1,7},{4,8},{3,6}];",
        "alldisj_avsi=[{2,4},{1,7},{5,8},{3,6}];",
        "alldisj_avsi=[{3,6},{1,7},{2,8},4..5];",
        "alldisj_avsi=[{2,6},{1,7},{3,8},4..5];",
        "alldisj_avsi=[2..3,{1,7},{6,8},4..5];",
        "alldisj_avsi=[{3,5},{1,7},{2,8},{4,6}];",
        "alldisj_avsi=[{2,5},{1,7},{3,8},{4,6}];",
        "alldisj_avsi=[2..3,{1,7},{5,8},{4,6}];",
        "alldisj_avsi=[3..4,{1,7},{2,8},5..6];",
        "alldisj_avsi=[{2,4},{1,7},{3,8},5..6];",
        "alldisj_avsi=[2..3,{1,7},{4,8},5..6];",
        "alldisj_avsi=[1..2,6..7,{5,8},3..4];",
        "alldisj_avsi=[1..2,{5,7},{6,8},3..4];",
        "alldisj_avsi=[1..2,5..6,7..8,3..4];",
        "alldisj_avsi=[{1,5},6..7,{2,8},3..4];",
        "alldisj_avsi=[{1,5},{2,7},{6,8},3..4];",
        "alldisj_avsi=[{1,5},{2,6},7..8,3..4];",
        "alldisj_avsi=[{1,6},{5,7},{2,8},3..4];",
        "alldisj_avsi=[{1,6},{2,7},{5,8},3..4];",
        "alldisj_avsi=[{1,6},{2,5},7..8,3..4];",
        "alldisj_avsi=[{1,7},5..6,{2,8},3..4];",
        "alldisj_avsi=[{1,7},{2,6},{5,8},3..4];",
        "alldisj_avsi=[{1,7},{2,5},{6,8},3..4];",
        "alldisj_avsi=[{1,7},{4,6},{2,8},{3,5}];",
        "alldisj_avsi=[{1,6},{4,7},{2,8},{3,5}];",
        "alldisj_avsi=[{1,4},6..7,{2,8},{3,5}];",
        "alldisj_avsi=[{1,7},{2,6},{4,8},{3,5}];",
        "alldisj_avsi=[{1,6},{2,7},{4,8},{3,5}];",
        "alldisj_avsi=[1..2,6..7,{4,8},{3,5}];",
        "alldisj_avsi=[{1,7},{2,4},{6,8},{3,5}];",
        "alldisj_avsi=[{1,4},{2,7},{6,8},{3,5}];",
        "alldisj_avsi=[1..2,{4,7},{6,8},{3,5}];",
        "alldisj_avsi=[{1,6},{2,4},7..8,{3,5}];",
        "alldisj_avsi=[{1,4},{2,6},7..8,{3,5}];",
        "alldisj_avsi=[1..2,{4,6},7..8,{3,5}];",
        "alldisj_avsi=[{1,7},{2,4},{5,8},{3,6}];",
        "alldisj_avsi=[{1,5},{2,4},7..8,{3,6}];",
        "alldisj_avsi=[{1,7},{2,5},{4,8},{3,6}];",
        "alldisj_avsi=[{1,4},{2,5},7..8,{3,6}];",
        "alldisj_avsi=[{1,5},{2,7},{4,8},{3,6}];",
        "alldisj_avsi=[{1,4},{2,7},{5,8},{3,6}];",
        "alldisj_avsi=[{1,7},4..5,{2,8},{3,6}];",
        "alldisj_avsi=[1..2,4..5,7..8,{3,6}];",
        "alldisj_avsi=[{1,5},{4,7},{2,8},{3,6}];",
        "alldisj_avsi=[1..2,{4,7},{5,8},{3,6}];",
        "alldisj_avsi=[{1,4},{5,7},{2,8},{3,6}];",
        "alldisj_avsi=[1..2,{5,7},{4,8},{3,6}];",
        "alldisj_avsi=[{1,6},4..5,{2,8},{3,7}];",
        "alldisj_avsi=[{1,5},{4,6},{2,8},{3,7}];",
        "alldisj_avsi=[{1,4},5..6,{2,8},{3,7}];",
        "alldisj_avsi=[{1,6},{2,5},{4,8},{3,7}];",
        "alldisj_avsi=[{1,5},{2,6},{4,8},{3,7}];",
        "alldisj_avsi=[1..2,5..6,{4,8},{3,7}];",
        "alldisj_avsi=[{1,6},{2,4},{5,8},{3,7}];",
        "alldisj_avsi=[{1,4},{2,6},{5,8},{3,7}];",
        "alldisj_avsi=[1..2,{4,6},{5,8},{3,7}];",
        "alldisj_avsi=[{1,5},{2,4},{6,8},{3,7}];",
        "alldisj_avsi=[{1,4},{2,5},{6,8},{3,7}];",
        "alldisj_avsi=[1..2,4..5,{6,8},{3,7}];",
        "alldisj_avsi=[1..2,6..7,{3,8},4..5];",
        "alldisj_avsi=[1..2,{3,7},{6,8},4..5];",
        "alldisj_avsi=[1..2,{3,6},7..8,4..5];",
        "alldisj_avsi=[{1,3},6..7,{2,8},4..5];",
        "alldisj_avsi=[{1,3},{2,7},{6,8},4..5];",
        "alldisj_avsi=[{1,3},{2,6},7..8,4..5];",
        "alldisj_avsi=[{1,6},{3,7},{2,8},4..5];",
        "alldisj_avsi=[{1,6},{2,7},{3,8},4..5];",
        "alldisj_avsi=[{1,6},2..3,7..8,4..5];",
        "alldisj_avsi=[{1,7},{3,6},{2,8},4..5];",
        "alldisj_avsi=[{1,7},{2,6},{3,8},4..5];",
        "alldisj_avsi=[{1,7},2..3,{6,8},4..5];",
        "alldisj_avsi=[{1,7},2..3,{5,8},{4,6}];",
        "alldisj_avsi=[{1,5},2..3,7..8,{4,6}];",
        "alldisj_avsi=[{1,7},{2,5},{3,8},{4,6}];",
        "alldisj_avsi=[{1,3},{2,5},7..8,{4,6}];",
        "alldisj_avsi=[{1,5},{2,7},{3,8},{4,6}];",
        "alldisj_avsi=[{1,3},{2,7},{5,8},{4,6}];",
        "alldisj_avsi=[{1,7},{3,5},{2,8},{4,6}];",
        "alldisj_avsi=[1..2,{3,5},7..8,{4,6}];",
        "alldisj_avsi=[{1,5},{3,7},{2,8},{4,6}];",
        "alldisj_avsi=[1..2,{3,7},{5,8},{4,6}];",
        "alldisj_avsi=[{1,3},{5,7},{2,8},{4,6}];",
        "alldisj_avsi=[1..2,{5,7},{3,8},{4,6}];",
        "alldisj_avsi=[{1,6},{3,5},{2,8},{4,7}];",
        "alldisj_avsi=[{1,5},{3,6},{2,8},{4,7}];",
        "alldisj_avsi=[{1,3},5..6,{2,8},{4,7}];",
        "alldisj_avsi=[{1,6},{2,5},{3,8},{4,7}];",
        "alldisj_avsi=[{1,5},{2,6},{3,8},{4,7}];",
        "alldisj_avsi=[1..2,5..6,{3,8},{4,7}];",
        "alldisj_avsi=[{1,6},2..3,{5,8},{4,7}];",
        "alldisj_avsi=[{1,3},{2,6},{5,8},{4,7}];",
        "alldisj_avsi=[1..2,{3,6},{5,8},{4,7}];",
        "alldisj_avsi=[{1,5},2..3,{6,8},{4,7}];",
        "alldisj_avsi=[{1,3},{2,5},{6,8},{4,7}];",
        "alldisj_avsi=[1..2,{3,5},{6,8},{4,7}];",
        "alldisj_avsi=[{1,7},3..4,{2,8},5..6];",
        "alldisj_avsi=[{1,4},{3,7},{2,8},5..6];",
        "alldisj_avsi=[{1,3},{4,7},{2,8},5..6];",
        "alldisj_avsi=[{1,7},{2,4},{3,8},5..6];",
        "alldisj_avsi=[{1,4},{2,7},{3,8},5..6];",
        "alldisj_avsi=[1..2,{4,7},{3,8},5..6];",
        "alldisj_avsi=[{1,7},2..3,{4,8},5..6];",
        "alldisj_avsi=[{1,3},{2,7},{4,8},5..6];",
        "alldisj_avsi=[1..2,{3,7},{4,8},5..6];",
        "alldisj_avsi=[{1,4},2..3,7..8,5..6];",
        "alldisj_avsi=[{1,3},{2,4},7..8,5..6];",
        "alldisj_avsi=[1..2,3..4,7..8,5..6];",
        "alldisj_avsi=[{1,6},2..3,{4,8},{5,7}];",
        "alldisj_avsi=[{1,4},2..3,{6,8},{5,7}];",
        "alldisj_avsi=[{1,6},{2,4},{3,8},{5,7}];",
        "alldisj_avsi=[{1,3},{2,4},{6,8},{5,7}];",
        "alldisj_avsi=[{1,4},{2,6},{3,8},{5,7}];",
        "alldisj_avsi=[{1,3},{2,6},{4,8},{5,7}];",
        "alldisj_avsi=[{1,6},3..4,{2,8},{5,7}];",
        "alldisj_avsi=[1..2,3..4,{6,8},{5,7}];",
        "alldisj_avsi=[{1,4},{3,6},{2,8},{5,7}];",
        "alldisj_avsi=[1..2,{3,6},{4,8},{5,7}];",
        "alldisj_avsi=[{1,3},{4,6},{2,8},{5,7}];",
        "alldisj_avsi=[1..2,{4,6},{3,8},{5,7}];",
        "alldisj_avsi=[1..2,4..5,{3,8},6..7];",
        "alldisj_avsi=[1..2,{3,5},{4,8},6..7];",
        "alldisj_avsi=[1..2,3..4,{5,8},6..7];",
        "alldisj_avsi=[{1,3},4..5,{2,8},6..7];",
        "alldisj_avsi=[{1,3},{2,5},{4,8},6..7];",
        "alldisj_avsi=[{1,3},{2,4},{5,8},6..7];",
        "alldisj_avsi=[{1,4},{3,5},{2,8},6..7];",
        "alldisj_avsi=[{1,4},{2,5},{3,8},6..7];",
        "alldisj_avsi=[{1,4},2..3,{5,8},6..7];",
        "alldisj_avsi=[{1,5},3..4,{2,8},6..7];",
        "alldisj_avsi=[{1,5},{2,4},{3,8},6..7];",
        "alldisj_avsi=[{1,5},2..3,{4,8},6..7];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/all_equal/globals_all_equal_int.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[5,5,5,5,5,5,5,5,5,5];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/all_equal/globals_all_equal_set.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1..2,1..2,1..2,1..2,1..2,1..2,1..2,1..2,1..2,1..2];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/among/globals_among.mzn",
      "type": "test_solve",
      "solutions": [
        "among_avi1=[4,5,5,6,6,6,7,7,7,7];among_avi2=[4,5,5,6,6,6,7,7,8,8];among_vi=7;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/arg_max/globals_arg_max.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/arg_max/globals_arg_max_opt.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/arg_max/globals_arg_max_opt_weak.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/arg_min/globals_arg_max_opt.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/arg_min/globals_arg_min.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/arg_min/globals_arg_min_opt_weak.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/arg_val/arg_val_enum.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/atleast/globals_at_least.mzn",
      "type": "test_solve",
      "solutions": [
        "atlm_avi=[4,5,5,6,6,6,6,6,8,8];exact_avi=[4,5,5,6,6,6,6,6,8,8];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/atmost1/globals_at_most1.mzn",
      "type": "test_solve",
      "solutions": [
        "s=[{},{},{}];",
        "s=[{1},{1},1..3];",
        "s=[1..3,{},{}];",
        "s=[{},{},1..3];",
        "s=[{3},{3},{3}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/bin_packing/globals_bin_packing.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/bin_packing_capa/globals_bin_packing_capa.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/circuit/test_circuit.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/count/globals_count.mzn",
      "type": "test_solve",
      "solutions": [
        "count_avi1=[7,8,8,9,9,9,8,8];count_avi2=[7,8,9,3,0,0,9,9];count_avi3=[7,8,8,9,9,9,0,8];count_avi4=[0,0,0,0,0,0,0,0];count_vi1=9;count_vi2=3;count_vi3=8;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/cumulative/github_589.mzn",
      "type": "test_all_solutions",
      "args": "-G std"
    },
    {
      "suite": "default",
      "path": "unit/globals/cumulative/globals_cumulative.mzn",
      "type": "test_solve",
      "solutions": [
        "cum_bound=6;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/cumulative/unsat_resource_cumulative.mzn",
      "type": "test_unsatisfiable"
    },
    {
      "suite": "default",
      "path": "unit/globals/cumulatives/globals_cumulatives.mzn",
      "type": "test_solve",
      "solutions": [
        "makespan=11;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/cumulatives/globals_cumulatives.mzn",
      "type": "test_solve",
      "args": "-G std",
      "solutions": [
        "makespan=11;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/decreasing/globals_decreasing.mzn",
      "type": "test_solve",
      "solutions": [
        "inc_avb=[true,false,false,false,false];inc_avi=[5,3,3,1,1];",
        "inc_avb=[true,false,false,false,false];inc_avi=[5,5,3,1,1];",
        "inc_avb=[true,false,false,false,false];inc_avi=[5,5,3,3,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/disjoint/globals_disjoint.mzn",
      "type": "test_solve",
      "solutions": [
        "disj_s2=4..5;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/distribute/globals_distribute.mzn",
      "type": "test_solve",
      "solutions": [
        "dist_base=[6,7,6,8,6,9,6];dist_card=[4,1,1,1];dist_value=[6,7,8,9];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality/globals_global_cardinality.mzn",
      "type": "test_solve",
      "solutions": [
        "gcc_c=[5,1,2,1];gcc_x=[6,7,6,8,6,9,6,8,6];gcc_c_zero=[0,0,0,0];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality/globals_global_cardinality_low_up.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[6,3,8,3];",
        "x=[3,6,8,3];",
        "x=[3,3,8,6];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality/globals_global_cardinality_low_up_opt.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[\u003C\u003E,6,8,3];",
        "x=[\u003C\u003E,3,8,6];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality/globals_global_cardinality_low_up_set.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality/globals_global_cardinality_opt.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality/globals_global_cardinality_set.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality_closed/globals_global_cardinality_closed.mzn",
      "type": "test_solve",
      "solutions": [
        "gcc_c=[5,1,2,1];gcc_x=[6,7,6,8,6,9,6,8,6];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality_closed/globals_global_cardinality_closed_opt.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality_closed/globals_global_cardinality_closed_set.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality_closed/globals_global_cardinality_low_up_closed.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[6,5,3,3];",
        "x=[5,3,3,6];",
        "x=[3,6,5,3];",
        "x=[3,3,5,6];",
        "x=[6,3,3,5];",
        "x=[3,3,6,5];",
        "x=[5,6,3,3];",
        "x=[6,3,5,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality_closed/globals_global_cardinality_low_up_closed_opt.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/global_cardinality_closed/globals_global_cardinality_low_up_closed_set.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/increasing/globals_increasing.mzn",
      "type": "test_solve",
      "solutions": [
        "inc_avb=[false,true,true,true,true];inc_avi=[1,1,3,3,5];",
        "inc_avb=[false,true,true,true,true];inc_avi=[1,1,3,5,5];",
        "inc_avb=[false,true,true,true,true];inc_avi=[1,3,3,3,5];",
        "inc_avb=[false,true,true,true,true];inc_avi=[1,3,3,5,5];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/increasing/globals_strictly_increasing_opt.mzn",
      "type": "test_solve",
      "solutions": [
        "xs=[1,\u003C\u003E,2];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/int_set_channel/globals_int_set_channel.mzn",
      "type": "test_solve",
      "solutions": [
        "chan_avi=[1,2,3,5,4,2,1,3,2];chan_avsi=[{1,7},{2,6,9},{3,8},{5},{4}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/int_set_channel/test_int_set_channel2.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,1,1,1,1,1,1,1,1];y=[1..9,{},{},{},{}];",
        "x=[5,3,1,1,1,1,1,1,1];y=[3..9,{},{2},{},{1}];",
        "x=[2,2,2,2,2,2,2,2,2];y=[{},1..9,{},{},{}];",
        "x=[5,5,5,5,5,5,5,5,5];y=[{},{},{},{},1..9];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/inverse/globals_inverse.mzn",
      "type": "test_solve",
      "solutions": [
        "inv_f1=[5,7,6,8];inv_f2=[1,3,2,4];",
        "inv_f1=[5,7,8,6];inv_f2=[1,4,2,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/inverse/inverse_opt.mzn",
      "type": "test_all_solutions",
      "args": "-G std"
    },
    {
      "suite": "default",
      "path": "unit/globals/inverse_in_range/globals_inverse_in_range.mzn",
      "type": "test_solve",
      "solutions": [
        "inv_f1=[5,7,6,8];inv_f2=[1,3,2,4];",
        "inv_f1=[5,7,6,4];inv_f2=[1,3,2,5];",
        "inv_f1=[5,7,4,6];inv_f2=[1,4,2,5];",
        "inv_f1=[5,7,8,6];inv_f2=[1,4,2,3];",
        "inv_f1=[5,7,4,4];inv_f2=[1,5,2,5];",
        "inv_f1=[5,7,4,8];inv_f2=[1,5,2,4];",
        "inv_f1=[5,7,8,4];inv_f2=[1,5,2,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/inverse_set/globals_inverse_set.mzn",
      "type": "test_solve",
      "solutions": [
        "invs_f1=[{1},3..4,2..4,1..3];invs_f2=[{1,4},3..4,2..4,2..3];",
        "invs_f1=[{1},2..4,2..4,1..2];invs_f2=[{1,4},2..4,2..3,2..3];",
        "invs_f1=[{1},1..4,2..4,{1}];invs_f2=[{1,2,4},2..3,2..3,2..3];",
        "invs_f1=[{1},{4},2..4,{}];invs_f2=[{1},{3},{3},2..3];",
        "invs_f1=[{1},1..4,2..4,1..3];invs_f2=[{1,2,4},2..4,2..4,2..3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/lex2/globals_lex2.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/lex2/globals_lex2.mzn",
      "type": "test_solve",
      "solutions": [
        "y=[1,1,1,1];",
        "y=[1,2,2,1];",
        "y=[1,1,1,2];",
        "y=[1,2,1,2];",
        "y=[1,1,2,2];",
        "y=[1,2,2,2];",
        "y=[2,2,2,2];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/lex_chain/globals_lex_chain.mzn",
      "type": "test_solve",
      "solutions": [
        "lex_members_int=[6,0,0];lex_members_bool=[false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/lex_chain/globals_lex_chain__orbitope.mzn",
      "type": "test_solve",
      "solutions": [
        "lex_members_int=[1,0,1];lex_members_bool=[false,false];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/lex_greater/globals_lex_greater.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/lex_greatereq/globals_lex_greatereq.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/lex_less/globals_lex_less.mzn",
      "type": "test_solve",
      "solutions": [
        "lex_avi1=[1,3,5,7,9];lex_avi2=[1,3,5,100,9];",
        "lex_avi1=[1,3,5,7,9];lex_avi2=[1,3,5,8,9];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/lex_less/test_bool_lex_less.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/lex_lesseq/globals_lex_lesseq.mzn",
      "type": "test_solve",
      "solutions": [
        "lexeq_avi1=[1,3,5,7,9];lexeq_avi2=[1,3,5,7,9];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/lex_lesseq/test_bool_lex_lesseq.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/link_set_to_booleans/globals_link_set_to_booleans.mzn",
      "type": "test_solve",
      "solutions": [
        "link_avb=[false,true,false,true,true];link_vsi={1,4};"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/maximum/globals_maximum_int.mzn",
      "type": "test_solve",
      "solutions": [
        "max_vi1=9;max_vi2=9;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/minimum/globals_minimum_int.mzn",
      "type": "test_solve",
      "solutions": [
        "min_vi1=0;min_vi2=0;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/nvalue/globals_nvalue.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/nvalue/globals_nvalue.mzn",
      "type": "test_solve"
    },
    {
      "suite": "default",
      "path": "unit/globals/nvalue/nvalue_total.mzn",
      "type": "test_solve",
      "solutions": [
        "l1=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/partition_set/globals_partition_set.mzn",
      "type": "test_solve",
      "solutions": [
        "partset_avsi=[{1,3,5},{2,6,7,8,10},{},{4,9}];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/range/globals_range.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/regular/globals_regular.mzn",
      "type": "test_solve",
      "solutions": [
        "reg_input=[1,2,3,3,3,2,1];reg_input2=[1,2,3,3,3,3,3,3,3,2,1];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/regular/globals_regular_regex_1.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,2,2,4];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/regular/globals_regular_regex_2.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,2,2,4];",
        "x=[1,2,3,4];",
        "x=[1,3,2,4];",
        "x=[1,3,3,4];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/regular/globals_regular_regex_3.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/regular/globals_regular_regex_4.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[1,1,1,2,2,4,4,4,4,4];",
        "x=[1,1,1,1,2,2,4,4,4,4];",
        "x=[1,1,1,1,1,2,2,4,4,4];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/regular/globals_regular_regex_5.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/regular/globals_regular_regex_6.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[A,B,A,C,A,D,A];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/roots/roots_bad.mzn",
      "type": "test_error"
    },
    {
      "suite": "default",
      "path": "unit/globals/roots/test_roots.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/roots/test_roots2.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/roots/test_roots3.mzn",
      "type": "test_solve",
      "solutions": [
        "x=[5,5,5];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/sliding_sum/globals_sliding_sum.mzn",
      "type": "test_solve",
      "solutions": [
        "seq_avi=[-99,0,99,-99,0,99,-99];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/sort/globals_sort.mzn",
      "type": "test_solve",
      "solutions": [
        "sort_avi=[1,2,3,3,5,5,8];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/strict_lex2/globals_strict_lex2.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/subcircuit/test_subcircuit.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=[1,2,3,4];",
        "x=[2,1,3,4];",
        "x=[1,4,3,2];",
        "x=[4,2,3,1];",
        "x=[2,4,3,1];",
        "x=[4,1,3,2];",
        "x=[1,2,4,3];",
        "x=[1,3,2,4];",
        "x=[1,3,4,2];",
        "x=[1,4,2,3];",
        "x=[3,2,1,4];",
        "x=[4,2,1,3];",
        "x=[3,2,4,1];",
        "x=[2,3,1,4];",
        "x=[3,1,2,4];",
        "x=[4,3,1,2];",
        "x=[2,3,4,1];",
        "x=[3,4,2,1];",
        "x=[4,1,2,3];",
        "x=[2,4,1,3];",
        "x=[3,1,4,2];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/sum_pred/globals_sum_pred.mzn",
      "type": "test_solve",
      "solutions": [
        "sum_s=13;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/table/globals_table.mzn",
      "type": "test_solve",
      "solutions": [
        "x=1;y=2;z=1;",
        "x=2;y=5;z=2;",
        "x=6;y=5;z=1;"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/table/globals_table_opt.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "xs=[3,5];",
        "xs=[4,5];",
        "xs=[5,5];",
        "xs=[3,\u003C\u003E];",
        "xs=[4,\u003C\u003E];",
        "xs=[5,\u003C\u003E];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/value_precede/globals_value_precede_int.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/value_precede/globals_value_precede_int_opt.mzn",
      "type": "test_all_solutions",
      "solutions": [
        "x=[\u003C\u003E,\u003C\u003E,\u003C\u003E];",
        "x=[1,\u003C\u003E,\u003C\u003E];",
        "x=[3,\u003C\u003E,\u003C\u003E];",
        "x=[\u003C\u003E,1,\u003C\u003E];",
        "x=[\u003C\u003E,3,\u003C\u003E];",
        "x=[1,1,\u003C\u003E];",
        "x=[1,2,\u003C\u003E];",
        "x=[1,3,\u003C\u003E];",
        "x=[3,1,\u003C\u003E];",
        "x=[3,3,\u003C\u003E];",
        "x=[\u003C\u003E,\u003C\u003E,1];",
        "x=[\u003C\u003E,\u003C\u003E,3];",
        "x=[1,\u003C\u003E,1];",
        "x=[1,\u003C\u003E,2];",
        "x=[1,\u003C\u003E,3];",
        "x=[3,\u003C\u003E,1];",
        "x=[3,\u003C\u003E,3];",
        "x=[\u003C\u003E,1,1];",
        "x=[\u003C\u003E,1,2];",
        "x=[\u003C\u003E,1,3];",
        "x=[\u003C\u003E,3,1];",
        "x=[\u003C\u003E,3,3];",
        "x=[1,1,1];",
        "x=[1,2,1];",
        "x=[1,3,1];",
        "x=[1,1,2];",
        "x=[1,2,2];",
        "x=[1,3,2];",
        "x=[1,1,3];",
        "x=[1,2,3];",
        "x=[1,3,3];",
        "x=[3,1,1];",
        "x=[3,1,2];",
        "x=[3,1,3];",
        "x=[3,3,1];",
        "x=[3,3,3];"
      ]
    },
    {
      "suite": "default",
      "path": "unit/globals/value_precede/globals_value_precede_set.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/value_precede_chain/globals_value_precede_chain_int.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/value_precede_chain/globals_value_precede_chain_int_opt.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/value_precede_chain/globals_value_precede_chain_set.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "default",
      "path": "unit/globals/var_sqr_sym/globals_var_sqr_sym.mzn",
      "type": "test_all_solutions"
    },
    {
      "suite": "optimize-0",
      "path": "examples/2DPacking.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/alpha.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships10.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_1.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_2.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_3.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_4.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_5.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_7.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/battleships_9.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/blocksworld_instance_1.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/blocksworld_instance_2.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/cutstock.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/eq20.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/factory_planning_instance.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/golomb.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/halfreif.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/jobshop2x2.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/knights.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/langford.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/langford2.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/latin_squares_fd.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/magicsq_3.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/magicsq_4.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/magicsq_5.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/multidimknapsack_simple.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/oss.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/packing.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/perfsq.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/perfsq2.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/photo.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/product_fd.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/product_lp.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/quasigroup_qg5.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/queen_cp2.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/queen_ip.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/radiation.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/radiation.mzn",
      "type": "test_solve",
      "args": "-O0"
    },
    {
      "suite": "optimize-0",
      "path": "examples/simple_sat.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/singHoist2.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/steiner-triples.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "sets=[5..7,{3,4,7},{2,4,6},{2,3,5},{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[4..6,{3,6,7},{2,4,7},{2,3,5},{1,5,7},{1,3,4},{1,2,6}];",
        "sets=[{4,6,7},{3,5,7},{2,5,6},2..4,{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[{4,6,7},3..5,{2,5,6},{2,3,7},{1,5,7},{1,3,6},{1,2,4}];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/sudoku.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/template_design.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_1.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_2.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_3.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_4.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_5.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/tenpenki_6.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/timetabling.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/trucking.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/warehouses.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "test_solve",
      "args": "-O0"
    },
    {
      "suite": "optimize-0",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-0",
      "path": "examples/zebra.mzn",
      "type": "test_solve",
      "args": "-O0",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/2DPacking.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/alpha.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships10.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_1.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_2.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_3.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_4.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_5.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_7.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/battleships_9.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/blocksworld_instance_1.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/blocksworld_instance_2.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/cutstock.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/eq20.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/factory_planning_instance.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/golomb.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/halfreif.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/jobshop2x2.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/knights.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/langford.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/langford2.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/latin_squares_fd.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/magicsq_3.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/magicsq_4.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/magicsq_5.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/multidimknapsack_simple.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/oss.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/packing.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/perfsq.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/perfsq2.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/photo.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/product_fd.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/product_lp.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/quasigroup_qg5.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/queen_cp2.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/queen_ip.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/radiation.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/radiation.mzn",
      "type": "test_solve",
      "args": "-O2"
    },
    {
      "suite": "optimize-2",
      "path": "examples/simple_sat.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/singHoist2.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/steiner-triples.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "sets=[5..7,{3,4,7},{2,4,6},{2,3,5},{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[4..6,{3,6,7},{2,4,7},{2,3,5},{1,5,7},{1,3,4},{1,2,6}];",
        "sets=[{4,6,7},{3,5,7},{2,5,6},2..4,{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[{4,6,7},3..5,{2,5,6},{2,3,7},{1,5,7},{1,3,6},{1,2,4}];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/sudoku.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/template_design.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_1.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_2.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_3.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_4.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_5.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/tenpenki_6.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/timetabling.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/trucking.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/warehouses.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "test_solve",
      "args": "-O2"
    },
    {
      "suite": "optimize-2",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-2",
      "path": "examples/zebra.mzn",
      "type": "test_solve",
      "args": "-O2",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/2DPacking.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/alpha.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships10.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_1.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_2.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_3.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_4.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_5.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_7.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/battleships_9.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/blocksworld_instance_1.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/blocksworld_instance_2.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/cutstock.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/eq20.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/factory_planning_instance.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/golomb.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/halfreif.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/jobshop2x2.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/knights.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/langford.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/langford2.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/latin_squares_fd.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/magicsq_3.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/magicsq_4.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/magicsq_5.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/multidimknapsack_simple.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/oss.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/packing.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/perfsq.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/perfsq2.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/photo.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/product_fd.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/product_lp.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/quasigroup_qg5.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/queen_cp2.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/queen_ip.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/radiation.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/radiation.mzn",
      "type": "test_solve",
      "args": "-O3"
    },
    {
      "suite": "optimize-3",
      "path": "examples/simple_sat.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/singHoist2.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/steiner-triples.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "sets=[5..7,{3,4,7},{2,4,6},{2,3,5},{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[4..6,{3,6,7},{2,4,7},{2,3,5},{1,5,7},{1,3,4},{1,2,6}];",
        "sets=[{4,6,7},{3,5,7},{2,5,6},2..4,{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[{4,6,7},3..5,{2,5,6},{2,3,7},{1,5,7},{1,3,6},{1,2,4}];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/sudoku.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/template_design.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_1.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_2.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_3.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_4.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_5.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/tenpenki_6.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/timetabling.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/trucking.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/warehouses.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "test_solve",
      "args": "-O3"
    },
    {
      "suite": "optimize-3",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "optimize-3",
      "path": "examples/zebra.mzn",
      "type": "test_solve",
      "args": "-O3",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/2DPacking.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/alpha.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships10.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_1.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_2.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_3.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_4.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_5.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_7.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/battleships_9.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/blocksworld_instance_1.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/blocksworld_instance_2.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/cutstock.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/eq20.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/factory_planning_instance.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/golomb.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/halfreif.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/jobshop2x2.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/knights.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/langford.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/langford2.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/latin_squares_fd.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/magicsq_3.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/magicsq_4.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/magicsq_5.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/multidimknapsack_simple.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/oss.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/packing.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/perfsq.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/perfsq2.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/photo.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/product_fd.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/product_lp.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/quasigroup_qg5.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/queen_cp2.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/queen_ip.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/radiation.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/radiation.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false"
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/simple_sat.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/singHoist2.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/steiner-triples.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "sets=[5..7,{3,4,7},{2,4,6},{2,3,5},{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[4..6,{3,6,7},{2,4,7},{2,3,5},{1,5,7},{1,3,4},{1,2,6}];",
        "sets=[{4,6,7},{3,5,7},{2,5,6},2..4,{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[{4,6,7},3..5,{2,5,6},{2,3,7},{1,5,7},{1,3,6},{1,2,4}];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/sudoku.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/template_design.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_1.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_2.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_3.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_4.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_5.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/tenpenki_6.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/timetabling.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/trucking.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/warehouses.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/wolf_goat_cabbage.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false"
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/wolf_goat_cabbage.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "no-mip-domains",
      "path": "examples/zebra.mzn",
      "solvers": [
        "cbc"
      ],
      "type": "test_solve",
      "args": "-D fMIPdomains=false",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/2DPacking.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/alpha.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships10.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_1.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_2.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_3.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_4.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_5.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_7.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/battleships_9.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/blocksworld_instance_1.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/blocksworld_instance_2.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/cutstock.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/eq20.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/factory_planning_instance.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/golomb.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/halfreif.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/jobshop2x2.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/knights.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/langford.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/langford2.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/latin_squares_fd.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/magicsq_3.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/magicsq_4.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/magicsq_5.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/multidimknapsack_simple.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/oss.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/packing.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/perfsq.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/perfsq2.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/photo.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/product_fd.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/product_lp.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/quasigroup_qg5.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/queen_cp2.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/queen_ip.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/radiation.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/radiation.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications"
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/simple_sat.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/singHoist2.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/steiner-triples.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "sets=[5..7,{3,4,7},{2,4,6},{2,3,5},{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[4..6,{3,6,7},{2,4,7},{2,3,5},{1,5,7},{1,3,4},{1,2,6}];",
        "sets=[{4,6,7},{3,5,7},{2,5,6},2..4,{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[{4,6,7},3..5,{2,5,6},{2,3,7},{1,5,7},{1,3,6},{1,2,4}];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/sudoku.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/template_design.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_1.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_2.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_3.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_4.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_5.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/tenpenki_6.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/timetabling.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/trucking.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/warehouses.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications"
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "no-half-reifications",
      "path": "examples/zebra.mzn",
      "type": "test_solve",
      "args": "--no-half-reifications",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/2DPacking.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "bin=[0,1];item=[0,0,0,0,1,1,1,1];obj=1;objective=1;",
        "bin=[1,0];item=[1,1,1,1,0,0,0,0];obj=1;objective=1;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/alpha.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships10.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_1.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_2.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,1,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,0,2,2];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0];col_sums=[2,0,3,0,0,5];row_sums=[2,2,1,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,0,4,1,0,3];row_sums=[2,2,1,1,3,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_3.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_4.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_5.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_7.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/battleships_9.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/blocksworld_instance_1.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/blocksworld_instance_2.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/cutstock.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "items=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,1,1,0,1];obj=4;objective=4;pieces=[0,0,0,0,1,1,1,1];",
        "items=[0,0,3,0,2,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0];obj=4;objective=4;pieces=[1,1,1,1,0,0,0,0];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/eq20.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "x=[1,4,6,6,6,3,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/factory_planning_instance.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "last_step=5;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/golomb.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "mark=[0,1,4,6];objective=6;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/halfreif.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "x=0;y=11;b1=false;b2=true;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/jobshop2x2.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "end=11;objective=11;s=[0,2,2,7];",
        "end=11;objective=11;s=[0,2,3,7];",
        "end=11;objective=11;s=[0,2,4,7];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/knights.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/langford.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "Num=[1,25,2,16,3,22,4,13,19,5,17,26,6,14,23,10,20,18,7,15,11,27,8,24,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,8,14,20,4,11,18,9,17,25,6,15,24,2,12,22];",
        "Num=[19,13,7,22,16,25,8,14,20,10,9,17,23,15,11,26,21,4,18,12,5,24,1,6,2,27,3];Pos=[23,25,27,18,21,24,3,7,11,10,15,20,2,8,14,5,12,19,1,9,17,4,13,22,6,16,26];",
        "Num=[1,25,2,4,3,22,5,10,16,6,19,26,11,13,23,17,7,12,20,14,8,27,18,24,9,15,21];Pos=[1,3,5,4,7,10,17,21,25,8,13,18,14,20,26,9,16,23,11,19,27,6,15,24,2,12,22];",
        "Num=[1,22,2,25,3,13,4,16,19,5,23,14,6,26,17,10,20,15,7,24,11,18,8,27,21,12,9];Pos=[1,3,5,7,10,13,19,23,27,16,21,26,6,12,18,8,15,22,9,17,25,2,11,20,4,14,24];",
        "Num=[7,10,19,22,8,25,11,13,9,16,20,12,23,14,4,26,17,5,21,15,6,24,1,18,2,27,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,8,14,20,10,17,24,3,11,19,4,13,22,6,16,26];",
        "Num=[7,10,19,25,8,16,11,22,9,13,20,12,17,26,4,14,23,5,21,18,6,15,1,27,2,24,3];Pos=[23,25,27,15,18,21,1,5,9,2,7,12,10,16,22,6,13,20,3,11,19,8,17,26,4,14,24];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/langford2.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[1,7,1,2,6,4,2,5,3,7,4,6,3,5];",
        "a=[1,7,1,2,5,6,2,3,4,7,5,3,6,4];",
        "a=[2,7,4,2,3,5,6,4,3,7,1,5,1,6];",
        "a=[3,6,7,1,3,1,4,5,6,2,7,4,2,5];",
        "a=[2,6,7,2,1,5,1,4,6,3,7,5,4,3];",
        "a=[4,1,7,1,6,4,2,5,3,2,7,6,3,5];",
        "a=[2,3,7,2,6,3,5,1,4,1,7,6,5,4];",
        "a=[2,4,7,2,3,6,4,5,3,1,7,1,6,5];",
        "a=[3,5,7,2,3,6,2,5,4,1,7,1,6,4];",
        "a=[4,6,1,7,1,4,3,5,6,2,3,7,2,5];",
        "a=[1,6,1,7,2,4,5,2,6,3,4,7,5,3];",
        "a=[3,4,6,7,3,2,4,5,2,6,1,7,1,5];",
        "a=[1,5,1,7,3,4,6,5,3,2,4,7,2,6];",
        "a=[2,6,3,2,7,4,3,5,6,1,4,1,7,5];",
        "a=[2,3,6,2,7,3,4,5,1,6,1,4,7,5];",
        "a=[4,1,6,1,7,4,3,5,2,6,3,2,7,5];",
        "a=[1,5,1,6,7,2,4,5,2,3,6,4,7,3];",
        "a=[1,4,1,6,7,3,4,5,2,3,6,2,7,5];",
        "a=[1,6,1,3,5,7,4,3,6,2,5,4,2,7];",
        "a=[2,6,3,2,5,7,3,4,6,1,5,1,4,7];",
        "a=[5,2,6,4,2,7,5,3,4,6,1,3,1,7];",
        "a=[2,5,6,2,3,7,4,5,3,6,1,4,1,7];",
        "a=[5,2,4,6,2,7,5,4,3,1,6,1,3,7];",
        "a=[1,5,1,6,3,7,4,5,3,2,6,4,2,7];",
        "a=[1,5,1,4,6,7,3,5,4,2,3,6,2,7];",
        "a=[1,4,1,5,6,7,4,2,3,5,2,6,3,7];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/latin_squares_fd.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "x=[0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0];",
        "x=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/magicsq_3.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[8,1,6,3,5,7,4,9,2];",
        "a=[6,7,2,1,5,9,8,3,4];",
        "a=[2,7,6,9,5,1,4,3,8];",
        "a=[4,3,8,9,5,1,2,7,6];",
        "a=[8,3,4,1,5,9,6,7,2];",
        "a=[2,9,4,7,5,3,6,1,8];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/magicsq_4.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];",
        "a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];",
        "a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];",
        "a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];",
        "a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];",
        "a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/magicsq_5.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];",
        "a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];",
        "a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];",
        "a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];",
        "a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];",
        "a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/multidimknapsack_simple.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "objective=17;x=[0,1,0,1,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/oss.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];",
        "makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];",
        "makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];",
        "makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];",
        "makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];",
        "makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/packing.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/perfsq.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/perfsq2.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "objective=337561;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/photo.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "ful=[false,false,false,true,false,true,false,false,true,false,false,false,true,true,true,true,true];objective=8;pos=[0,1,4,3,2,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,false,false,false,false,true,true,false,false,true,true,false,true];objective=8;pos=[3,8,6,0,2,1,5,4,7];satisfies=8;",
        "ful=[false,true,false,false,false,false,false,true,false,false,true,false,true,true,true,true,true];objective=8;pos=[1,3,4,2,0,8,5,6,7];satisfies=8;",
        "ful=[false,true,true,false,true,true,false,false,true,false,true,false,false,true,false,true,false];objective=8;pos=[5,8,2,3,4,0,1,6,7];satisfies=8;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/product_fd.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/product_lp.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "inside=[40,0,0];objective=37200;outside=[60,200,300];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/quasigroup_qg5.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/queen_cp2.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "q=[2,4,6,8,3,1,7,5];",
        "q=[2,5,7,1,3,8,6,4];",
        "q=[2,5,7,4,1,8,6,3];",
        "q=[2,6,1,7,4,8,3,5];",
        "q=[2,6,8,3,1,4,7,5];",
        "q=[2,7,3,6,8,5,1,4];",
        "q=[2,7,5,8,1,4,6,3];",
        "q=[2,8,6,1,3,5,7,4];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/queen_ip.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "q=[0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0];",
        "q=[0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0];",
        "q=[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/radiation.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/radiation.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression"
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/simple_sat.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "assignment=[true,true,true];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/singHoist2.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/steiner-triples.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "sets=[5..7,{3,4,7},{2,4,6},{2,3,5},{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[4..6,{3,6,7},{2,4,7},{2,3,5},{1,5,7},{1,3,4},{1,2,6}];",
        "sets=[{4,6,7},{3,5,7},{2,5,6},2..4,{1,4,5},{1,3,6},{1,2,7}];",
        "sets=[{4,6,7},3..5,{2,5,6},{2,3,7},{1,5,7},{1,3,6},{1,2,4}];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/sudoku.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/template_design.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_1.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_2.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];",
        "a=[false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false,false,false,false,false,true,false,false,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,false,false,false,false,true,true,false,false,false,true,true,false,false,true,false,false,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_3.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_4.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[true,true,true,true,true,false,true,false,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_5.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/tenpenki_6.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/timetabling.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "sum_Cs=295;"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/trucking.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0];",
        "obj=224;objective=224;x=[0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/warehouses.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression"
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/wolf_goat_cabbage.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];",
        "cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"
      ]
    },
    {
      "suite": "no-chain-compression",
      "path": "examples/zebra.mzn",
      "type": "test_solve",
      "args": "--no-chain-compression",
      "solutions": [
        "animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];"
      ]
    }
  ]
}