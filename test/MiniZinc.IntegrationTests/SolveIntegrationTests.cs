/*
<auto-generated>
This file has been auto generated by the following command:
dotnet run --project ./build/Make/Make.csproj --make-client-tests
</auto-generated>
*/
#nullable enable
namespace MiniZinc.Tests
{

	[NotInParallel]
	public class SolveIntegrationTests : IntegrationTests
	{

		[Test]
		public async Task test_examples_alpha_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;""";
			await RunSolveTest("examples/alpha.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_alpha_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;""";
			await RunSolveTest("examples/alpha.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_alpha_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;""";
			await RunSolveTest("examples/alpha.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_alpha_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;""";
			await RunSolveTest("examples/alpha.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_alpha_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;""";
			await RunSolveTest("examples/alpha.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_alpha_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """a=5;b=13;c=9;d=16;e=20;f=4;g=24;h=21;i=25;j=17;k=23;l=2;m=8;n=12;o=10;p=19;q=7;r=11;s=15;t=3;u=1;v=26;w=6;x=22;y=14;z=18;""";
			await RunSolveTest("examples/alpha.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships10_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];""";
			await RunSolveTest("examples/battleships10.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships10_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];""";
			await RunSolveTest("examples/battleships10.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships10_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];""";
			await RunSolveTest("examples/battleships10.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships10_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];""";
			await RunSolveTest("examples/battleships10.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships10_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];""";
			await RunSolveTest("examples/battleships10.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships10_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,3,0,1,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,4,1,2,3,1,3,0,4,1];row_sums=[2,1,5,0,0,0,1,6,1,4];""";
			await RunSolveTest("examples/battleships10.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_1_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];""";
			await RunSolveTest("examples/battleships_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_1_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];""";
			await RunSolveTest("examples/battleships_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_1_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];""";
			await RunSolveTest("examples/battleships_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_1_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];""";
			await RunSolveTest("examples/battleships_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_1_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];""";
			await RunSolveTest("examples/battleships_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_1_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,3,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[4,0,3,2,2,2,1,4,2];row_sums=[2,2,3,2,2,1,5,1,2];""";
			await RunSolveTest("examples/battleships_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_3_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];""";
			await RunSolveTest("examples/battleships_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_3_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];""";
			await RunSolveTest("examples/battleships_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_3_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];""";
			await RunSolveTest("examples/battleships_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_3_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];""";
			await RunSolveTest("examples/battleships_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_3_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];""";
			await RunSolveTest("examples/battleships_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_3_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,2,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,2,4,2,2,2,2,1,1,1];row_sums=[4,4,0,0,4,4,0,0,4,0];""";
			await RunSolveTest("examples/battleships_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_5_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];""";
			await RunSolveTest("examples/battleships_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_5_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];""";
			await RunSolveTest("examples/battleships_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_5_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];""";
			await RunSolveTest("examples/battleships_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_5_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];""";
			await RunSolveTest("examples/battleships_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_5_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];""";
			await RunSolveTest("examples/battleships_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_5_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,3,0,1,0,0,2,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,1,0,0,0,0,3,0,1,0,0,0,0,2,0,1,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[1,3,0,2,5,0,5,1,1,2];row_sums=[3,2,4,2,3,3,1,1,1,0];""";
			await RunSolveTest("examples/battleships_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_9_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];""";
			await RunSolveTest("examples/battleships_9.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_9_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];""";
			await RunSolveTest("examples/battleships_9.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_9_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];""";
			await RunSolveTest("examples/battleships_9.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_9_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];""";
			await RunSolveTest("examples/battleships_9.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_9_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];""";
			await RunSolveTest("examples/battleships_9.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_battleships_9_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,3,0,0,3,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[0,7,0,0,6,1,1,2,1,2];row_sums=[5,0,2,2,6,0,2,2,0,1];""";
			await RunSolveTest("examples/battleships_9.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_1_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];""";
			await RunSolveTest("examples/blocksworld_instance_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_1_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];""";
			await RunSolveTest("examples/blocksworld_instance_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_1_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];""";
			await RunSolveTest("examples/blocksworld_instance_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_1_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];""";
			await RunSolveTest("examples/blocksworld_instance_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_1_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];""";
			await RunSolveTest("examples/blocksworld_instance_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_1_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """on=[2,-2,1,2,-2,-3,-1,-2,-3,2,3,-3];""";
			await RunSolveTest("examples/blocksworld_instance_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_2_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];""";
			await RunSolveTest("examples/blocksworld_instance_2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_2_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];""";
			await RunSolveTest("examples/blocksworld_instance_2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_2_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];""";
			await RunSolveTest("examples/blocksworld_instance_2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_2_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];""";
			await RunSolveTest("examples/blocksworld_instance_2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_2_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];""";
			await RunSolveTest("examples/blocksworld_instance_2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_blocksworld_instance_2_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """on=[-1,1,2,3,4,-1,1,2,3,-5,-1,1,2,-4,-5,-1,1,-3,-4,-5,-1,-2,-3,-4,-5,2,3,4,5,-5];""";
			await RunSolveTest("examples/blocksworld_instance_2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_eq20_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """x=[1,4,6,6,6,3,1];""";
			await RunSolveTest("examples/eq20.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_eq20_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """x=[1,4,6,6,6,3,1];""";
			await RunSolveTest("examples/eq20.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_eq20_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """x=[1,4,6,6,6,3,1];""";
			await RunSolveTest("examples/eq20.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_eq20_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """x=[1,4,6,6,6,3,1];""";
			await RunSolveTest("examples/eq20.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_eq20_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """x=[1,4,6,6,6,3,1];""";
			await RunSolveTest("examples/eq20.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_eq20_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """x=[1,4,6,6,6,3,1];""";
			await RunSolveTest("examples/eq20.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_2()
		{
			string solver = "coin-bc";
			string? args = "-O0";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_3()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_4()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_5()
		{
			string solver = "coin-bc";
			string? args = "-O2";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_6()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_7()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_8()
		{
			string solver = "coin-bc";
			string? args = "-O3";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_9()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_10()
		{
			string solver = "gecode";
			string? args = "-D fMIPdomains=false";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_11()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_12()
		{
			string solver = "gecode";
			string? args = "-D fMIPdomains=false";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_13()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_14()
		{
			string solver = "coin-bc";
			string? args = "--no-half-reifications";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_15()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_16()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_17()
		{
			string solver = "coin-bc";
			string? args = "--no-chain-compression";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_factory_planning_instance_18()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """last_step=5;""";
			await RunSolveTest("examples/factory_planning_instance.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_golomb_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """mark=[0,1,4,6];objective=6;""";
			await RunSolveTest("examples/golomb.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_golomb_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """mark=[0,1,4,6];objective=6;""";
			await RunSolveTest("examples/golomb.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_golomb_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """mark=[0,1,4,6];objective=6;""";
			await RunSolveTest("examples/golomb.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_golomb_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """mark=[0,1,4,6];objective=6;""";
			await RunSolveTest("examples/golomb.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_golomb_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """mark=[0,1,4,6];objective=6;""";
			await RunSolveTest("examples/golomb.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_golomb_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """mark=[0,1,4,6];objective=6;""";
			await RunSolveTest("examples/golomb.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_halfreif_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """x=0;y=11;b1=false;b2=true;""";
			await RunSolveTest("examples/halfreif.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_halfreif_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """x=0;y=11;b1=false;b2=true;""";
			await RunSolveTest("examples/halfreif.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_halfreif_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """x=0;y=11;b1=false;b2=true;""";
			await RunSolveTest("examples/halfreif.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_halfreif_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """x=0;y=11;b1=false;b2=true;""";
			await RunSolveTest("examples/halfreif.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_halfreif_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """x=0;y=11;b1=false;b2=true;""";
			await RunSolveTest("examples/halfreif.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_halfreif_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """x=0;y=11;b1=false;b2=true;""";
			await RunSolveTest("examples/halfreif.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_2()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_3()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_4()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_5()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_6()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_7()
		{
			string solver = "gecode";
			string? args = "-D fMIPdomains=false";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_8()
		{
			string solver = "gecode";
			string? args = "-D fMIPdomains=false";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_9()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_10()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_11()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_knights_12()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];""";
			await RunSolveTest("examples/knights.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_multidimknapsack_simple_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """objective=17;x=[0,1,0,1,1];""";
			await RunSolveTest("examples/multidimknapsack_simple.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_multidimknapsack_simple_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """objective=17;x=[0,1,0,1,1];""";
			await RunSolveTest("examples/multidimknapsack_simple.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_multidimknapsack_simple_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """objective=17;x=[0,1,0,1,1];""";
			await RunSolveTest("examples/multidimknapsack_simple.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_multidimknapsack_simple_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """objective=17;x=[0,1,0,1,1];""";
			await RunSolveTest("examples/multidimknapsack_simple.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_multidimknapsack_simple_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """objective=17;x=[0,1,0,1,1];""";
			await RunSolveTest("examples/multidimknapsack_simple.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_multidimknapsack_simple_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """objective=17;x=[0,1,0,1,1];""";
			await RunSolveTest("examples/multidimknapsack_simple.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_2()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_3()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_4()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_5()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_6()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_7()
		{
			string solver = "gecode";
			string? args = "-D fMIPdomains=false";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_8()
		{
			string solver = "gecode";
			string? args = "-D fMIPdomains=false";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_9()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_10()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_11()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_packing_12()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];""";
			await RunSolveTest("examples/packing.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];""";
			await RunSolveTest("examples/perfsq.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];""";
			await RunSolveTest("examples/perfsq.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];""";
			await RunSolveTest("examples/perfsq.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];""";
			await RunSolveTest("examples/perfsq.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];""";
			await RunSolveTest("examples/perfsq.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """j=4;k=10;objective=4;s=[7,5,4,3,1,0,0,0,0,0,0];""";
			await RunSolveTest("examples/perfsq.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq2_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """objective=337561;""";
			await RunSolveTest("examples/perfsq2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq2_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """objective=337561;""";
			await RunSolveTest("examples/perfsq2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq2_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """objective=337561;""";
			await RunSolveTest("examples/perfsq2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq2_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """objective=337561;""";
			await RunSolveTest("examples/perfsq2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq2_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """objective=337561;""";
			await RunSolveTest("examples/perfsq2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_perfsq2_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """objective=337561;""";
			await RunSolveTest("examples/perfsq2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_fd_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_fd.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_fd_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_fd.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_fd_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_fd.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_fd_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_fd.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_fd_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_fd.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_fd_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_fd.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_lp_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_lp.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_lp_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_lp.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_lp_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_lp.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_lp_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_lp.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_lp_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_lp.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_product_lp_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """inside=[40,0,0];objective=37200;outside=[60,200,300];""";
			await RunSolveTest("examples/product_lp.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_quasigroup_qg5_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];""";
			await RunSolveTest("examples/quasigroup_qg5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_quasigroup_qg5_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];""";
			await RunSolveTest("examples/quasigroup_qg5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_quasigroup_qg5_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];""";
			await RunSolveTest("examples/quasigroup_qg5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_quasigroup_qg5_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];""";
			await RunSolveTest("examples/quasigroup_qg5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_quasigroup_qg5_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];""";
			await RunSolveTest("examples/quasigroup_qg5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_quasigroup_qg5_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """q=[1,4,5,2,3,3,2,1,5,4,4,5,3,1,2,5,3,2,4,1,2,1,4,3,5];""";
			await RunSolveTest("examples/quasigroup_qg5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_2()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_3()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_4()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_5()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_6()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_7()
		{
			string solver = "gecode";
			string? args = "-D fMIPdomains=false";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_8()
		{
			string solver = "gecode";
			string? args = "-D fMIPdomains=false";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_9()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_10()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_11()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_radiation_12()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;""";
			await RunSolveTest("examples/radiation.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_simple_sat_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """assignment=[true,true,true];""";
			await RunSolveTest("examples/simple_sat.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_simple_sat_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """assignment=[true,true,true];""";
			await RunSolveTest("examples/simple_sat.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_simple_sat_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """assignment=[true,true,true];""";
			await RunSolveTest("examples/simple_sat.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_simple_sat_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """assignment=[true,true,true];""";
			await RunSolveTest("examples/simple_sat.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_simple_sat_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """assignment=[true,true,true];""";
			await RunSolveTest("examples/simple_sat.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_simple_sat_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """assignment=[true,true,true];""";
			await RunSolveTest("examples/simple_sat.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_singHoist2_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;""";
			await RunSolveTest("examples/singHoist2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_singHoist2_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;""";
			await RunSolveTest("examples/singHoist2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_singHoist2_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;""";
			await RunSolveTest("examples/singHoist2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_singHoist2_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;""";
			await RunSolveTest("examples/singHoist2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_singHoist2_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;""";
			await RunSolveTest("examples/singHoist2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_singHoist2_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """Entry=[62,4,18,47];Period=25;Removal=[0,14,43,57];objective=25;""";
			await RunSolveTest("examples/singHoist2.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_sudoku_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];""";
			await RunSolveTest("examples/sudoku.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_sudoku_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];""";
			await RunSolveTest("examples/sudoku.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_sudoku_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];""";
			await RunSolveTest("examples/sudoku.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_sudoku_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];""";
			await RunSolveTest("examples/sudoku.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_sudoku_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];""";
			await RunSolveTest("examples/sudoku.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_sudoku_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """puzzle=[5,9,3,7,6,2,8,1,4,2,6,8,4,3,1,5,7,9,7,1,4,9,8,5,2,3,6,3,2,6,8,5,9,1,4,7,1,8,7,3,2,4,9,6,5,4,5,9,1,7,6,3,2,8,9,4,2,6,1,8,7,5,3,8,3,5,2,4,7,6,9,1,6,7,1,5,9,3,4,8,2];""";
			await RunSolveTest("examples/sudoku.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_2()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_3()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_4()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_5()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_6()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_7()
		{
			string solver = "gecode";
			string? args = "-D fMIPdomains=false";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_8()
		{
			string solver = "gecode";
			string? args = "-D fMIPdomains=false";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_9()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_10()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_11()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_template_design_12()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];""";
			await RunSolveTest("examples/template_design.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_1_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];""";
			await RunSolveTest("examples/tenpenki_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_1_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];""";
			await RunSolveTest("examples/tenpenki_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_1_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];""";
			await RunSolveTest("examples/tenpenki_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_1_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];""";
			await RunSolveTest("examples/tenpenki_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_1_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];""";
			await RunSolveTest("examples/tenpenki_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_1_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """a=[true,false,true,true,true,false,true,true,false,false,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true];""";
			await RunSolveTest("examples/tenpenki_1.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_3_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_3_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_3_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_3_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_3_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_3_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """a=[true,true,false,true,true,true,true,false,true,true,false,false,false,false,false,false,true,false,false,true,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_3.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_4_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """a=[true,true,true,true,true,false,true,false,false];""";
			await RunSolveTest("examples/tenpenki_4.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_4_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """a=[true,true,true,true,true,false,true,false,false];""";
			await RunSolveTest("examples/tenpenki_4.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_4_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """a=[true,true,true,true,true,false,true,false,false];""";
			await RunSolveTest("examples/tenpenki_4.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_4_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """a=[true,true,true,true,true,false,true,false,false];""";
			await RunSolveTest("examples/tenpenki_4.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_4_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """a=[true,true,true,true,true,false,true,false,false];""";
			await RunSolveTest("examples/tenpenki_4.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_4_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """a=[true,true,true,true,true,false,true,false,false];""";
			await RunSolveTest("examples/tenpenki_4.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_5_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_5_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_5_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_5_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_5_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_5_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """a=[false,false,false,true,true,true,true,false,true,true,true,true,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,true,false,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,false];""";
			await RunSolveTest("examples/tenpenki_5.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_6_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];""";
			await RunSolveTest("examples/tenpenki_6.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_6_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];""";
			await RunSolveTest("examples/tenpenki_6.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_6_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];""";
			await RunSolveTest("examples/tenpenki_6.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_6_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];""";
			await RunSolveTest("examples/tenpenki_6.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_6_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];""";
			await RunSolveTest("examples/tenpenki_6.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_tenpenki_6_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """a=[false,false,false,false,false,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,true,true,true,false,false,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,false,false,false];""";
			await RunSolveTest("examples/tenpenki_6.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_timetabling_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """sum_Cs=295;""";
			await RunSolveTest("examples/timetabling.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_timetabling_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """sum_Cs=295;""";
			await RunSolveTest("examples/timetabling.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_timetabling_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """sum_Cs=295;""";
			await RunSolveTest("examples/timetabling.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_timetabling_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """sum_Cs=295;""";
			await RunSolveTest("examples/timetabling.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_timetabling_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """sum_Cs=295;""";
			await RunSolveTest("examples/timetabling.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_timetabling_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """sum_Cs=295;""";
			await RunSolveTest("examples/timetabling.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_warehouses_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];""";
			await RunSolveTest("examples/warehouses.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_warehouses_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];""";
			await RunSolveTest("examples/warehouses.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_warehouses_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];""";
			await RunSolveTest("examples/warehouses.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_warehouses_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];""";
			await RunSolveTest("examples/warehouses.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_warehouses_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];""";
			await RunSolveTest("examples/warehouses.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_warehouses_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """Total=383;cost=[30,27,70,2,4,22,5,13,35,55];objective=383;open=[true,true,true,false,true];supplier=[5,2,5,1,5,2,2,3,2,3];""";
			await RunSolveTest("examples/warehouses.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_zebra_1()
		{
			string solver = "gecode";
			string? args = "-O0";
			string? solution = """animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];""";
			await RunSolveTest("examples/zebra.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_zebra_2()
		{
			string solver = "gecode";
			string? args = "-O2";
			string? solution = """animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];""";
			await RunSolveTest("examples/zebra.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_zebra_3()
		{
			string solver = "gecode";
			string? args = "-O3";
			string? solution = """animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];""";
			await RunSolveTest("examples/zebra.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_zebra_4()
		{
			string solver = "coin-bc";
			string? args = "-D fMIPdomains=false";
			string? solution = """animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];""";
			await RunSolveTest("examples/zebra.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_zebra_5()
		{
			string solver = "gecode";
			string? args = "--no-half-reifications";
			string? solution = """animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];""";
			await RunSolveTest("examples/zebra.mzn",solver,args,solution);
		}

		[Test]
		public async Task test_examples_zebra_6()
		{
			string solver = "gecode";
			string? args = "--no-chain-compression";
			string? solution = """animal=[4,1,2,5,3];colour=[3,5,4,1,2];drink=[5,2,3,4,1];nation=[3,4,2,1,5];smoke=[3,1,2,4,5];""";
			await RunSolveTest("examples/zebra.mzn",solver,args,solution);
		}

	}

}

