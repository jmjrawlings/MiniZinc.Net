/*
<auto-generated>
This file has been auto generated by the following command:
dotnet run --project ./build/Make/Make.csproj --make-client-tests
</auto-generated>
*/
#nullable enable

public class OptimiseTests : ClientTest
{

	public OptimiseTests(ITestOutputHelper output, ClientFixture fixture) : base(output, fixture)
	{
	}

	[Fact(DisplayName="unit/division/test_div12.mzn")]
	public async Task test_solve_unit_division_test_div12()
	{
		var path = "unit/division/test_div12.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"""{"aCostSupport":0,"mdl8_Z":0}""",
			};
		var args = new List<string>();
		await TestOptimise(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/infinite_domain_bind.mzn")]
	public async Task test_solve_unit_general_infinite_domain_bind()
	{
		var path = "unit/general/infinite_domain_bind.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"""{"x":10}""",
			};
		var args = new List<string>();
		await TestOptimise(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/general/test-search1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_general_test_search1(string solver)
	{
		var path = "unit/general/test-search1.mzn";
		var solutions = new List<string> {
			"""{"x":3,"y":8}""",
			};
		var args = new List<string>();
		await TestOptimise(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/general/test_times_int_float_eq.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_general_test_times_int_float_eq(string solver)
	{
		var path = "unit/general/test_times_int_float_eq.mzn";
		var solutions = new List<string> {
			"""{"objective":-5,"x":5,"y":6,"z":30,"xf":5.0,"yf":6.0}""",
			};
		var args = new List<string>{
			"-D QuadrFloat=true;QuadrIntCard=0",
		};
		await TestOptimise(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/general/test_times_int_float_eq__defaultopt.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_general_test_times_int_float_eq__defaultopt(string solver)
	{
		var path = "unit/general/test_times_int_float_eq__defaultopt.mzn";
		var solutions = new List<string> {
			"""{"objective":-5,"x":5,"y":6,"z":30,"xf":5.0,"yf":6.0}""",
			};
		var args = new List<string>();
		await TestOptimise(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/on_restart/complete.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_complete(string solver)
	{
		var path = "unit/on_restart/complete.mzn";
		var solutions = new List<string> {
			"""{"x":3}""",
			};
		var args = new List<string>{
			"--restart constant",
			"--restart-base 100",
		};
		await TestOptimise(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/on_restart/last_val_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_bool(string solver)
	{
		var path = "unit/on_restart/last_val_bool.mzn";
		var solutions = new List<string> {
			"""{"x":4,"y":true}""",
			};
		var args = new List<string>{
			"--restart constant",
			"--restart-base 100",
		};
		await TestOptimise(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/on_restart/last_val_float.mzn")]
	public async Task test_solve_unit_on_restart_last_val_float()
	{
		var path = "unit/on_restart/last_val_float.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"""{"x":4,"y":0.85}""",
			};
		var args = new List<string>{
			"--restart constant",
			"--restart-base 100",
		};
		await TestOptimise(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/on_restart/last_val_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_int(string solver)
	{
		var path = "unit/on_restart/last_val_int.mzn";
		var solutions = new List<string> {
			"""{"x":4,"y":3}""",
			};
		var args = new List<string>{
			"--restart constant",
			"--restart-base 100",
		};
		await TestOptimise(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/on_restart/last_val_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_set(string solver)
	{
		var path = "unit/on_restart/last_val_set.mzn";
		var solutions = new List<string> {
			"""{"x":4,"y":"{12,4,8}"}""",
			};
		var args = new List<string>{
			"--restart constant",
			"--restart-base 100",
		};
		await TestOptimise(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/on_restart/sol_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_bool(string solver)
	{
		var path = "unit/on_restart/sol_bool.mzn";
		var solutions = new List<string> {
			"""{"x":3,"is_even":false,"y":true}""",
			};
		var args = new List<string>{
			"--restart constant",
			"--restart-base 100",
		};
		await TestOptimise(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/on_restart/sol_float.mzn")]
	public async Task test_solve_unit_on_restart_sol_float()
	{
		var path = "unit/on_restart/sol_float.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"""{"x":3,"y":2.0}""",
			};
		var args = new List<string>{
			"--restart constant",
			"--restart-base 100",
		};
		await TestOptimise(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/on_restart/sol_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_int(string solver)
	{
		var path = "unit/on_restart/sol_int.mzn";
		var solutions = new List<string> {
			"""{"x":3,"y":2}""",
			};
		var args = new List<string>{
			"--restart constant",
			"--restart-base 100",
		};
		await TestOptimise(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/on_restart/sol_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_set(string solver)
	{
		var path = "unit/on_restart/sol_set.mzn";
		var solutions = new List<string> {
			"""{"x":"{}","y":"{1}"}""",
			};
		var args = new List<string>{
			"--restart constant",
			"--restart-base 100",
		};
		await TestOptimise(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/ts_bug.mzn")]
	public async Task test_solve_unit_regression_ts_bug()
	{
		var path = "unit/regression/ts_bug.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"""{"cost":48,"s":[4,1,2,3,5,6],"dur":["{24}","{12,4}","{13,4}","{13,4}","{14}","{14}"],"bef":["{}","{24}","{12,4}",{"range":"1..4"},{"range":"1..4"},{"range":"1..4"}],"aft":[{"range":"1..4"},{"range":"1..4"},"{13,4}","{13,4}","{14}","{}"],"a":[{"range":"1..2"},{"range":"2..3"},{"range":"3..4"},"{24}","{13}","{14}"]}""",
			};
		var args = new List<string>();
		await TestOptimise(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/record_var_element.mzn")]
	public async Task test_solve_unit_types_record_var_element()
	{
		var path = "unit/types/record_var_element.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"""{"idx":"iE","selected":{"a":6,"b":{"c":3,"d":3}}}""",
			};
		var args = new List<string>();
		await TestOptimise(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/tuple_var_element.mzn")]
	public async Task test_solve_unit_types_tuple_var_element()
	{
		var path = "unit/types/tuple_var_element.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"""{"idx":"iE","selected":[6,[3,3]]}""",
			};
		var args = new List<string>();
		await TestOptimise(path, solver, solutions, args);
	}

	[Theory(DisplayName="examples/radiation.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_radiation(string solver)
	{
		var path = "examples/radiation.mzn";
		var solutions = new List<string> {
			"""{"Beamtime":21,"K":7,"N":[2,1,1,1,2,0,0,0,0,0,0,0,0,0],"Q":[[[0,1,0,0,1,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,0,0,0,0,0,0,0,0,0],[0,0,1,0,1,0,0,0,0,0,0,0,0,0],[1,0,1,0,1,0,0,0,0,0,0,0,0,0]],[[1,0,1,1,1,0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,1,0,0,1,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,1,0,0,0,0,0,0,0,0,0],[0,1,0,0,2,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[2,1,1,1,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,2,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,0,0,0],[2,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,2,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[2,1,0,1,0,0,0,0,0,0,0,0,0,0],[2,1,1,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0]]],"objective":175}""",
			};
		var args = new List<string>();
		await TestOptimise(path, solver, solutions, args);
	}

}

