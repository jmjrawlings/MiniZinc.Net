/*
THIS FILE WAS GENERATED BY THE FOLLOWING COMMAND

dotnet run --project ./build/Make/Make.csproj --make-client-tests
*/
public class ClientAnySolutionTests : IClassFixture<ClientFixture> {
	private readonly MiniZincClient MiniZinc;
	private readonly ITestOutputHelper _output;
	public ClientAnySolutionTests(ClientFixture fixture, ITestOutputHelper output){
		MiniZinc = fixture.Client;
		_output = output;
	}
	[Theory(DisplayName="unit/compilation/annotate_bool_literal.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_compilation_annotate_bool_literal(string solver) {
		var path = "unit/compilation/annotate_bool_literal.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/compilation/assert_dbg_ignore.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_compilation_assert_dbg_ignore(string solver) {
		var path = "unit/compilation/assert_dbg_ignore.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/compilation/debug_mode_false.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_compilation_debug_mode_false(string solver) {
		var path = "unit/compilation/debug_mode_false.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/compilation/debug_mode_true.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_compilation_debug_mode_true(string solver) {
		var path = "unit/compilation/debug_mode_true.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/compilation/has_ann.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_compilation_has_ann(string solver) {
		var path = "unit/compilation/has_ann.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/compilation/if_then_no_else.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_compilation_if_then_no_else(string solver) {
		var path = "unit/compilation/if_then_no_else.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/compilation/set2iter.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_compilation_set2iter(string solver) {
		var path = "unit/compilation/set2iter.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/division/test_div10.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_division_test_div10(string solver) {
		var path = "unit/division/test_div10.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/division/test_div11.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_division_test_div11(string solver) {
		var path = "unit/division/test_div11.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/division/test_div8.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_division_test_div8(string solver) {
		var path = "unit/division/test_div8.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/division/test_div_mod_bounds.mzn")]
	[InlineData("gecode")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_division_test_div_mod_bounds(string solver) {
		var path = "unit/division/test_div_mod_bounds.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/division/test_fldiv_01.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_division_test_fldiv_01(string solver) {
		var path = "unit/division/test_fldiv_01.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/division/test_fldiv_02.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_division_test_fldiv_02(string solver) {
		var path = "unit/division/test_fldiv_02.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/annotated_expression_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_annotated_expression_1(string solver) {
		var path = "unit/general/annotated_expression_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/array_param_non_array_return.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_array_param_non_array_return(string solver) {
		var path = "unit/general/array_param_non_array_return.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/array_union_intersect_enum.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_array_union_intersect_enum(string solver) {
		var path = "unit/general/array_union_intersect_enum.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/bin_pack_multiobj.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	public async Task test_solve_unit_general_bin_pack_multiobj(string solver) {
		var path = "unit/general/bin_pack_multiobj.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/builtins_arg_max.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_builtins_arg_max(string solver) {
		var path = "unit/general/builtins_arg_max.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/builtins_debug.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_builtins_debug(string solver) {
		var path = "unit/general/builtins_debug.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/enum_constructor_quoting.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_enum_constructor_quoting(string solver) {
		var path = "unit/general/enum_constructor_quoting.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/eval_par_opt_set.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_eval_par_opt_set(string solver) {
		var path = "unit/general/eval_par_opt_set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/fix_struct.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_fix_struct(string solver) {
		var path = "unit/general/fix_struct.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/json_ignore.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_json_ignore(string solver) {
		var path = "unit/general/json_ignore.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/md_exists.mzn")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_general_md_exists_2(string solver) {
		var path = "unit/general/md_exists.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/md_forall.mzn")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_forall_2(string solver) {
		var path = "unit/general/md_forall.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/md_iffall.mzn")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_general_md_iffall_2(string solver) {
		var path = "unit/general/md_iffall.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/md_sum_float.mzn")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_sum_float_2(string solver) {
		var path = "unit/general/md_sum_float.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/missing_ozn_decl.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_missing_ozn_decl(string solver) {
		var path = "unit/general/missing_ozn_decl.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/mortgage.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_general_mortgage(string solver) {
		var path = "unit/general/mortgage.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/overload_bottom.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_overload_bottom(string solver) {
		var path = "unit/general/overload_bottom.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/quoted_id_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_quoted_id_1(string solver) {
		var path = "unit/general/quoted_id_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/quoted_id_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_quoted_id_2(string solver) {
		var path = "unit/general/quoted_id_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/quoted_id_3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_quoted_id_3(string solver) {
		var path = "unit/general/quoted_id_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/quoted_id_4.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_quoted_id_4(string solver) {
		var path = "unit/general/quoted_id_4.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/range_var_enum.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_range_var_enum(string solver) {
		var path = "unit/general/range_var_enum.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/test_mod_bounds.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_test_mod_bounds(string solver) {
		var path = "unit/general/test_mod_bounds.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/test_queens.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_queens(string solver) {
		var path = "unit/general/test_queens.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/test_same.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_general_test_same(string solver) {
		var path = "unit/general/test_same.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/test_set_lt_2.mzn")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_general_test_set_lt_2_2(string solver) {
		var path = "unit/general/test_set_lt_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/test_set_lt_3.mzn")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_general_test_set_lt_3(string solver) {
		var path = "unit/general/test_set_lt_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/test_to_enum.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_test_to_enum(string solver) {
		var path = "unit/general/test_to_enum.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/test_var_prod.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_var_prod(string solver) {
		var path = "unit/general/test_var_prod.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/test_var_set_element.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_general_test_var_set_element(string solver) {
		var path = "unit/general/test_var_set_element.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/json/anon_enum_json.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_anon_enum_json(string solver) {
		var path = "unit/json/anon_enum_json.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/json/enum_constructor_basic.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_enum_constructor_basic(string solver) {
		var path = "unit/json/enum_constructor_basic.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/json/enum_constructor_basic_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_enum_constructor_basic_2(string solver) {
		var path = "unit/json/enum_constructor_basic_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/json/enum_constructor_int.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_enum_constructor_int(string solver) {
		var path = "unit/json/enum_constructor_int.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/json/enum_constructor_nested.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_enum_constructor_nested(string solver) {
		var path = "unit/json/enum_constructor_nested.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/json/enum_escaping.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_enum_escaping(string solver) {
		var path = "unit/json/enum_escaping.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/json/float_json_exponent.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_float_json_exponent(string solver) {
		var path = "unit/json/float_json_exponent.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/json/json_enum_def.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_json_enum_def(string solver) {
		var path = "unit/json/json_enum_def.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/json/json_input_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_json_input_1(string solver) {
		var path = "unit/json/json_input_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/json/json_unicode_escapes.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_json_unicode_escapes(string solver) {
		var path = "unit/json/json_unicode_escapes.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/json/mult_dim_enum.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_mult_dim_enum(string solver) {
		var path = "unit/json/mult_dim_enum.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/optional/fn_return_array_absent.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_fn_return_array_absent(string solver) {
		var path = "unit/optional/fn_return_array_absent.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/optional/test-opt-float-1.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_optional_test_opt_float_1(string solver) {
		var path = "unit/optional/test-opt-float-1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/optional/test_count_set.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_test_count_set(string solver) {
		var path = "unit/optional/test_count_set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/optional/test_deopt_absent.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_test_deopt_absent(string solver) {
		var path = "unit/optional/test_deopt_absent.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/optional/test_opt_comprehension.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_test_opt_comprehension(string solver) {
		var path = "unit/optional/test_opt_comprehension.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/arg-reif-output.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_arg_reif_output(string solver) {
		var path = "unit/output/arg-reif-output.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/ctx_ann.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_ctx_ann(string solver) {
		var path = "unit/output/ctx_ann.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/json_ann.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_json_ann(string solver) {
		var path = "unit/output/json_ann.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/local_output.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_local_output(string solver) {
		var path = "unit/output/local_output.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_annotations_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_annotations_1(string solver) {
		var path = "unit/output/output_annotations_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_annotations_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_annotations_2(string solver) {
		var path = "unit/output/output_annotations_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_annotations_3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_annotations_3(string solver) {
		var path = "unit/output/output_annotations_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_annotations_4.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_annotations_4(string solver) {
		var path = "unit/output/output_annotations_4.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_sections_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_sections_1(string solver) {
		var path = "unit/output/output_sections_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_sections_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_sections_1_2(string solver) {
		var path = "unit/output/output_sections_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_sections_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_sections_1_3(string solver) {
		var path = "unit/output/output_sections_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_sections_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_sections_2(string solver) {
		var path = "unit/output/output_sections_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_sections_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_sections_2_2(string solver) {
		var path = "unit/output/output_sections_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_sections_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_sections_2_3(string solver) {
		var path = "unit/output/output_sections_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_sections_3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_sections_3(string solver) {
		var path = "unit/output/output_sections_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_sections_4.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_sections_4(string solver) {
		var path = "unit/output/output_sections_4.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_sections_5.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_sections_5(string solver) {
		var path = "unit/output/output_sections_5.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_sections_6.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_sections_6(string solver) {
		var path = "unit/output/output_sections_6.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/output_sections_7.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_output_sections_7(string solver) {
		var path = "unit/output/output_sections_7.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/output/var_enum.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_var_enum(string solver) {
		var path = "unit/output/var_enum.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/param_file/param_file_array.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_param_file_param_file_array(string solver) {
		var path = "unit/param_file/param_file_array.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/param_file/param_file_resolution.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_param_file_param_file_resolution(string solver) {
		var path = "unit/param_file/param_file_resolution.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/array_set_element_nosets.mzn")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_array_set_element_nosets(string solver) {
		var path = "unit/regression/array_set_element_nosets.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/array_var_set_element_nosets.mzn")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_array_var_set_element_nosets(string solver) {
		var path = "unit/regression/array_var_set_element_nosets.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/assign_reverse_map.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_assign_reverse_map(string solver) {
		var path = "unit/regression/assign_reverse_map.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bounds_for_linear_01_max_0.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_max_0(string solver) {
		var path = "unit/regression/bounds_for_linear_01_max_0.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bounds_for_linear_01_max_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_max_1(string solver) {
		var path = "unit/regression/bounds_for_linear_01_max_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bounds_for_linear_01_min_0.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_min_0(string solver) {
		var path = "unit/regression/bounds_for_linear_01_min_0.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bounds_for_linear_01_min_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_min_1(string solver) {
		var path = "unit/regression/bounds_for_linear_01_min_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug110.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug110(string solver) {
		var path = "unit/regression/bug110.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug222.mzn")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bug222(string solver) {
		var path = "unit/regression/bug222.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug269.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_bug269(string solver) {
		var path = "unit/regression/bug269.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug284.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_bug284(string solver) {
		var path = "unit/regression/bug284.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug318_orig.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug318_orig(string solver) {
		var path = "unit/regression/bug318_orig.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug335.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_bug335(string solver) {
		var path = "unit/regression/bug335.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug380.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug380(string solver) {
		var path = "unit/regression/bug380.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug532.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_bug532(string solver) {
		var path = "unit/regression/bug532.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug534.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_bug534(string solver) {
		var path = "unit/regression/bug534.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug536.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_bug536(string solver) {
		var path = "unit/regression/bug536.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug552.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_bug552(string solver) {
		var path = "unit/regression/bug552.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug565.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_bug565(string solver) {
		var path = "unit/regression/bug565.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug67.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug67(string solver) {
		var path = "unit/regression/bug67.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug82.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug82(string solver) {
		var path = "unit/regression/bug82.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug_empty_enum_extension.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_bug_empty_enum_extension(string solver) {
		var path = "unit/regression/bug_empty_enum_extension.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/bug_opt_polymorphic.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_bug_opt_polymorphic(string solver) {
		var path = "unit/regression/bug_opt_polymorphic.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/checker_mzn_check_var.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_checker_mzn_check_var(string solver) {
		var path = "unit/regression/checker_mzn_check_var.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/checker_opt.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_checker_opt(string solver) {
		var path = "unit/regression/checker_opt.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/checker_params.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_checker_params(string solver) {
		var path = "unit/regression/checker_params.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/checker_same_var.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_checker_same_var(string solver) {
		var path = "unit/regression/checker_same_var.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/checker_var_bug.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_checker_var_bug(string solver) {
		var path = "unit/regression/checker_var_bug.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/coercion_par.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_coercion_par(string solver) {
		var path = "unit/regression/coercion_par.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/constructor_of_set.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_constructor_of_set(string solver) {
		var path = "unit/regression/constructor_of_set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/enigma_1568.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_enigma_1568(string solver) {
		var path = "unit/regression/enigma_1568.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/flatten_comp_in.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_flatten_comp_in(string solver) {
		var path = "unit/regression/flatten_comp_in.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_644_a.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_644_a(string solver) {
		var path = "unit/regression/github_644_a.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_644_b.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_644_b(string solver) {
		var path = "unit/regression/github_644_b.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_644_c.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_644_c(string solver) {
		var path = "unit/regression/github_644_c.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_644_d.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_644_d(string solver) {
		var path = "unit/regression/github_644_d.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_644_e.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_644_e(string solver) {
		var path = "unit/regression/github_644_e.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_646.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_646(string solver) {
		var path = "unit/regression/github_646.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_661_part2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_661_part2(string solver) {
		var path = "unit/regression/github_661_part2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_664.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_664(string solver) {
		var path = "unit/regression/github_664.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_667.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_github_667(string solver) {
		var path = "unit/regression/github_667.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_668.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_668(string solver) {
		var path = "unit/regression/github_668.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_669.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_669(string solver) {
		var path = "unit/regression/github_669.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_671.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_671(string solver) {
		var path = "unit/regression/github_671.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_673.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_673(string solver) {
		var path = "unit/regression/github_673.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_674.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_github_674(string solver) {
		var path = "unit/regression/github_674.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_675a.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_675a(string solver) {
		var path = "unit/regression/github_675a.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_681.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_681(string solver) {
		var path = "unit/regression/github_681.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_683.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_683(string solver) {
		var path = "unit/regression/github_683.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_685.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_685(string solver) {
		var path = "unit/regression/github_685.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_687.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_687(string solver) {
		var path = "unit/regression/github_687.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_691.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_691(string solver) {
		var path = "unit/regression/github_691.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_693_part1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_693_part1(string solver) {
		var path = "unit/regression/github_693_part1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_693_part2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_693_part2(string solver) {
		var path = "unit/regression/github_693_part2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_700.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_700(string solver) {
		var path = "unit/regression/github_700.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_728.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_728(string solver) {
		var path = "unit/regression/github_728.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_732.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_732(string solver) {
		var path = "unit/regression/github_732.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_747.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_747(string solver) {
		var path = "unit/regression/github_747.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_749.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_749(string solver) {
		var path = "unit/regression/github_749.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_758.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_758(string solver) {
		var path = "unit/regression/github_758.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_758.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_758_2(string solver) {
		var path = "unit/regression/github_758.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_760.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_760(string solver) {
		var path = "unit/regression/github_760.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_762.mzn")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_github_762(string solver) {
		var path = "unit/regression/github_762.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_771.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_771(string solver) {
		var path = "unit/regression/github_771.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/github_776.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_776(string solver) {
		var path = "unit/regression/github_776.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/if_then_else_absent.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_if_then_else_absent(string solver) {
		var path = "unit/regression/if_then_else_absent.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/in_array_eval_error.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_in_array_eval_error(string solver) {
		var path = "unit/regression/in_array_eval_error.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/makepar_output.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_makepar_output(string solver) {
		var path = "unit/regression/makepar_output.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/non_pos_pow.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_non_pos_pow(string solver) {
		var path = "unit/regression/non_pos_pow.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/nosets_set_search.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_nosets_set_search(string solver) {
		var path = "unit/regression/nosets_set_search.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/opt_minmax.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_opt_minmax(string solver) {
		var path = "unit/regression/opt_minmax.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/output_fn_toplevel_var.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_output_fn_toplevel_var(string solver) {
		var path = "unit/regression/output_fn_toplevel_var.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/parse_assignments.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_parse_assignments(string solver) {
		var path = "unit/regression/parse_assignments.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/polymorphic_var_and_par.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_polymorphic_var_and_par(string solver) {
		var path = "unit/regression/polymorphic_var_and_par.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/pred_param_r7550.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_pred_param_r7550(string solver) {
		var path = "unit/regression/pred_param_r7550.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/slice_enum_indexset.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_slice_enum_indexset(string solver) {
		var path = "unit/regression/slice_enum_indexset.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/subsets_100.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_subsets_100(string solver) {
		var path = "unit/regression/subsets_100.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug54.mzn")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_test_bug54_2(string solver) {
		var path = "unit/regression/test_bug54.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug72.mzn")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_test_bug72_2(string solver) {
		var path = "unit/regression/test_bug72.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug_476.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug_476(string solver) {
		var path = "unit/regression/test_bug_476.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug_493.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug_493(string solver) {
		var path = "unit/regression/test_bug_493.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug_494.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug_494(string solver) {
		var path = "unit/regression/test_bug_494.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug_520.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug_520(string solver) {
		var path = "unit/regression/test_bug_520.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug_521.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug_521(string solver) {
		var path = "unit/regression/test_bug_521.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug_527.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug_527(string solver) {
		var path = "unit/regression/test_bug_527.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug_529.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug_529(string solver) {
		var path = "unit/regression/test_bug_529.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug_588.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug_588(string solver) {
		var path = "unit/regression/test_bug_588.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug_array_sum_bounds.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug_array_sum_bounds(string solver) {
		var path = "unit/regression/test_bug_array_sum_bounds.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_bug_ite_array_eq.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug_ite_array_eq(string solver) {
		var path = "unit/regression/test_bug_ite_array_eq.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/test_parout.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_test_parout(string solver) {
		var path = "unit/regression/test_parout.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/var_bool_comp.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_var_bool_comp(string solver) {
		var path = "unit/regression/var_bool_comp.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/var_self_assign_bug.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_regression_var_self_assign_bug(string solver) {
		var path = "unit/regression/var_self_assign_bug.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/int_choice_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_choice_1(string solver) {
		var path = "unit/search/int_choice_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/int_choice_2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_choice_2(string solver) {
		var path = "unit/search/int_choice_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/int_choice_6.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_choice_6(string solver) {
		var path = "unit/search/int_choice_6.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/int_var_select_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_1(string solver) {
		var path = "unit/search/int_var_select_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/int_var_select_2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_2(string solver) {
		var path = "unit/search/int_var_select_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/int_var_select_3.mzn")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_3(string solver) {
		var path = "unit/search/int_var_select_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/int_var_select_4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_4(string solver) {
		var path = "unit/search/int_var_select_4.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/int_var_select_6.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_6(string solver) {
		var path = "unit/search/int_var_select_6.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/test-ff1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_ff1(string solver) {
		var path = "unit/search/test-ff1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/test-ff2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_ff2(string solver) {
		var path = "unit/search/test-ff2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/test-ff3.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_ff3(string solver) {
		var path = "unit/search/test-ff3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/test-large1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_search_test_large1(string solver) {
		var path = "unit/search/test-large1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/test-large1.mzn")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_large1_2(string solver) {
		var path = "unit/search/test-large1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/test-med1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_med1(string solver) {
		var path = "unit/search/test-med1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/search/test-small1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_small1(string solver) {
		var path = "unit/search/test-small1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/alias.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_alias(string solver) {
		var path = "unit/types/alias.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/alias_call.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_alias_call(string solver) {
		var path = "unit/types/alias_call.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/comprehension_type.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_comprehension_type(string solver) {
		var path = "unit/types/comprehension_type.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/cv_comprehension.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_cv_comprehension(string solver) {
		var path = "unit/types/cv_comprehension.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/enum_refl.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_enum_refl(string solver) {
		var path = "unit/types/enum_refl.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/github_647.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_github_647(string solver) {
		var path = "unit/types/github_647.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/non_contig_enum.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_non_contig_enum(string solver) {
		var path = "unit/types/non_contig_enum.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/polymorphic_overloading.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_polymorphic_overloading(string solver) {
		var path = "unit/types/polymorphic_overloading.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/record_access_success.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_access_success(string solver) {
		var path = "unit/types/record_access_success.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/record_binop_par.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_binop_par(string solver) {
		var path = "unit/types/record_binop_par.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/record_binop_var.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_binop_var(string solver) {
		var path = "unit/types/record_binop_var.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/record_comprehensions.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_comprehensions(string solver) {
		var path = "unit/types/record_comprehensions.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/record_output.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_output(string solver) {
		var path = "unit/types/record_output.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/record_subtyping.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_subtyping(string solver) {
		var path = "unit/types/record_subtyping.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/record_var_ite.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_var_ite(string solver) {
		var path = "unit/types/record_var_ite.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/specialise_large_struct.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_specialise_large_struct(string solver) {
		var path = "unit/types/specialise_large_struct.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/struct_array_coercion.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_array_coercion(string solver) {
		var path = "unit/types/struct_array_coercion.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/struct_domain_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_domain_1(string solver) {
		var path = "unit/types/struct_domain_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/struct_domain_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_domain_2(string solver) {
		var path = "unit/types/struct_domain_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/struct_domain_3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_domain_3(string solver) {
		var path = "unit/types/struct_domain_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/struct_domain_4.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_domain_4(string solver) {
		var path = "unit/types/struct_domain_4.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/struct_par_function_version.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_par_function_version(string solver) {
		var path = "unit/types/struct_par_function_version.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/struct_return_ti_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_return_ti_1(string solver) {
		var path = "unit/types/struct_return_ti_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/struct_return_ti_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_return_ti_2(string solver) {
		var path = "unit/types/struct_return_ti_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/struct_specialise.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_specialise(string solver) {
		var path = "unit/types/struct_specialise.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/struct_specialise_return.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_specialise_return(string solver) {
		var path = "unit/types/struct_specialise_return.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/tuple_access_success.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_access_success(string solver) {
		var path = "unit/types/tuple_access_success.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/tuple_binop_par.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_binop_par(string solver) {
		var path = "unit/types/tuple_binop_par.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/tuple_binop_var.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_binop_var(string solver) {
		var path = "unit/types/tuple_binop_var.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/tuple_comprehensions.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_comprehensions(string solver) {
		var path = "unit/types/tuple_comprehensions.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/tuple_int_set_of_int_specialisation.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_int_set_of_int_specialisation(string solver) {
		var path = "unit/types/tuple_int_set_of_int_specialisation.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/tuple_lit.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_lit(string solver) {
		var path = "unit/types/tuple_lit.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/tuple_mkpar.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_mkpar(string solver) {
		var path = "unit/types/tuple_mkpar.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/tuple_output.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_output(string solver) {
		var path = "unit/types/tuple_output.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/tuple_subtyping.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_subtyping(string solver) {
		var path = "unit/types/tuple_subtyping.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/tuple_var_ite.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_var_ite(string solver) {
		var path = "unit/types/tuple_var_ite.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/globals/cumulatives/globals_cumulatives.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_globals_cumulatives_globals_cumulatives(string solver) {
		var path = "unit/globals/cumulatives/globals_cumulatives.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/globals/cumulatives/globals_cumulatives.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_cumulatives_globals_cumulatives_2(string solver) {
		var path = "unit/globals/cumulatives/globals_cumulatives.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/globals/int_set_channel/test_int_set_channel2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_globals_int_set_channel_test_int_set_channel2(string solver) {
		var path = "unit/globals/int_set_channel/test_int_set_channel2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/globals/lex2/globals_lex2.mzn")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_globals_lex2_globals_lex2_2(string solver) {
		var path = "unit/globals/lex2/globals_lex2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/globals/lex_chain/globals_lex_chain__orbitope.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_globals_lex_chain_globals_lex_chain__orbitope(string solver) {
		var path = "unit/globals/lex_chain/globals_lex_chain__orbitope.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/globals/nvalue/nvalue_total.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_globals_nvalue_nvalue_total(string solver) {
		var path = "unit/globals/nvalue/nvalue_total.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/globals/regular/globals_regular.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_globals_regular_globals_regular(string solver) {
		var path = "unit/globals/regular/globals_regular.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="examples/battleships_4.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_4(string solver) {
		var path = "examples/battleships_4.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="examples/battleships_7.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_7(string solver) {
		var path = "examples/battleships_7.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="examples/factory_planning_instance.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_factory_planning_instance(string solver) {
		var path = "examples/factory_planning_instance.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="examples/knights.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_knights(string solver) {
		var path = "examples/knights.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="examples/magicsq_4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_4(string solver) {
		var path = "examples/magicsq_4.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="examples/magicsq_5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_5(string solver) {
		var path = "examples/magicsq_5.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="examples/oss.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_oss(string solver) {
		var path = "examples/oss.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="examples/packing.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_packing(string solver) {
		var path = "examples/packing.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="examples/template_design.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_template_design(string solver) {
		var path = "examples/template_design.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="examples/wolf_goat_cabbage.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_wolf_goat_cabbage_2(string solver) {
		var path = "examples/wolf_goat_cabbage.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected = "";
		Assert.Fail("Solution did not match any of the expected results");
	}
	}