/*
THIS FILE WAS GENERATED BY THE FOLLOWING COMMAND

dotnet run --project ./build/Make/Make.csproj --make-client-tests
*/
public class ClientAllSolutionsTests : IClassFixture<ClientFixture> {
	private readonly MiniZincClient MiniZinc;
	private readonly ITestOutputHelper _output;
	public ClientAllSolutionsTests(ClientFixture fixture, ITestOutputHelper output){
		MiniZinc = fixture.Client;
		_output = output;
	}
	[Theory(DisplayName="unit/compilation/multiple_neg.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_compilation_multiple_neg(string solver) {
		var path = "unit/compilation/multiple_neg.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/array_intersect_context.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_array_intersect_context(string solver) {
		var path = "unit/general/array_intersect_context.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/cse_ctx.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_cse_ctx(string solver) {
		var path = "unit/general/cse_ctx.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/let_struct_domain.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_let_struct_domain(string solver) {
		var path = "unit/general/let_struct_domain.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/md_exists.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_exists(string solver) {
		var path = "unit/general/md_exists.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/md_forall.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_md_forall(string solver) {
		var path = "unit/general/md_forall.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/md_iffall.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_iffall(string solver) {
		var path = "unit/general/md_iffall.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/md_product_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_product_int(string solver) {
		var path = "unit/general/md_product_int.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/md_sum_float.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_md_sum_float(string solver) {
		var path = "unit/general/md_sum_float.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/md_sum_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_sum_int(string solver) {
		var path = "unit/general/md_sum_int.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/md_xorall.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_xorall(string solver) {
		var path = "unit/general/md_xorall.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_2(string solver) {
		var path = "unit/general/pow_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_2_2(string solver) {
		var path = "unit/general/pow_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_2_3(string solver) {
		var path = "unit/general/pow_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_2_4(string solver) {
		var path = "unit/general/pow_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_2_5(string solver) {
		var path = "unit/general/pow_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_2_6(string solver) {
		var path = "unit/general/pow_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_2_7(string solver) {
		var path = "unit/general/pow_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_3(string solver) {
		var path = "unit/general/pow_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_3_2(string solver) {
		var path = "unit/general/pow_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_3_3(string solver) {
		var path = "unit/general/pow_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_3_4(string solver) {
		var path = "unit/general/pow_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_3_5(string solver) {
		var path = "unit/general/pow_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/pow_3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_pow_3_6(string solver) {
		var path = "unit/general/pow_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/test_negated_and.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_negated_and(string solver) {
		var path = "unit/general/test_negated_and.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/test_negated_and_or.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_negated_and_or(string solver) {
		var path = "unit/general/test_negated_and_or.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/test_negated_let_good_2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_negated_let_good_2(string solver) {
		var path = "unit/general/test_negated_let_good_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/test_negated_or.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_negated_or(string solver) {
		var path = "unit/general/test_negated_or.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/test_rounding_a.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_test_rounding_a(string solver) {
		var path = "unit/general/test_rounding_a.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/test_rounding_b.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_test_rounding_b(string solver) {
		var path = "unit/general/test_rounding_b.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/test_rounding_c.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_test_rounding_c(string solver) {
		var path = "unit/general/test_rounding_c.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/test_set_lt_1.mzn")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_set_lt_1(string solver) {
		var path = "unit/general/test_set_lt_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/general/test_set_lt_2.mzn")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_set_lt_2(string solver) {
		var path = "unit/general/test_set_lt_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test-opt-bool-2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_bool_2(string solver) {
		var path = "unit/optional/test-opt-bool-2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test-opt-bool-3.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_bool_3(string solver) {
		var path = "unit/optional/test-opt-bool-3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test-opt-bool-4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_bool_4(string solver) {
		var path = "unit/optional/test-opt-bool-4.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test-opt-bool-5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_bool_5(string solver) {
		var path = "unit/optional/test-opt-bool-5.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test-opt-bool-6.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_bool_6(string solver) {
		var path = "unit/optional/test-opt-bool-6.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test-opt-if-then-else.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_if_then_else(string solver) {
		var path = "unit/optional/test-opt-if-then-else.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test-opt-int-2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_test_opt_int_2(string solver) {
		var path = "unit/optional/test-opt-int-2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test-opt-int-3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_test_opt_int_3(string solver) {
		var path = "unit/optional/test-opt-int-3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test_if_then_else_opt_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_if_then_else_opt_bool(string solver) {
		var path = "unit/optional/test_if_then_else_opt_bool.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test_if_then_else_opt_float.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_test_if_then_else_opt_float(string solver) {
		var path = "unit/optional/test_if_then_else_opt_float.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test_if_then_else_opt_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_if_then_else_opt_int(string solver) {
		var path = "unit/optional/test_if_then_else_opt_int.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test_if_then_else_var_opt_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_if_then_else_var_opt_bool(string solver) {
		var path = "unit/optional/test_if_then_else_var_opt_bool.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test_if_then_else_var_opt_float.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_test_if_then_else_var_opt_float(string solver) {
		var path = "unit/optional/test_if_then_else_var_opt_float.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test_if_then_else_var_opt_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_if_then_else_var_opt_int(string solver) {
		var path = "unit/optional/test_if_then_else_var_opt_int.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test_optional_not_absent.mzn")]
	[InlineData("chuffed")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_test_optional_not_absent(string solver) {
		var path = "unit/optional/test_optional_not_absent.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test_opt_dom_empty.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_test_opt_dom_empty(string solver) {
		var path = "unit/optional/test_opt_dom_empty.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/optional/test_opt_dom_empty_no_absent_zero.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_test_opt_dom_empty_no_absent_zero(string solver) {
		var path = "unit/optional/test_opt_dom_empty_no_absent_zero.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/output/array_of_array.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_output_array_of_array(string solver) {
		var path = "unit/output/array_of_array.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/output/test-in-output.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_output_test_in_output(string solver) {
		var path = "unit/output/test-in-output.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/param_file/param_file_nested_object.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_param_file_param_file_nested_object(string solver) {
		var path = "unit/param_file/param_file_nested_object.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/arg-reif-array-float.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_arg_reif_array_float(string solver) {
		var path = "unit/regression/arg-reif-array-float.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/arg-reif-array-int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_arg_reif_array_int(string solver) {
		var path = "unit/regression/arg-reif-array-int.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/arg-reif-float.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_arg_reif_float(string solver) {
		var path = "unit/regression/arg-reif-float.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/arg-reif-int-set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_arg_reif_int_set(string solver) {
		var path = "unit/regression/arg-reif-int-set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/arg-reif-int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_arg_reif_int(string solver) {
		var path = "unit/regression/arg-reif-int.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/array_of_empty_sets.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_array_of_empty_sets(string solver) {
		var path = "unit/regression/array_of_empty_sets.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/bug131.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug131(string solver) {
		var path = "unit/regression/bug131.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/bug244.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug244(string solver) {
		var path = "unit/regression/bug244.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/flat_set_lit.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_flat_set_lit(string solver) {
		var path = "unit/regression/flat_set_lit.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/float_ceil_floor.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_float_ceil_floor(string solver) {
		var path = "unit/regression/float_ceil_floor.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/float_opt_crash.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_float_opt_crash(string solver) {
		var path = "unit/regression/float_opt_crash.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/github537.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github537(string solver) {
		var path = "unit/regression/github537.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/github_638_reduced.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_638_reduced(string solver) {
		var path = "unit/regression/github_638_reduced.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/github_639_part1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_639_part1(string solver) {
		var path = "unit/regression/github_639_part1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/github_695.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_695(string solver) {
		var path = "unit/regression/github_695.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/github_700_bad_sol.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_github_700_bad_sol(string solver) {
		var path = "unit/regression/github_700_bad_sol.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/github_716.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_716(string solver) {
		var path = "unit/regression/github_716.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/github_748.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_748(string solver) {
		var path = "unit/regression/github_748.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/github_748.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_748_2(string solver) {
		var path = "unit/regression/github_748.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/github_754.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_754(string solver) {
		var path = "unit/regression/github_754.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/github_766.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_766(string solver) {
		var path = "unit/regression/github_766.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/opt_noncontiguous_domain.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_opt_noncontiguous_domain(string solver) {
		var path = "unit/regression/opt_noncontiguous_domain.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/pow_undefined.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_pow_undefined(string solver) {
		var path = "unit/regression/pow_undefined.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/test_annotation_on_exists.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_annotation_on_exists(string solver) {
		var path = "unit/regression/test_annotation_on_exists.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/test_bug359.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_test_bug359(string solver) {
		var path = "unit/regression/test_bug359.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/test_bug54.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug54(string solver) {
		var path = "unit/regression/test_bug54.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/test_bug72.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug72(string solver) {
		var path = "unit/regression/test_bug72.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/test_bug_pred_arg.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_test_bug_pred_arg(string solver) {
		var path = "unit/regression/test_bug_pred_arg.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/regression/var_opt_unconstrained.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_var_opt_unconstrained(string solver) {
		var path = "unit/regression/var_opt_unconstrained.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/types/alias_extern_dom.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_alias_extern_dom(string solver) {
		var path = "unit/types/alias_extern_dom.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/types/struct_bind_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_bind_1(string solver) {
		var path = "unit/types/struct_bind_1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/types/struct_bind_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_bind_2(string solver) {
		var path = "unit/types/struct_bind_2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/types/test_any_enum_typeinstid.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_test_any_enum_typeinstid(string solver) {
		var path = "unit/types/test_any_enum_typeinstid.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/alldifferent_except_0/test_alldiff_except0b.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_alldifferent_except_0_test_alldiff_except0b(string solver) {
		var path = "unit/globals/alldifferent_except_0/test_alldiff_except0b.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/arg_max/globals_arg_max.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_max_globals_arg_max(string solver) {
		var path = "unit/globals/arg_max/globals_arg_max.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/arg_max/globals_arg_max_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_max_globals_arg_max_opt(string solver) {
		var path = "unit/globals/arg_max/globals_arg_max_opt.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/arg_max/globals_arg_max_opt_weak.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_max_globals_arg_max_opt_weak(string solver) {
		var path = "unit/globals/arg_max/globals_arg_max_opt_weak.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/arg_min/globals_arg_max_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_min_globals_arg_max_opt(string solver) {
		var path = "unit/globals/arg_min/globals_arg_max_opt.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/arg_min/globals_arg_min.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_min_globals_arg_min(string solver) {
		var path = "unit/globals/arg_min/globals_arg_min.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/arg_min/globals_arg_min_opt_weak.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_min_globals_arg_min_opt_weak(string solver) {
		var path = "unit/globals/arg_min/globals_arg_min_opt_weak.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/arg_val/arg_val_enum.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_val_arg_val_enum(string solver) {
		var path = "unit/globals/arg_val/arg_val_enum.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/bin_packing/globals_bin_packing.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_bin_packing_globals_bin_packing(string solver) {
		var path = "unit/globals/bin_packing/globals_bin_packing.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/bin_packing_capa/globals_bin_packing_capa.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_bin_packing_capa_globals_bin_packing_capa(string solver) {
		var path = "unit/globals/bin_packing_capa/globals_bin_packing_capa.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/circuit/test_circuit.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_circuit_test_circuit(string solver) {
		var path = "unit/globals/circuit/test_circuit.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/global_cardinality/globals_global_cardinality_low_up_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_globals_global_cardinality_low_up_set(string solver) {
		var path = "unit/globals/global_cardinality/globals_global_cardinality_low_up_set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/global_cardinality/globals_global_cardinality_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_globals_global_cardinality_opt(string solver) {
		var path = "unit/globals/global_cardinality/globals_global_cardinality_opt.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/global_cardinality/globals_global_cardinality_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_globals_global_cardinality_set(string solver) {
		var path = "unit/globals/global_cardinality/globals_global_cardinality_set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/global_cardinality_closed/globals_global_cardinality_closed_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_closed_globals_global_cardinality_closed_opt(string solver) {
		var path = "unit/globals/global_cardinality_closed/globals_global_cardinality_closed_opt.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/global_cardinality_closed/globals_global_cardinality_closed_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_closed_globals_global_cardinality_closed_set(string solver) {
		var path = "unit/globals/global_cardinality_closed/globals_global_cardinality_closed_set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/global_cardinality_closed/globals_global_cardinality_low_up_closed_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_closed_globals_global_cardinality_low_up_closed_opt(string solver) {
		var path = "unit/globals/global_cardinality_closed/globals_global_cardinality_low_up_closed_opt.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/global_cardinality_closed/globals_global_cardinality_low_up_closed_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_closed_globals_global_cardinality_low_up_closed_set(string solver) {
		var path = "unit/globals/global_cardinality_closed/globals_global_cardinality_low_up_closed_set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/inverse/inverse_opt.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_globals_inverse_inverse_opt(string solver) {
		var path = "unit/globals/inverse/inverse_opt.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/lex2/globals_lex2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_lex2_globals_lex2(string solver) {
		var path = "unit/globals/lex2/globals_lex2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/lex_greater/globals_lex_greater.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_lex_greater_globals_lex_greater(string solver) {
		var path = "unit/globals/lex_greater/globals_lex_greater.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/lex_greatereq/globals_lex_greatereq.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_lex_greatereq_globals_lex_greatereq(string solver) {
		var path = "unit/globals/lex_greatereq/globals_lex_greatereq.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/lex_less/test_bool_lex_less.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_lex_less_test_bool_lex_less(string solver) {
		var path = "unit/globals/lex_less/test_bool_lex_less.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/lex_lesseq/test_bool_lex_lesseq.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_lex_lesseq_test_bool_lex_lesseq(string solver) {
		var path = "unit/globals/lex_lesseq/test_bool_lex_lesseq.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/nvalue/globals_nvalue.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_nvalue_globals_nvalue(string solver) {
		var path = "unit/globals/nvalue/globals_nvalue.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/range/globals_range.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_range_globals_range(string solver) {
		var path = "unit/globals/range/globals_range.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/regular/globals_regular_regex_3.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_regular_globals_regular_regex_3(string solver) {
		var path = "unit/globals/regular/globals_regular_regex_3.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/regular/globals_regular_regex_5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_regular_globals_regular_regex_5(string solver) {
		var path = "unit/globals/regular/globals_regular_regex_5.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/roots/test_roots2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_roots_test_roots2(string solver) {
		var path = "unit/globals/roots/test_roots2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/strict_lex2/globals_strict_lex2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_strict_lex2_globals_strict_lex2(string solver) {
		var path = "unit/globals/strict_lex2/globals_strict_lex2.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/subcircuit/test_subcircuit.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_subcircuit_test_subcircuit(string solver) {
		var path = "unit/globals/subcircuit/test_subcircuit.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/table/globals_table_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_table_globals_table_opt(string solver) {
		var path = "unit/globals/table/globals_table_opt.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/value_precede/globals_value_precede_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_globals_value_precede_int(string solver) {
		var path = "unit/globals/value_precede/globals_value_precede_int.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/value_precede/globals_value_precede_int_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_globals_value_precede_int_opt(string solver) {
		var path = "unit/globals/value_precede/globals_value_precede_int_opt.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/value_precede/globals_value_precede_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_globals_value_precede_set(string solver) {
		var path = "unit/globals/value_precede/globals_value_precede_set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/value_precede_chain/globals_value_precede_chain_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_chain_globals_value_precede_chain_int(string solver) {
		var path = "unit/globals/value_precede_chain/globals_value_precede_chain_int.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/value_precede_chain/globals_value_precede_chain_int_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_chain_globals_value_precede_chain_int_opt(string solver) {
		var path = "unit/globals/value_precede_chain/globals_value_precede_chain_int_opt.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/value_precede_chain/globals_value_precede_chain_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_chain_globals_value_precede_chain_set(string solver) {
		var path = "unit/globals/value_precede_chain/globals_value_precede_chain_set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	[Theory(DisplayName="unit/globals/var_sqr_sym/globals_var_sqr_sym.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_var_sqr_sym_globals_var_sqr_sym(string solver) {
		var path = "unit/globals/var_sqr_sym/globals_var_sqr_sym.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied);
	}
	}