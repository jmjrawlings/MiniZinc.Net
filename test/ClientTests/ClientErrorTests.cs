/*
THIS FILE WAS GENERATED BY THE FOLLOWING COMMAND

dotnet run --project ./build/Make/Make.csproj --make-client-tests
*/
public class ClientClientErrorTestsTests : IClassFixture<ClientFixture> {
	private readonly MiniZincClient MiniZinc;
	private readonly ITestOutputHelper _output;
	public ClientIntegrationTests(ClientFixture fixture, ITestOutputHelper output){
		MiniZinc = fixture.Client;
		_output = output;
	}
	async Task Test(string path, string solver, string? errorMessage, string? errorRegex, params string[] args){
		_output.WriteLine(path);
		_output.WriteLine(new string('-',80));
		var model = Model.FromFile(path);
		_output.WriteLine(model.SourceText);
		_output.WriteLine(new string('-',80));
		foreach (var warn in model.Warnings) {
			_output.WriteLine(warn);
		}
		var options = SolveOptions.Create(solverId:solver);
		options = options.AddArgs(args);
		var result = await MiniZinc.Solve(model, options);
		result.IsSuccess.Should().BeFalse();
		if (errorRegex is not null) {
			result.Error.Should().MatchRegex(errorRegex);
		}
		else if (errorMessage is not null) {
			result.Error.Should().Be(errorMessage);
		}
	}
	[Theory(DisplayName="unit/compilation/assert_dbg_flag.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_compilation_assert_dbg_flag(string solver) {
		var path = "unit/compilation/assert_dbg_flag.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/compilation/time_limit.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_compilation_time_limit(string solver) {
		var path = "unit/compilation/time_limit.mzn";
		string? errorMessage = "time limit reached";
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/array_access_out_of_bounds_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_array_access_out_of_bounds_1(string solver) {
		var path = "unit/general/array_access_out_of_bounds_1.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*array access out of bounds, array `x' has index set A..B, but given index is C.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/array_access_out_of_bounds_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_array_access_out_of_bounds_2(string solver) {
		var path = "unit/general/array_access_out_of_bounds_2.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*array access out of bounds, array `x' is empty.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/array_access_record_out_of_bounds.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_array_access_record_out_of_bounds(string solver) {
		var path = "unit/general/array_access_record_out_of_bounds.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*array access out of bounds.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/array_access_tuple_out_of_bounds.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_array_access_tuple_out_of_bounds(string solver) {
		var path = "unit/general/array_access_tuple_out_of_bounds.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*array access out of bounds.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/enum_out_of_range_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_enum_out_of_range_1(string solver) {
		var path = "unit/general/enum_out_of_range_1.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*declared domain of `x' is {A}, but assigned value is B.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/enum_out_of_range_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_enum_out_of_range_2(string solver) {
		var path = "unit/general/enum_out_of_range_2.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*declared domain of `x' is {A}, but assigned value is {B}.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/function_param_out_of_range.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_function_param_out_of_range(string solver) {
		var path = "unit/general/function_param_out_of_range.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*declared domain of `'<unnamed argument>'' is 1..1, but assigned value is 2.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/function_return_out_of_range.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_function_return_out_of_range(string solver) {
		var path = "unit/general/function_return_out_of_range.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*result of function `foo' is B, which violates function type-inst {A}.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/function_return_out_of_range_opt.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_function_return_out_of_range_opt(string solver) {
		var path = "unit/general/function_return_out_of_range_opt.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*function result violates function type-inst, array contains value B which is not contained in {A}.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/param_out_of_range_float.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_param_out_of_range_float(string solver) {
		var path = "unit/general/param_out_of_range_float.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*declared domain of `x' is -infinity..-1.0 union 1.0..infinity, but assigned value is 0.0.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/param_out_of_range_int.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_param_out_of_range_int(string solver) {
		var path = "unit/general/param_out_of_range_int.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*declared domain of `x' is -infinity..-1 union 1..infinity, but assigned value is 0.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/general/stack_overflow.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_stack_overflow(string solver) {
		var path = "unit/general/stack_overflow.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*stack overflow.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/json/anon_enum_json.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_anon_enum_json_2(string solver) {
		var path = "unit/json/anon_enum_json.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*invalid enum object.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/json/coerce_enum_str_err.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_json_coerce_enum_str_err(string solver) {
		var path = "unit/json/coerce_enum_str_err.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*has invalid type-inst.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/param_file/param_file_blacklist.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_param_file_param_file_blacklist(string solver) {
		var path = "unit/param_file/param_file_blacklist.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*not allowed in configuration file.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/param_file/param_file_blacklist.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_param_file_param_file_blacklist_2(string solver) {
		var path = "unit/param_file/param_file_blacklist.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*not allowed in configuration file.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/param_file/param_file_recursive.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_param_file_param_file_recursive(string solver) {
		var path = "unit/param_file/param_file_recursive.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*Cyclic parameter configuration file.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/cyclic_include.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_cyclic_include(string solver) {
		var path = "unit/regression/cyclic_include.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/github_648_par_array_decl.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_648_par_array_decl(string solver) {
		var path = "unit/regression/github_648_par_array_decl.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*declared domain of `x[1]' is 1..3, but assigned value is 0.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/github_648_par_decl.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_648_par_decl(string solver) {
		var path = "unit/regression/github_648_par_decl.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*declared domain of `x' is 1..3, but assigned value is 0.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/github_656.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_656(string solver) {
		var path = "unit/regression/github_656.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*cannot coerce set into 2-dimensional array.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/github_680.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_680(string solver) {
		var path = "unit/regression/github_680.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/github_725.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_725(string solver) {
		var path = "unit/regression/github_725.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/github_730.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_730(string solver) {
		var path = "unit/regression/github_730.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/github_779.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_github_779(string solver) {
		var path = "unit/regression/github_779.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/non-set-array-ti-location.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_non_set_array_ti_location(string solver) {
		var path = "unit/regression/non-set-array-ti-location.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/output_only_no_rhs.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_output_only_no_rhs(string solver) {
		var path = "unit/regression/output_only_no_rhs.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/parser_location.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_parser_location(string solver) {
		var path = "unit/regression/parser_location.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/test_parout.mzn")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_regression_test_parout_2(string solver) {
		var path = "unit/regression/test_parout.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/regression/ti_error_location.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_ti_error_location(string solver) {
		var path = "unit/regression/ti_error_location.mzn";
		string? errorMessage = null;
		string? errorRegex = "^(?!unknown file:0.0).*$";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/alias_set_of_array.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_alias_set_of_array(string solver) {
		var path = "unit/types/alias_set_of_array.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/array_var_opt_set_comprehension.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_array_var_opt_set_comprehension(string solver) {
		var path = "unit/types/array_var_opt_set_comprehension.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/comprehension_of_absent_any_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_comprehension_of_absent_any_1(string solver) {
		var path = "unit/types/comprehension_of_absent_any_1.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/nested_type_inst_id.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_nested_type_inst_id(string solver) {
		var path = "unit/types/nested_type_inst_id.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*type-inst variable $X used in both array and non-array position.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/nonbool_constraint.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_nonbool_constraint(string solver) {
		var path = "unit/types/nonbool_constraint.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/nonbool_constraint_let.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_nonbool_constraint_let(string solver) {
		var path = "unit/types/nonbool_constraint_let.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/record_access_error.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_access_error(string solver) {
		var path = "unit/types/record_access_error.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/record_array_access_error.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_array_access_error(string solver) {
		var path = "unit/types/record_array_access_error.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/record_decl_error.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_decl_error(string solver) {
		var path = "unit/types/record_decl_error.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/record_ite_error.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_ite_error(string solver) {
		var path = "unit/types/record_ite_error.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/record_lit_dup.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_lit_dup(string solver) {
		var path = "unit/types/record_lit_dup.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/struct_index_sets_1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_index_sets_1(string solver) {
		var path = "unit/types/struct_index_sets_1.mzn";
		string? errorMessage = null;
		string? errorRegex = ".* Declared index set of `x.1' is [1..1], but is assigned to array with index set [2..2].*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/struct_index_sets_2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_index_sets_2(string solver) {
		var path = "unit/types/struct_index_sets_2.mzn";
		string? errorMessage = null;
		string? errorRegex = ".* Declared index set of `x.1' is [1..1], but is assigned to array with index set [2..2].*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/struct_return_ti_3.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_struct_return_ti_3(string solver) {
		var path = "unit/types/struct_return_ti_3.mzn";
		string? errorMessage = null;
		string? errorRegex = ".*function result violates function type-inst.*";
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/tuple_access_error1.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_access_error1(string solver) {
		var path = "unit/types/tuple_access_error1.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/tuple_access_error2.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_access_error2(string solver) {
		var path = "unit/types/tuple_access_error2.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/tuple_array_access_error.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_array_access_error(string solver) {
		var path = "unit/types/tuple_array_access_error.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/tuple_ite_error.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_ite_error(string solver) {
		var path = "unit/types/tuple_ite_error.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/var_ann_a.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_var_ann_a(string solver) {
		var path = "unit/types/var_ann_a.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/var_ann_b.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_var_ann_b(string solver) {
		var path = "unit/types/var_ann_b.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/var_ann_comprehension.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_var_ann_comprehension(string solver) {
		var path = "unit/types/var_ann_comprehension.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/var_opt_set_if_then_else.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_var_opt_set_if_then_else(string solver) {
		var path = "unit/types/var_opt_set_if_then_else.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/var_set_bool.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_var_set_bool(string solver) {
		var path = "unit/types/var_set_bool.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/var_set_float.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_var_set_float(string solver) {
		var path = "unit/types/var_set_float.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/var_set_float_comprehension.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_var_set_float_comprehension(string solver) {
		var path = "unit/types/var_set_float_comprehension.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/var_string_a.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_var_string_a(string solver) {
		var path = "unit/types/var_string_a.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/var_string_b.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_var_string_b(string solver) {
		var path = "unit/types/var_string_b.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	[Theory(DisplayName="unit/types/var_string_comprehension.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_var_string_comprehension(string solver) {
		var path = "unit/types/var_string_comprehension.mzn";
		string? errorMessage = null;
		string? errorRegex = null;
		await Test(path, solver, errorMessage, errorRegex);
	}
	}