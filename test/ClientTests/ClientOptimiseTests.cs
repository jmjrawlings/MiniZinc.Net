/*
THIS FILE WAS GENERATED BY THE FOLLOWING COMMAND

dotnet run --project ./build/Make/Make.csproj --make-client-tests
*/
public class ClientOptimiseTests : IClassFixture<ClientFixture> {
	private readonly MiniZincClient MiniZinc;
	private readonly ITestOutputHelper _output;
	public ClientOptimiseTests(ClientFixture fixture, ITestOutputHelper output){
		MiniZinc = fixture.Client;
		_output = output;
	}
	[Theory(DisplayName="unit/division/test_div12.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_division_test_div12(string solver) {
		var path = "unit/division/test_div12.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "aCostSupport = 0;mdl8_Z = 0;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/infinite_domain_bind.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_general_infinite_domain_bind(string solver) {
		var path = "unit/general/infinite_domain_bind.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "x = 10;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/test-search1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_general_test_search1(string solver) {
		var path = "unit/general/test-search1.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "x = 3;y = 8;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/test_times_int_float_eq.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_general_test_times_int_float_eq(string solver) {
		var path = "unit/general/test_times_int_float_eq.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "objective = -5;x = 5;y = 6;z = 30;xf = 5;yf = 6;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/general/test_times_int_float_eq__defaultopt.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_general_test_times_int_float_eq__defaultopt(string solver) {
		var path = "unit/general/test_times_int_float_eq__defaultopt.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "objective = -5;x = 5;y = 6;z = 30;xf = 5;yf = 6;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/on_restart/complete.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_complete(string solver) {
		var path = "unit/on_restart/complete.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "x = 3;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/on_restart/last_val_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_bool(string solver) {
		var path = "unit/on_restart/last_val_bool.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "x = 4;y = true;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/on_restart/last_val_float.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_on_restart_last_val_float(string solver) {
		var path = "unit/on_restart/last_val_float.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "x = 4;y = 0.85;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/on_restart/last_val_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_int(string solver) {
		var path = "unit/on_restart/last_val_int.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "x = 4;y = 3;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/on_restart/last_val_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_set(string solver) {
		var path = "unit/on_restart/last_val_set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "x = 4;y = {1,2,4,8};";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/on_restart/sol_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_bool(string solver) {
		var path = "unit/on_restart/sol_bool.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "x = 3;is_even = false;y = true;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/on_restart/sol_float.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_on_restart_sol_float(string solver) {
		var path = "unit/on_restart/sol_float.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "x = 3;y = 2;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/on_restart/sol_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_int(string solver) {
		var path = "unit/on_restart/sol_int.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "x = 3;y = 2;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/on_restart/sol_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_set(string solver) {
		var path = "unit/on_restart/sol_set.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "x = {};y = {1};";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/regression/ts_bug.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_regression_ts_bug(string solver) {
		var path = "unit/regression/ts_bug.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "cost = 48;s = [4,1,2,3,6,5];dur = [{2,4},{1,2,4},{1,3,4},{1,3,4},{1,3},{1,3}];bef = [{},{2,4},{1,2,4},{1,2,3,4},{1,2,3,4},{1,2,3,4}];aft = [{1,2,3,4},{1,2,3,4},{1,3,4},{1,3,4},{1,3},{}];a = [{1,2},{2,3},{3,4},{2,4},{1,3},{1,4}];";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		expected = "cost = 48;s = [4,1,2,3,6,5];dur = [{2,4},{1,2,4},{1,3,4},{1,3,4},{1,3},{1,3}];bef = [{},{2,4},{1,2,4},1..4,1..4,1..4];aft = [1..4,1..4,{1,3,4},{1,3,4},{1,3},{}];a = [1..2,2..3,3..4,{2,4},{1,3},{1,4}];";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		expected = "cost = 48;s = [5,3,2,1,4,6];dur = [{1,3},{1,3,4},{1,2,4},{1,2,4},{1,4},{1,4}];bef = [{},{1,3},{1,3,4},1..4,1..4,1..4];aft = [1..4,1..4,{1,2,4},{1,2,4},{1,4},{}];a = [1..2,2..3,3..4,{2,4},{1,3},{1,4}];";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		expected = "cost = 48;s = [4,1,2,3,5,6];dur = [{2,4},{1,2,4},{1,3,4},{1,3,4},{1,4},{1,4}];bef = [{},{2,4},{1,2,4},1..4,1..4,1..4];aft = [1..4,1..4,{1,3,4},{1,3,4},{1,4},{}];a = [1..2,2..3,3..4,{2,4},{1,3},{1,4}];";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/record_var_element.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_record_var_element(string solver) {
		var path = "unit/types/record_var_element.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "idx = iE;selected = (a:6,b:(c:3,d:3));";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="unit/types/tuple_var_element.mzn")]
	[InlineData("gecode")]
	public async Task test_solve_unit_types_tuple_var_element(string solver) {
		var path = "unit/types/tuple_var_element.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "idx = iE;selected = [6,[3,3]];";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	[Theory(DisplayName="examples/radiation.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_radiation(string solver) {
		var path = "examples/radiation.mzn";
		var solution = await Solve(model, options, SolveStatus.Satisfied, SolveStatus.Optimal);
		string expected;
		expected = "Beamtime = 21;K = 7;N = [2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q = [[[0,1,0,0,1,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,0,0,0,0,0,0,0,0,0],[0,0,1,0,1,0,0,0,0,0,0,0,0,0],[1,0,1,0,1,0,0,0,0,0,0,0,0,0]],[[1,0,1,1,1,0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,1,0,0,1,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,1,0,0,0,0,0,0,0,0,0],[0,1,0,0,2,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[2,1,1,1,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,2,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,0,0,0],[2,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,2,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[2,1,0,1,0,0,0,0,0,0,0,0,0,0],[2,1,1,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0]]];objective = 175;";
		if (solution.DataString!.Equals(expected)) {
			return;
		}
		Assert.Fail("Solution did not match any of the expected results");
	}
	}