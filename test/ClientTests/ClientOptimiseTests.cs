/*
<auto-generated>
This file has been auto generated by the following command:
dotnet run --project ./build/Make/Make.csproj --make-client-tests
</auto-generated>
*/
#nullable enable

public class ClientOptimiseTests : IClassFixture<ClientFixture>
{
	private readonly MiniZincClient MiniZinc;
	private readonly ITestOutputHelper _output;

	public ClientOptimiseTests(ClientFixture fixture, ITestOutputHelper output)
	{
		MiniZinc = fixture.MiniZinc;
		_output = output;
	}

	async Task Test(string path, string solver, string expected, params string[] args)
	{
		_output.WriteLine(path);
		_output.WriteLine(new string('-',80));
		var model = Model.FromFile(path);
		_output.WriteLine(model.SourceText);
		_output.WriteLine(new string('-',80));

		var options = SolveOptions.Create(solverId:solver).AddArgs(args);

		var result = await MiniZinc.Solve(model, options);
		result.IsSuccess.Should().BeTrue();
		result.Status.Should().Be(SolveStatus.Optimal);
		result.DataString.Should().Be(expected);

	}

	[Fact(DisplayName="unit/division/test_div12.mzn")]
	public async Task test_solve_unit_division_test_div12()
	{
		var path = "unit/division/test_div12.mzn";
		var solver = "gecode";
		var expected = """"aCostSupport=0;mdl8_Z=0;"""";
		await Test(path, solver, expected);
	}

	[Fact(DisplayName="unit/general/infinite_domain_bind.mzn")]
	public async Task test_solve_unit_general_infinite_domain_bind()
	{
		var path = "unit/general/infinite_domain_bind.mzn";
		var solver = "gecode";
		var expected = """"x=10;"""";
		await Test(path, solver, expected);
	}

	[Theory(DisplayName="unit/general/test-search1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_general_test_search1(string solver)
	{
		var path = "unit/general/test-search1.mzn";
		var expected = """"x=3;y=8;"""";
		await Test(path, solver, expected);
	}

	[Theory(DisplayName="unit/general/test_times_int_float_eq.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_general_test_times_int_float_eq(string solver)
	{
		var path = "unit/general/test_times_int_float_eq.mzn";
		var expected = """"objective=-5;x=5;y=6;z=30;xf=5;yf=6;"""";
		await Test(path, solver, expected,"-D QuadrFloat=true;QuadrIntCard=0");
	}

	[Theory(DisplayName="unit/general/test_times_int_float_eq__defaultopt.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_general_test_times_int_float_eq__defaultopt(string solver)
	{
		var path = "unit/general/test_times_int_float_eq__defaultopt.mzn";
		var expected = """"objective=-5;x=5;y=6;z=30;xf=5;yf=6;"""";
		await Test(path, solver, expected);
	}

	[Theory(DisplayName="unit/on_restart/complete.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_complete(string solver)
	{
		var path = "unit/on_restart/complete.mzn";
		var expected = """"x=3;"""";
		await Test(path, solver, expected,"--restart constant","--restart-base 100");
	}

	[Theory(DisplayName="unit/on_restart/last_val_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_bool(string solver)
	{
		var path = "unit/on_restart/last_val_bool.mzn";
		var expected = """"x=4;y=true;"""";
		await Test(path, solver, expected,"--restart constant","--restart-base 100");
	}

	[Fact(DisplayName="unit/on_restart/last_val_float.mzn")]
	public async Task test_solve_unit_on_restart_last_val_float()
	{
		var path = "unit/on_restart/last_val_float.mzn";
		var solver = "gecode";
		var expected = """"x=4;y=0.85;"""";
		await Test(path, solver, expected,"--restart constant","--restart-base 100");
	}

	[Theory(DisplayName="unit/on_restart/last_val_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_int(string solver)
	{
		var path = "unit/on_restart/last_val_int.mzn";
		var expected = """"x=4;y=3;"""";
		await Test(path, solver, expected,"--restart constant","--restart-base 100");
	}

	[Theory(DisplayName="unit/on_restart/last_val_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_set(string solver)
	{
		var path = "unit/on_restart/last_val_set.mzn";
		var expected = """"x=4;y={1,2,4,8};"""";
		await Test(path, solver, expected,"--restart constant","--restart-base 100");
	}

	[Theory(DisplayName="unit/on_restart/sol_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_bool(string solver)
	{
		var path = "unit/on_restart/sol_bool.mzn";
		var expected = """"x=3;is_even=false;y=true;"""";
		await Test(path, solver, expected,"--restart constant","--restart-base 100");
	}

	[Fact(DisplayName="unit/on_restart/sol_float.mzn")]
	public async Task test_solve_unit_on_restart_sol_float()
	{
		var path = "unit/on_restart/sol_float.mzn";
		var solver = "gecode";
		var expected = """"x=3;y=2;"""";
		await Test(path, solver, expected,"--restart constant","--restart-base 100");
	}

	[Theory(DisplayName="unit/on_restart/sol_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_int(string solver)
	{
		var path = "unit/on_restart/sol_int.mzn";
		var expected = """"x=3;y=2;"""";
		await Test(path, solver, expected,"--restart constant","--restart-base 100");
	}

	[Theory(DisplayName="unit/on_restart/sol_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_set(string solver)
	{
		var path = "unit/on_restart/sol_set.mzn";
		var expected = """"x={};y={1};"""";
		await Test(path, solver, expected,"--restart constant","--restart-base 100");
	}

	[Fact(DisplayName="unit/regression/ts_bug.mzn")]
	public async Task test_solve_unit_regression_ts_bug()
	{
		var path = "unit/regression/ts_bug.mzn";
		var solver = "gecode";
		var expected = """"cost=48;s=[4,1,2,3,6,5];dur=[{2,4},{1,2,4},{1,3,4},{1,3,4},{1,3},{1,3}];bef=[{},{2,4},{1,2,4},{1,2,3,4},{1,2,3,4},{1,2,3,4}];aft=[{1,2,3,4},{1,2,3,4},{1,3,4},{1,3,4},{1,3},{}];a=[{1,2},{2,3},{3,4},{2,4},{1,3},{1,4}];"""";
		await Test(path, solver, expected);
	}

	[Fact(DisplayName="unit/types/record_var_element.mzn")]
	public async Task test_solve_unit_types_record_var_element()
	{
		var path = "unit/types/record_var_element.mzn";
		var solver = "gecode";
		var expected = """"idx=iE;selected=(a: 6, b: (c: 3, d: 3));"""";
		await Test(path, solver, expected);
	}

	[Fact(DisplayName="unit/types/tuple_var_element.mzn")]
	public async Task test_solve_unit_types_tuple_var_element()
	{
		var path = "unit/types/tuple_var_element.mzn";
		var solver = "gecode";
		var expected = """"idx=iE;selected=[6,[3,3]];"""";
		await Test(path, solver, expected);
	}

	[Theory(DisplayName="examples/radiation.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_radiation(string solver)
	{
		var path = "examples/radiation.mzn";
		var expected = """"Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[[[0,1,0,0,1,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,0,0,0,0,0,0,0,0,0],[0,0,1,0,1,0,0,0,0,0,0,0,0,0],[1,0,1,0,1,0,0,0,0,0,0,0,0,0]],[[1,0,1,1,1,0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,1,0,0,1,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,1,0,0,0,0,0,0,0,0,0],[0,1,0,0,2,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[2,1,1,1,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,2,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,0,0,0],[2,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,2,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[2,1,0,1,0,0,0,0,0,0,0,0,0,0],[2,1,1,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0]]];objective=175;"""";
		await Test(path, solver, expected);
	}

}

