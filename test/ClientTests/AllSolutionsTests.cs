/*
<auto-generated>
This file has been auto generated by the following command:
dotnet run --project ./build/Make/Make.csproj --make-client-tests
</auto-generated>
*/
#nullable enable

public class AllSolutionsTests : IClassFixture<ClientFixture>
{
	private readonly MiniZincClient MiniZinc;
	private readonly ITestOutputHelper _output;

	public AllSolutionsTests(ClientFixture fixture, ITestOutputHelper output)
	{
		MiniZinc = fixture.MiniZinc;
		_output = output;
	}

	async Task TestAllSolutions(string path, string solver, List<string> solutions, List<string> args)
	{
		_output.WriteLine(path);
		_output.WriteLine(new string('-',80));

		var model = Model.FromFile(path);
		_output.WriteLine(model.SourceText);
		_output.WriteLine(new string('-',80));

		var options = SolveOptions.Create(solverId:solver).AddArgs(args);;

		var result = await MiniZinc.Solve(model, options);
		_output.WriteLine(result.Command);
		result.IsSuccess.Should().BeTrue();
		foreach (var dzn in solutions)
		{
			var parsed = Parser.ParseDataString(dzn, out var data);;
			parsed.Ok.Should().BeTrue();
			if (!result.Data.Equals(data))
			{
				_output.WriteLine("EXPECTED:");
				_output.WriteLine(data.Write());
				_output.WriteLine("");
				_output.WriteLine("ACTUAL");
				_output.WriteLine(result.Data.Write());
				_output.WriteLine(new string('-',80));
				Assert.Fail("The result was not expected");
			}

		}

	}

	[Theory(DisplayName="unit/test-globals-float.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_test_globals_float(string solver)
	{
		var path = "unit/test-globals-float.mzn";
		var solutions = new List<string> {
			"inc_avf=[1.0,2.0,2.0];min_vf1=0.0;min_vf2=0.0;max_vf1=9.9;max_vf2=0.0;",
			"inc_avf=[1.0,2.0,2.0];min_vf1=0.0;min_vf2=0.0;max_vf1=9.9;max_vf2=9.9;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/compilation/annotate_bool_literal.mzn")]
	public async Task test_solve_unit_compilation_annotate_bool_literal()
	{
		var path = "unit/compilation/annotate_bool_literal.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/compilation/assert_dbg_ignore.mzn")]
	public async Task test_solve_unit_compilation_assert_dbg_ignore()
	{
		var path = "unit/compilation/assert_dbg_ignore.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/compilation/debug_mode_false.mzn")]
	public async Task test_solve_unit_compilation_debug_mode_false()
	{
		var path = "unit/compilation/debug_mode_false.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"b=false;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/compilation/debug_mode_true.mzn")]
	public async Task test_solve_unit_compilation_debug_mode_true()
	{
		var path = "unit/compilation/debug_mode_true.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"b=true;",
			};
		var args = new List<string>{
			"--debug",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/compilation/has_ann.mzn")]
	public async Task test_solve_unit_compilation_has_ann()
	{
		var path = "unit/compilation/has_ann.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"b=true;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/compilation/if_then_no_else.mzn")]
	public async Task test_solve_unit_compilation_if_then_no_else()
	{
		var path = "unit/compilation/if_then_no_else.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"b=true;s=;x=[];y=[];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/compilation/set2iter.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_compilation_set2iter(string solver)
	{
		var path = "unit/compilation/set2iter.mzn";
		var solutions = new List<string> {
			"x=(range: 2..3);y=(range: 4..5);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/division/test_div10.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_division_test_div10(string solver)
	{
		var path = "unit/division/test_div10.mzn";
		var solutions = new List<string> {
			"y=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/division/test_div11.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_division_test_div11(string solver)
	{
		var path = "unit/division/test_div11.mzn";
		var solutions = new List<string> {
			"y=0;",
			"y=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/division/test_div8.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_division_test_div8(string solver)
	{
		var path = "unit/division/test_div8.mzn";
		var solutions = new List<string> {
			"y=0;",
			"y=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/division/test_div_mod_bounds.mzn")]
	[InlineData("gecode")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_division_test_div_mod_bounds(string solver)
	{
		var path = "unit/division/test_div_mod_bounds.mzn";
		var solutions = new List<string> {
			"x=20;y=-3;z=-6;zbnd=[-20,20];zfbnd=[0.15,1.333333333333333];zif=-6.666666666666667;tf=1.0;tfbnd=[0.1125,8.888888888888889];zmbnd=[0,6];zm2lb=0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/division/test_fldiv_01.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_division_test_fldiv_01(string solver)
	{
		var path = "unit/division/test_fldiv_01.mzn";
		var solutions = new List<string> {
			"x=0.3;y=2.0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/division/test_fldiv_02.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_division_test_fldiv_02(string solver)
	{
		var path = "unit/division/test_fldiv_02.mzn";
		var solutions = new List<string> {
			"x=2.0;y=1.5;z=1.5;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/fznjson/fznjson-basic.mzn")]
	public async Task test_solve_unit_fznjson_fznjson_basic()
	{
		var path = "unit/fznjson/fznjson-basic.mzn";
		var solver = "fznjson.msc";
		var solutions = new List<string>();
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/annotated_expression_1.mzn")]
	public async Task test_solve_unit_general_annotated_expression_1()
	{
		var path = "unit/general/annotated_expression_1.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=3;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/array_param_non_array_return.mzn")]
	public async Task test_solve_unit_general_array_param_non_array_return()
	{
		var path = "unit/general/array_param_non_array_return.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[1];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/array_union_intersect_enum.mzn")]
	public async Task test_solve_unit_general_array_union_intersect_enum()
	{
		var path = "unit/general/array_union_intersect_enum.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[{A},{B},{C}];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/bin_pack_multiobj.mzn", Skip="Solver not supported")]
	public async Task test_solve_unit_general_bin_pack_multiobj()
	{
		var path = "unit/general/bin_pack_multiobj.mzn";
		var solver = "gurobi";
		var solutions = new List<string> {
			"load=[3,8,10];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/builtins_arg_max.mzn")]
	public async Task test_solve_unit_general_builtins_arg_max()
	{
		var path = "unit/general/builtins_arg_max.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"bool_output=3;int_output=1;float_output=2;indexed_output=4;enumed_output=TWO;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/builtins_debug.mzn")]
	public async Task test_solve_unit_general_builtins_debug()
	{
		var path = "unit/general/builtins_debug.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"assert_par_int=1;assert_var_int=2;assert_par_opt_int=3;assert_var_opt_int=4;assert_array_of_par_int=[1];assert_array_of_var_int=[2];assert_array_of_par_opt_int=[3];assert_array_of_var_opt_int=[4];trace_par_int=1;trace_var_int=2;trace_par_opt_int=3;trace_var_opt_int=4;trace_array_of_par_int=[1];trace_array_of_var_int=[2];trace_array_of_par_opt_int=[3];trace_array_of_var_opt_int=[4];logstream=trace_logstream_par_int\ntrace_logstream_var_int\ntrace_logstream_par_opt_int\ntrace_logstream_var_opt_int\ntrace_logstream_array_of_par_int\ntrace_logstream_array_of_var_int\ntrace_logstream_array_of_par_opt_int\ntrace_logstream_array_of_var_opt_int\n;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/comprehension_cv_struct.mzn")]
	public async Task test_solve_unit_general_comprehension_cv_struct()
	{
		var path = "unit/general/comprehension_cv_struct.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;z=[<>];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/enum_constructor_quoting.mzn")]
	public async Task test_solve_unit_general_enum_constructor_quoting()
	{
		var path = "unit/general/enum_constructor_quoting.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"'Q~'('F!'('\"'))\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/eval_par_opt_set.mzn")]
	public async Task test_solve_unit_general_eval_par_opt_set()
	{
		var path = "unit/general/eval_par_opt_set.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=<>;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/fix_struct.mzn")]
	public async Task test_solve_unit_general_fix_struct()
	{
		var path = "unit/general/fix_struct.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=(a: [[[1]]], b: 1);y=(a: [[[1]]], b: 1);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/fn_par_array_undefined.mzn")]
	public async Task test_solve_unit_general_fn_par_array_undefined()
	{
		var path = "unit/general/fn_par_array_undefined.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[2];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/json_ignore.mzn")]
	public async Task test_solve_unit_general_json_ignore()
	{
		var path = "unit/general/json_ignore.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_checker=\"data_2 = 2;\n\";data_1=1;",
			};
		var args = new List<string>{
			"--data \"unit/general/json_ignore.mzc.mzn\"",
			"--data \"unit/general/json_ignore.json\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/md_exists.mzn")]
	public async Task test_solve_unit_general_md_exists_2()
	{
		var path = "unit/general/md_exists.mzn";
		var solver = "coin-bc";
		var solutions = new List<string> {
			"b=true;bs=[[[true,true],[false,false]],[[false,false],[false,false]]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/general/md_forall.mzn")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_forall_2(string solver)
	{
		var path = "unit/general/md_forall.mzn";
		var solutions = new List<string> {
			"b=true;bs=[[[true,true],[true,true]],[[true,true],[true,true]]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/md_iffall.mzn")]
	public async Task test_solve_unit_general_md_iffall_2()
	{
		var path = "unit/general/md_iffall.mzn";
		var solver = "coin-bc";
		var solutions = new List<string> {
			"b=false;bs=[[[false,false],[false,false]],[[false,false],[false,false]]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/md_sum_float.mzn")]
	public async Task test_solve_unit_general_md_sum_float_2()
	{
		var path = "unit/general/md_sum_float.mzn";
		var solver = "chuffed";
		var solutions = new List<string> {
			"a=55.0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/missing_ozn_decl.mzn")]
	public async Task test_solve_unit_general_missing_ozn_decl()
	{
		var path = "unit/general/missing_ozn_decl.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"I1=7;B2=true;B3=true;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/general/mortgage.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_general_mortgage(string solver)
	{
		var path = "unit/general/mortgage.mzn";
		var solutions = new List<string> {
			"P=373.0277986476333;mortgage=[260.3305785123967,136.3636363636363,0.0];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/general/nosets_empty.mzn")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_nosets_empty(string solver)
	{
		var path = "unit/general/nosets_empty.mzn";
		var solutions = new List<string> {
			"x={};",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/overload_bottom.mzn")]
	public async Task test_solve_unit_general_overload_bottom()
	{
		var path = "unit/general/overload_bottom.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x={};",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/quoted_id_1.mzn")]
	public async Task test_solve_unit_general_quoted_id_1()
	{
		var path = "unit/general/quoted_id_1.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"hello!=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/quoted_id_2.mzn")]
	public async Task test_solve_unit_general_quoted_id_2()
	{
		var path = "unit/general/quoted_id_2.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/quoted_id_3.mzn")]
	public async Task test_solve_unit_general_quoted_id_3()
	{
		var path = "unit/general/quoted_id_3.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"A?\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/quoted_id_4.mzn")]
	public async Task test_solve_unit_general_quoted_id_4()
	{
		var path = "unit/general/quoted_id_4.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"Foo~(A?)\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/range_var_enum.mzn")]
	public async Task test_solve_unit_general_range_var_enum()
	{
		var path = "unit/general/range_var_enum.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x_to_y={AB,C};",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/struct_flat_cv_path.mzn")]
	public async Task test_solve_unit_general_struct_flat_cv_path()
	{
		var path = "unit/general/struct_flat_cv_path.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=2;b=1;c=[[1,2],[3,4]];",
			};
		var args = new List<string>{
			"--keep-paths",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/test_mod_bounds.mzn")]
	public async Task test_solve_unit_general_test_mod_bounds()
	{
		var path = "unit/general/test_mod_bounds.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"b=(range: 0..2);c=(range: -2..2);d=(range: -2..0);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/general/test_queens.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_queens(string solver)
	{
		var path = "unit/general/test_queens.mzn";
		var solutions = new List<string> {
			"q=[9,13,2,8,11,20,10,6,19,15,18,12,7,16,4,17,14,5,3,1];",
			"q=[9,7,10,14,11,15,4,12,5,13,1,3,6,8,2,17,19,16,18,20];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/general/test_same.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_general_test_same(string solver)
	{
		var path = "unit/general/test_same.mzn";
		var solutions = new List<string> {
			"if5_5=1;if5f_5=0;if5_4=0;if5f_5f=1;if2_set2_4=0;ifTwoVars=0;ifTwoOptVars=0;ifEqualInitVars=1;ifEqualChainInitVars=1;ifOneVar=1;ifOneOptVar=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/test_set_lt_2.mzn")]
	public async Task test_solve_unit_general_test_set_lt_2_2()
	{
		var path = "unit/general/test_set_lt_2.mzn";
		var solver = "coin-bc";
		var solutions = new List<string> {
			"sets=[{},{1},(range: 1..2),(range: 1..3),{13},{2},(range: 2..3),{3}];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/general/test_set_lt_3.mzn")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_general_test_set_lt_3(string solver)
	{
		var path = "unit/general/test_set_lt_3.mzn";
		var solutions = new List<string> {
			"y={14};",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/general/test_to_enum.mzn")]
	public async Task test_solve_unit_general_test_to_enum()
	{
		var path = "unit/general/test_to_enum.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"par_int=b;var_int=c;array_of_int=[a,b,c];array_of_var_int=[a,b,c];array_of_set_of_int=[{a},{ab},{ab,c}];array_of_var_set_of_int=[{a},{ab},{ab,c}];set_of_int={ab,c};var_set_of_int={ab,c};",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/general/test_var_prod.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_var_prod(string solver)
	{
		var path = "unit/general/test_var_prod.mzn";
		var solutions = new List<string> {
			"p=1;xs=[1,1,1,1];",
			"p=140;xs=[2,7,10,1];",
			"p=700;xs=[10,10,7,1];",
			"p=1000;xs=[1,10,10,10];",
			"p=1000;xs=[10,10,1,10];",
			"p=1000;xs=[10,10,10,1];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/general/test_var_set_element.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_general_test_var_set_element(string solver)
	{
		var path = "unit/general/test_var_set_element.mzn";
		var solutions = new List<string> {
			"a=[{},{},{}];s={};x=3;",
			"a=[(range: 1..5),(range: 1..5),(range: 1..5)];s=(range: 1..5);x=2;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/json/anon_enum_json.mzn")]
	public async Task test_solve_unit_json_anon_enum_json()
	{
		var path = "unit/json/anon_enum_json.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=(enumName: Foo, value: 1);y=(enumName: Foo, value: 2);",
			};
		var args = new List<string>{
			"--data \"unit/json/anon_enum_json.json\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/json/enum_constructor_basic.mzn")]
	public async Task test_solve_unit_json_enum_constructor_basic()
	{
		var path = "unit/json/enum_constructor_basic.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=(constructor: F, argument: A);",
			};
		var args = new List<string>{
			"--data \"unit/json/enum_constructor_basic.json\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/json/enum_constructor_basic_2.mzn")]
	public async Task test_solve_unit_json_enum_constructor_basic_2()
	{
		var path = "unit/json/enum_constructor_basic_2.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=(constructor: F, argument: A);",
			};
		var args = new List<string>{
			"--data \"unit/json/enum_constructor_basic_2.json\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/json/enum_constructor_int.mzn")]
	public async Task test_solve_unit_json_enum_constructor_int()
	{
		var path = "unit/json/enum_constructor_int.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=(constructor: Foo, argument: 2);",
			};
		var args = new List<string>{
			"--data \"unit/json/enum_constructor_int.json\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/json/enum_constructor_nested.mzn")]
	public async Task test_solve_unit_json_enum_constructor_nested()
	{
		var path = "unit/json/enum_constructor_nested.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=(constructor: G, argument: (constructor: F, argument: A));",
			};
		var args = new List<string>{
			"--data \"unit/json/enum_constructor_nested.json\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/json/enum_escaping.mzn")]
	public async Task test_solve_unit_json_enum_escaping()
	{
		var path = "unit/json/enum_escaping.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=\"\"\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/json/float_json_exponent.mzn")]
	public async Task test_solve_unit_json_float_json_exponent()
	{
		var path = "unit/json/float_json_exponent.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=2.0e-05;y=1500.0;",
			};
		var args = new List<string>{
			"--data \"unit/json/float_json_exponent.json\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/json/json_enum_def.mzn")]
	public async Task test_solve_unit_json_json_enum_def()
	{
		var path = "unit/json/json_enum_def.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"w=A;x=D;y=G;z=J;",
			};
		var args = new List<string>{
			"--data \"unit/json/json_enum_def.json\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/json/json_input_1.mzn")]
	public async Task test_solve_unit_json_json_input_1()
	{
		var path = "unit/json/json_input_1.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"int_set={12,4,5,7,9};float_set={1.02.0};array_1d_float=[1.0,2.0,3.0];array_2d_bool=[[true]];array_3d_int=[[[1,2],[3,4]],[[5,6],[7,8]]];array_opt_float=[1.5,<>];x=1;y=2.0;z=true;o=<>;",
			};
		var args = new List<string>{
			"--data \"unit/json/json_input_1.json\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/json/json_unicode_escapes.mzn")]
	public async Task test_solve_unit_json_json_unicode_escapes()
	{
		var path = "unit/json/json_unicode_escapes.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=\"A\";mu=μ;arrow=↑;clef=𝄞;",
			};
		var args = new List<string>{
			"--data \"unit/json/json_unicode_escapes.json\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/json/mult_dim_enum.mzn")]
	public async Task test_solve_unit_json_mult_dim_enum()
	{
		var path = "unit/json/mult_dim_enum.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"use_e=[[A,B],[B,C]];",
			};
		var args = new List<string>{
			"--data \"unit/json/mult_dim_enum.json\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/optional/fn_return_array_absent.mzn")]
	public async Task test_solve_unit_optional_fn_return_array_absent()
	{
		var path = "unit/optional/fn_return_array_absent.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[<>];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/optional/test-opt-float-1.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_optional_test_opt_float_1(string solver)
	{
		var path = "unit/optional/test-opt-float-1.mzn";
		var solutions = new List<string> {
			"x=[1.0,<>];",
			"x=[<>,1.0];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/optional/test_count_set.mzn")]
	public async Task test_solve_unit_optional_test_count_set()
	{
		var path = "unit/optional/test_count_set.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"i=0;x=(range: 6..10);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/optional/test_deopt_absent.mzn")]
	public async Task test_solve_unit_optional_test_deopt_absent()
	{
		var path = "unit/optional/test_deopt_absent.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"b=true;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/optional/test_opt_comprehension.mzn")]
	public async Task test_solve_unit_optional_test_opt_comprehension()
	{
		var path = "unit/optional/test_opt_comprehension.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"z=[false,false,false];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/arg-reif-output.mzn")]
	public async Task test_solve_unit_output_arg_reif_output()
	{
		var path = "unit/output/arg-reif-output.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=WORKED;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/ctx_ann.mzn")]
	public async Task test_solve_unit_output_ctx_ann()
	{
		var path = "unit/output/ctx_ann.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"c=5;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/format_justified_enums.mzn")]
	public async Task test_solve_unit_output_format_justified_enums()
	{
		var path = "unit/output/format_justified_enums.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\">      [Hello, World]<\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/json_ann.mzn")]
	public async Task test_solve_unit_output_json_ann()
	{
		var path = "unit/output/json_ann.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=\"promise_total\";y=expression_name(\"test\");",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/json_multidim.mzn")]
	public async Task test_solve_unit_output_json_multidim()
	{
		var path = "unit/output/json_multidim.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"[[{\"e\":\"A\"}, {\"e\":\"B\"}], [{\"e\":\"C\"}, {\"e\":\"D\"}]] [[{\"e\":\"A\"}, {\"e\":\"B\"}], [{\"e\":\"C\"}, {\"e\":\"D\"}]]\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/local_output.mzn")]
	public async Task test_solve_unit_output_local_output()
	{
		var path = "unit/output/local_output.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=[[[1]]];x@14.5-28|a@13.6=[[[1]]];_output_item=predicate: [1];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/no_output_reverse_mapped_var.mzn")]
	public async Task test_solve_unit_output_no_output_reverse_mapped_var()
	{
		var path = "unit/output/no_output_reverse_mapped_var.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"y=0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_annotations_1.mzn")]
	public async Task test_solve_unit_output_output_annotations_1()
	{
		var path = "unit/output/output_annotations_1.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"b=4;y=1;z=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_annotations_2.mzn")]
	public async Task test_solve_unit_output_output_annotations_2()
	{
		var path = "unit/output/output_annotations_2.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x@10.3-24=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_annotations_3.mzn")]
	public async Task test_solve_unit_output_output_annotations_3()
	{
		var path = "unit/output/output_annotations_3.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"objective=6;x@15.3-23|i=1@14.23|sum@14.18-16.7|=@14.12-16.7=1;x@15.3-23|i=2@14.23|sum@14.18-16.7|=@14.12-16.7=2;x@15.3-23|i=3@14.23|sum@14.18-16.7|=@14.12-16.7=3;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_annotations_4.mzn")]
	public async Task test_solve_unit_output_output_annotations_4()
	{
		var path = "unit/output/output_annotations_4.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=9;y@11.3-24|foo@15.12-17=10;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_sections_1.mzn")]
	public async Task test_solve_unit_output_output_sections_1()
	{
		var path = "unit/output/output_sections_1.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"aebdc\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_sections_1.mzn")]
	public async Task test_solve_unit_output_output_sections_1_2()
	{
		var path = "unit/output/output_sections_1.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"bdc\";",
			};
		var args = new List<string>{
			"--only-sections foo,bar",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_sections_1.mzn")]
	public async Task test_solve_unit_output_output_sections_1_3()
	{
		var path = "unit/output/output_sections_1.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"ae\";",
			};
		var args = new List<string>{
			"--not-sections foo,bar",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_sections_2.mzn")]
	public async Task test_solve_unit_output_output_sections_2()
	{
		var path = "unit/output/output_sections_2.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"aebdc\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_sections_2.mzn")]
	public async Task test_solve_unit_output_output_sections_2_2()
	{
		var path = "unit/output/output_sections_2.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"bdc\";",
			};
		var args = new List<string>{
			"--only-sections foo,bar",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_sections_2.mzn")]
	public async Task test_solve_unit_output_output_sections_2_3()
	{
		var path = "unit/output/output_sections_2.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"ae\";",
			};
		var args = new List<string>{
			"--not-sections foo,bar",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_sections_3.mzn")]
	public async Task test_solve_unit_output_output_sections_3()
	{
		var path = "unit/output/output_sections_3.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"objective=9;_output_item=x = 10;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_sections_4.mzn")]
	public async Task test_solve_unit_output_output_sections_4()
	{
		var path = "unit/output/output_sections_4.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"x = 10\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_sections_5.mzn")]
	public async Task test_solve_unit_output_output_sections_5()
	{
		var path = "unit/output/output_sections_5.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"x = 10\ny = 1\n\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_sections_6.mzn")]
	public async Task test_solve_unit_output_output_sections_6()
	{
		var path = "unit/output/output_sections_6.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"output_to_section: 10\noutput_item: 10\n\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/output_sections_7.mzn")]
	public async Task test_solve_unit_output_output_sections_7()
	{
		var path = "unit/output/output_sections_7.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"[1]\n\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/output/var_enum.mzn")]
	public async Task test_solve_unit_output_var_enum()
	{
		var path = "unit/output/var_enum.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"[\"X_INTRODUCED_16_\", \"X_INTRODUCED_17_\", \"X_INTRODUCED_18_\"] [X_INTRODUCED_16_, X_INTRODUCED_17_, X_INTRODUCED_18_] [Inch, Inch, Inch]\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/param_file/param_file_array.mzn")]
	public async Task test_solve_unit_param_file_param_file_array()
	{
		var path = "unit/param_file/param_file_array.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=true;y=false;",
			};
		var args = new List<string>{
			"--param-file ./spec/unit/param_file/param_file_array.json",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/param_file/param_file_resolution.mzn")]
	public async Task test_solve_unit_param_file_param_file_resolution()
	{
		var path = "unit/param_file/param_file_resolution.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;y=2;",
			};
		var args = new List<string>{
			"--data \"unit/param_file/param_file_resolution.mpc\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/array_set_element_nosets.mzn")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_array_set_element_nosets(string solver)
	{
		var path = "unit/regression/array_set_element_nosets.mzn";
		var solutions = new List<string> {
			"x=1;y=[{1},{2},{3}];z={1};",
			"x=3;y=[{1},{2},{3}];z={3};",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/array_var_set_element_nosets.mzn")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_array_var_set_element_nosets(string solver)
	{
		var path = "unit/regression/array_var_set_element_nosets.mzn";
		var solutions = new List<string> {
			"x=1;y=[(range: 1..3),{},{1}];z=(range: 1..3);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/assign_reverse_map.mzn")]
	public async Task test_solve_unit_regression_assign_reverse_map()
	{
		var path = "unit/regression/assign_reverse_map.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=2;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/bounds_for_linear_01_max_0.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_max_0(string solver)
	{
		var path = "unit/regression/bounds_for_linear_01_max_0.mzn";
		var solutions = new List<string> {
			"x=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/bounds_for_linear_01_max_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_max_1(string solver)
	{
		var path = "unit/regression/bounds_for_linear_01_max_1.mzn";
		var solutions = new List<string> {
			"x=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/bounds_for_linear_01_min_0.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_min_0(string solver)
	{
		var path = "unit/regression/bounds_for_linear_01_min_0.mzn";
		var solutions = new List<string> {
			"x=0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/bounds_for_linear_01_min_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_min_1(string solver)
	{
		var path = "unit/regression/bounds_for_linear_01_min_1.mzn";
		var solutions = new List<string> {
			"x=0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/bug110.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug110(string solver)
	{
		var path = "unit/regression/bug110.mzn";
		var solutions = new List<string> {
			"board=[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]];",
			"board=[[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/bug222.mzn")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bug222(string solver)
	{
		var path = "unit/regression/bug222.mzn";
		var solutions = new List<string> {
			"K=11;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/bug269.mzn")]
	public async Task test_solve_unit_regression_bug269()
	{
		var path = "unit/regression/bug269.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"queens=[4,6,1,5,2,8,3,7];",
			"queens=[4,6,8,3,1,7,5,2];",
			"queens=[8,4,1,3,6,2,7,5];",
			"queens=[2,5,7,4,1,8,6,3];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/bug284.mzn")]
	public async Task test_solve_unit_regression_bug284()
	{
		var path = "unit/regression/bug284.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"ignore_me=true;",
			"A=1;B=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/bug318_orig.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug318_orig(string solver)
	{
		var path = "unit/regression/bug318_orig.mzn";
		var solutions = new List<string> {
			"objective=-2147483646;var1=1;var2=-2147483646;var3=-2147483646;",
			"objective=-500000000;var1=1;var2=-500000000;var3=-500000000;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/bug335.mzn")]
	public async Task test_solve_unit_regression_bug335()
	{
		var path = "unit/regression/bug335.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"sokPosns=[14,13,8,7,8,9,4,5,10,1,1,1];stime=9;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/bug380.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug380(string solver)
	{
		var path = "unit/regression/bug380.mzn";
		var solutions = new List<string> {
			"a=[[false,false,false,false],[false,false,false,false],[false,false,false,false],[false,false,false,false]];d=[3,3,3,3];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/bug532.mzn")]
	public async Task test_solve_unit_regression_bug532()
	{
		var path = "unit/regression/bug532.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"y=0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/bug534.mzn")]
	public async Task test_solve_unit_regression_bug534()
	{
		var path = "unit/regression/bug534.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[[],[]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/bug536.mzn")]
	public async Task test_solve_unit_regression_bug536()
	{
		var path = "unit/regression/bug536.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[1];",
			};
		var args = new List<string>{
			"-O2",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/bug552.mzn")]
	public async Task test_solve_unit_regression_bug552()
	{
		var path = "unit/regression/bug552.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[2.0];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/bug565.mzn")]
	public async Task test_solve_unit_regression_bug565()
	{
		var path = "unit/regression/bug565.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=true;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/bug67.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug67(string solver)
	{
		var path = "unit/regression/bug67.mzn";
		var solutions = new List<string> {
			"x=-2147483646;y=-2147483646;z=-2147483646;",
			"x=-500000000;y=-500000000;z=-500000000;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/bug82.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug82(string solver)
	{
		var path = "unit/regression/bug82.mzn";
		var solutions = new List<string> {
			"pos=[[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1]];",
			"pos=[[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[2,1,1],[3,1,1],[4,1,1],[5,1,1],[4,1,1],[3,1,1],[2,1,1],[1,1,1]];",
			"pos=[[6,6,6],[6,6,6],[6,6,6],[6,6,6],[6,6,6],[6,6,6],[6,6,6],[6,6,6],[6,6,6],[6,6,6],[6,6,6],[6,6,6],[6,6,6]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/bug_empty_enum_extension.mzn")]
	public async Task test_solve_unit_regression_bug_empty_enum_extension()
	{
		var path = "unit/regression/bug_empty_enum_extension.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"as=[(argument: z2, constructor: z),(argument: z1, constructor: z),(argument: x2, constructor: x),(argument: x1, constructor: x)];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/bug_opt_polymorphic.mzn")]
	public async Task test_solve_unit_regression_bug_opt_polymorphic()
	{
		var path = "unit/regression/bug_opt_polymorphic.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/checker_mzn_check_var.mzn")]
	public async Task test_solve_unit_regression_checker_mzn_check_var()
	{
		var path = "unit/regression/checker_mzn_check_var.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_checker=(trim: \"Ok\");",
			};
		var args = new List<string>{
			"--data \"unit/regression/checker_mzn_check_var.mzc.mzn\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/checker_opt.mzn")]
	public async Task test_solve_unit_regression_checker_opt()
	{
		var path = "unit/regression/checker_opt.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_checker=(trim: \"y = 20;\");",
			};
		var args = new List<string>{
			"--data \"unit/regression/checker_opt.mzc.mzn\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/checker_params.mzn")]
	public async Task test_solve_unit_regression_checker_params()
	{
		var path = "unit/regression/checker_params.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_checker=(trim: \"yay!\");",
			};
		var args = new List<string>{
			"--data \"unit/regression/checker_params.mzc.mzn\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/checker_same_var.mzn")]
	public async Task test_solve_unit_regression_checker_same_var()
	{
		var path = "unit/regression/checker_same_var.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_checker=(trim: \"x = 10;\");objective=5;",
			};
		var args = new List<string>{
			"--data \"unit/regression/checker_same_var.mzc.mzn\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/checker_var_bug.mzn")]
	public async Task test_solve_unit_regression_checker_var_bug()
	{
		var path = "unit/regression/checker_var_bug.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_checker=\"x = 1;\n\";",
			"_checker=\"x = 2;\n\";",
			};
		var args = new List<string>{
			"--data \"unit/regression/checker_var_bug.mzc.mzn\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/coercion_par.mzn")]
	public async Task test_solve_unit_regression_coercion_par()
	{
		var path = "unit/regression/coercion_par.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[1,<>];y=[1.0,<>];z=[0.0,<>];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/constructor_of_set.mzn")]
	public async Task test_solve_unit_regression_constructor_of_set()
	{
		var path = "unit/regression/constructor_of_set.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"y=(constructor: C, argument: 2);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/decision_tree_binary.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_decision_tree_binary(string solver)
	{
		var path = "unit/regression/decision_tree_binary.mzn";
		var solutions = new List<string> {
			"node_used=[3,4,6,9,11,13,15,8,9,10,11,12,13,14,15];x=[6,2,6,2,4,6,8,1,2,3,4,5,6,7,8];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/enigma_1568.mzn")]
	public async Task test_solve_unit_regression_enigma_1568()
	{
		var path = "unit/regression/enigma_1568.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"D=6;E=5;L=3;O=9;ODD=966;P=1;PUZZLE=102235;U=0;Z=2;num1=161;num2=635;num3=805;num4=483;x=[9,6,1,0,2,3,5];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/flatten_comp_in.mzn")]
	public async Task test_solve_unit_regression_flatten_comp_in()
	{
		var path = "unit/regression/flatten_comp_in.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[true];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_644_a.mzn")]
	public async Task test_solve_unit_regression_github_644_a()
	{
		var path = "unit/regression/github_644_a.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"arr=[<>,<>];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_644_b.mzn")]
	public async Task test_solve_unit_regression_github_644_b()
	{
		var path = "unit/regression/github_644_b.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=[<>];b=[1];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_644_c.mzn")]
	public async Task test_solve_unit_regression_github_644_c()
	{
		var path = "unit/regression/github_644_c.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"arr=[1];x=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_644_d.mzn")]
	public async Task test_solve_unit_regression_github_644_d()
	{
		var path = "unit/regression/github_644_d.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"value=<>;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_644_e.mzn")]
	public async Task test_solve_unit_regression_github_644_e()
	{
		var path = "unit/regression/github_644_e.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=<>;y=<>;z=<>;p=3;q=1;r=4;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_646.mzn")]
	public async Task test_solve_unit_regression_github_646()
	{
		var path = "unit/regression/github_646.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_661_part2.mzn")]
	public async Task test_solve_unit_regression_github_661_part2()
	{
		var path = "unit/regression/github_661_part2.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;y=2;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_664.mzn")]
	public async Task test_solve_unit_regression_github_664()
	{
		var path = "unit/regression/github_664.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=(1: );",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/github_667.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_github_667(string solver)
	{
		var path = "unit/regression/github_667.mzn";
		var solutions = new List<string> {
			"arr=[false];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_668.mzn")]
	public async Task test_solve_unit_regression_github_668()
	{
		var path = "unit/regression/github_668.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=<>;arr=[false];",
			"x=<>;arr=[true];",
			"x=1;arr=[false];",
			"x=1;arr=[true];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_669.mzn")]
	public async Task test_solve_unit_regression_github_669()
	{
		var path = "unit/regression/github_669.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"v=<>;",
			"v=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_671.mzn")]
	public async Task test_solve_unit_regression_github_671()
	{
		var path = "unit/regression/github_671.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"arr=[true];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_673.mzn")]
	public async Task test_solve_unit_regression_github_673()
	{
		var path = "unit/regression/github_673.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"[X, <>]\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/github_674.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_github_674(string solver)
	{
		var path = "unit/regression/github_674.mzn";
		var solutions = new List<string> {
			"arr=[true,false];ns=[false,false,false,false,false,false,false,false,false,true,false];es=[false,false,false,false,false,false,false,false,false,false,false];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_675a.mzn")]
	public async Task test_solve_unit_regression_github_675a()
	{
		var path = "unit/regression/github_675a.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"t=[false];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_681.mzn")]
	public async Task test_solve_unit_regression_github_681()
	{
		var path = "unit/regression/github_681.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"arr=[true];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_683.mzn")]
	public async Task test_solve_unit_regression_github_683()
	{
		var path = "unit/regression/github_683.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"vars=[2,1];c=1;",
			"vars=[1,2];c=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_685.mzn")]
	public async Task test_solve_unit_regression_github_685()
	{
		var path = "unit/regression/github_685.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[false,true];y=[true,false];",
			"x=[true,false];y=[false,true];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_687.mzn")]
	public async Task test_solve_unit_regression_github_687()
	{
		var path = "unit/regression/github_687.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"r=(x: 0);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_691.mzn")]
	public async Task test_solve_unit_regression_github_691()
	{
		var path = "unit/regression/github_691.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=-1;c=-2;",
			"a=0;c=0;",
			"a=1;c=2;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_693_part1.mzn")]
	public async Task test_solve_unit_regression_github_693_part1()
	{
		var path = "unit/regression/github_693_part1.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"c=true;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_693_part2.mzn")]
	public async Task test_solve_unit_regression_github_693_part2()
	{
		var path = "unit/regression/github_693_part2.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[{},{2},{1},(range: 1..2)];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_700.mzn")]
	public async Task test_solve_unit_regression_github_700()
	{
		var path = "unit/regression/github_700.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"c={1};d=(range: 1..2);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_728.mzn")]
	public async Task test_solve_unit_regression_github_728()
	{
		var path = "unit/regression/github_728.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"wanted={1};",
			"wanted={4};",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_732.mzn")]
	public async Task test_solve_unit_regression_github_732()
	{
		var path = "unit/regression/github_732.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"sts=[(x: 0),(x: 1)];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_747.mzn")]
	public async Task test_solve_unit_regression_github_747()
	{
		var path = "unit/regression/github_747.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[<>,<>];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_749.mzn")]
	public async Task test_solve_unit_regression_github_749()
	{
		var path = "unit/regression/github_749.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[true,false,false];y=false;c=2;",
			"x=[false,false,false];y=false;c=3;",
			"x=[true,true,false];y=false;c=1;",
			"x=[false,true,false];y=false;c=2;",
			"x=[true,false,true];y=false;c=1;",
			"x=[false,true,true];y=false;c=1;",
			"x=[false,false,true];y=false;c=2;",
			"x=[true,false,false];y=true;c=1;",
			"x=[false,true,false];y=true;c=1;",
			"x=[true,true,false];y=true;c=2;",
			"x=[false,false,true];y=true;c=1;",
			"x=[true,false,true];y=true;c=2;",
			"x=[false,true,true];y=true;c=2;",
			"x=[true,true,true];y=true;c=3;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_758.mzn")]
	public async Task test_solve_unit_regression_github_758()
	{
		var path = "unit/regression/github_758.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[true];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_758.mzn")]
	public async Task test_solve_unit_regression_github_758_2()
	{
		var path = "unit/regression/github_758.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[true];",
			};
		var args = new List<string>{
			"-O0",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_760.mzn")]
	public async Task test_solve_unit_regression_github_760()
	{
		var path = "unit/regression/github_760.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;",
			"x=2;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_762.mzn")]
	public async Task test_solve_unit_regression_github_762()
	{
		var path = "unit/regression/github_762.mzn";
		var solver = "chuffed";
		var solutions = new List<string> {
			"x=[true];",
			"x=[false];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_771.mzn")]
	public async Task test_solve_unit_regression_github_771()
	{
		var path = "unit/regression/github_771.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_776.mzn")]
	public async Task test_solve_unit_regression_github_776()
	{
		var path = "unit/regression/github_776.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=(enumName: A, value: 1);",
			};
		var args = new List<string>{
			"--data \"unit/regression/github_776.dzn\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_792.mzn")]
	public async Task test_solve_unit_regression_github_792()
	{
		var path = "unit/regression/github_792.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"y=true;",
			"y=false;",
			};
		var args = new List<string>{
			"-G std",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_793.mzn")]
	public async Task test_solve_unit_regression_github_793()
	{
		var path = "unit/regression/github_793.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"[{\"e\":\"A\"}] {\"v\": [{\"e\":\"A\"}]}\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_803.mzn")]
	public async Task test_solve_unit_regression_github_803()
	{
		var path = "unit/regression/github_803.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"BV0=false;IV0=0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_807.mzn")]
	public async Task test_solve_unit_regression_github_807()
	{
		var path = "unit/regression/github_807.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"bar=[1];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_809.mzn")]
	public async Task test_solve_unit_regression_github_809()
	{
		var path = "unit/regression/github_809.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"bar=<>;biz={B};",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/github_813.mzn")]
	public async Task test_solve_unit_regression_github_813()
	{
		var path = "unit/regression/github_813.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=true;b=false;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/if_then_else_absent.mzn")]
	public async Task test_solve_unit_regression_if_then_else_absent()
	{
		var path = "unit/regression/if_then_else_absent.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[<>];b=true;",
			"x=[1];b=false;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/in_array_eval_error.mzn")]
	public async Task test_solve_unit_regression_in_array_eval_error()
	{
		var path = "unit/regression/in_array_eval_error.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[1];y=true;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/makepar_output.mzn")]
	public async Task test_solve_unit_regression_makepar_output()
	{
		var path = "unit/regression/makepar_output.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"1..1\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/non_pos_pow.mzn")]
	public async Task test_solve_unit_regression_non_pos_pow()
	{
		var path = "unit/regression/non_pos_pow.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=2;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/nosets_set_search.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_nosets_set_search(string solver)
	{
		var path = "unit/regression/nosets_set_search.mzn";
		var solutions = new List<string> {
			"x=(range: 1..3);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/opt_minmax.mzn")]
	public async Task test_solve_unit_regression_opt_minmax()
	{
		var path = "unit/regression/opt_minmax.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"xmax=10;xmin=1;ymax=10.0;ymin=1.0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/output_fn_toplevel_var.mzn")]
	public async Task test_solve_unit_regression_output_fn_toplevel_var()
	{
		var path = "unit/regression/output_fn_toplevel_var.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"[1][true]\";",
			"_output_item=\"[2][false]\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/parse_assignments.mzn")]
	public async Task test_solve_unit_regression_parse_assignments()
	{
		var path = "unit/regression/parse_assignments.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_checker=Ok;",
			};
		var args = new List<string>{
			"--data \"unit/regression/parse_assignments.mzc.mzn\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/polymorphic_var_and_par.mzn")]
	public async Task test_solve_unit_regression_polymorphic_var_and_par()
	{
		var path = "unit/regression/polymorphic_var_and_par.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/pred_param_r7550.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_pred_param_r7550(string solver)
	{
		var path = "unit/regression/pred_param_r7550.mzn";
		var solutions = new List<string> {
			"end=53;objective=53;s=[0,0,0,4,7,7,6,8,12,8,6,4,14,19,12,12,13,18,8,11,14,18,19,4,16,10,20,9,14,6,24,26,21,16,9,21,24,28,31,22,24,11,25,16,30,26,38,25,25,30,33,36,39,34,33,47,25,44,50,38];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/slice_enum_indexset.mzn")]
	public async Task test_solve_unit_regression_slice_enum_indexset()
	{
		var path = "unit/regression/slice_enum_indexset.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"ok\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/subsets_100.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_subsets_100(string solver)
	{
		var path = "unit/regression/subsets_100.mzn";
		var solutions = new List<string> {
			"s=(range: 1..9);t={45};s_total=45;t_total=45;",
			"s={100};t={4951};s_total=100;t_total=100;",
			"s={12,40,56,94};t={393,97};s_total=193;t_total=193;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug54.mzn")]
	public async Task test_solve_unit_regression_test_bug54_2()
	{
		var path = "unit/regression/test_bug54.mzn";
		var solver = "chuffed";
		var solutions = new List<string> {
			"x=7;y=1;z=7;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug72.mzn")]
	public async Task test_solve_unit_regression_test_bug72_2()
	{
		var path = "unit/regression/test_bug72.mzn";
		var solver = "chuffed";
		var solutions = new List<string> {
			"x={1};b=true;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug_476.mzn")]
	public async Task test_solve_unit_regression_test_bug_476()
	{
		var path = "unit/regression/test_bug_476.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"b=1;c=true;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug_493.mzn")]
	public async Task test_solve_unit_regression_test_bug_493()
	{
		var path = "unit/regression/test_bug_493.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"{}\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug_494.mzn")]
	public async Task test_solve_unit_regression_test_bug_494()
	{
		var path = "unit/regression/test_bug_494.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x1=1;x2=[[0]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug_520.mzn")]
	public async Task test_solve_unit_regression_test_bug_520()
	{
		var path = "unit/regression/test_bug_520.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"{a}\"b\"\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug_521.mzn")]
	public async Task test_solve_unit_regression_test_bug_521()
	{
		var path = "unit/regression/test_bug_521.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug_527.mzn")]
	public async Task test_solve_unit_regression_test_bug_527()
	{
		var path = "unit/regression/test_bug_527.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug_529.mzn")]
	public async Task test_solve_unit_regression_test_bug_529()
	{
		var path = "unit/regression/test_bug_529.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"ok\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug_588.mzn")]
	public async Task test_solve_unit_regression_test_bug_588()
	{
		var path = "unit/regression/test_bug_588.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=2;y=1;z=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug_array_sum_bounds.mzn")]
	public async Task test_solve_unit_regression_test_bug_array_sum_bounds()
	{
		var path = "unit/regression/test_bug_array_sum_bounds.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"C=[0,0,0];y=0;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/test_bug_ite_array_eq.mzn")]
	public async Task test_solve_unit_regression_test_bug_ite_array_eq()
	{
		var path = "unit/regression/test_bug_ite_array_eq.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"b=true;x=[false,false,false];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/test_parout.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_test_parout(string solver)
	{
		var path = "unit/regression/test_parout.mzn";
		var solutions = new List<string> {
			"x=10;y=-2147483646;",
			"x=10;y=11;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/regression/var_bool_comp.mzn")]
	public async Task test_solve_unit_regression_var_bool_comp()
	{
		var path = "unit/regression/var_bool_comp.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[2,1];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/regression/var_self_assign_bug.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_regression_var_self_assign_bug(string solver)
	{
		var path = "unit/regression/var_self_assign_bug.mzn";
		var solutions = new List<string> {
			"partitions=[{12,3},{12,3},{12,3}];",
			"partitions=[(range: 1..3),(range: 1..3),(range: 1..3)];",
			"partitions=[{},{},{}];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/int_choice_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_choice_1(string solver)
	{
		var path = "unit/search/int_choice_1.mzn";
		var solutions = new List<string> {
			"q=[1,5,8,6,3,7,2,4];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/int_choice_2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_choice_2(string solver)
	{
		var path = "unit/search/int_choice_2.mzn";
		var solutions = new List<string> {
			"q=[8,4,1,3,6,2,7,5];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/int_choice_6.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_choice_6(string solver)
	{
		var path = "unit/search/int_choice_6.mzn";
		var solutions = new List<string> {
			"q=[1,5,8,6,3,7,2,4];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/int_var_select_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_1(string solver)
	{
		var path = "unit/search/int_var_select_1.mzn";
		var solutions = new List<string> {
			"q=[1,5,8,6,3,7,2,4];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/int_var_select_2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_2(string solver)
	{
		var path = "unit/search/int_var_select_2.mzn";
		var solutions = new List<string> {
			"q=[1,5,8,6,3,7,2,4];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/search/int_var_select_3.mzn")]
	public async Task test_solve_unit_search_int_var_select_3()
	{
		var path = "unit/search/int_var_select_3.mzn";
		var solver = "chuffed";
		var solutions = new List<string> {
			"q=[1,7,4,6,8,2,5,3];",
			"q=[1,7,5,8,2,4,6,3];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/int_var_select_4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_4(string solver)
	{
		var path = "unit/search/int_var_select_4.mzn";
		var solutions = new List<string> {
			"q=[1,7,4,6,8,2,5,3];",
			"q=[1,7,5,8,2,4,6,3];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/int_var_select_6.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_6(string solver)
	{
		var path = "unit/search/int_var_select_6.mzn";
		var solutions = new List<string> {
			"q=[1,5,8,6,3,7,2,4];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/test-ff1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_ff1(string solver)
	{
		var path = "unit/search/test-ff1.mzn";
		var solutions = new List<string> {
			"x=3;y=8;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/test-ff2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_ff2(string solver)
	{
		var path = "unit/search/test-ff2.mzn";
		var solutions = new List<string> {
			"x=5;y=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/test-ff3.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_ff3(string solver)
	{
		var path = "unit/search/test-ff3.mzn";
		var solutions = new List<string> {
			"x=5;y=1;z=1;w=3;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/search/test-large1.mzn")]
	public async Task test_solve_unit_search_test_large1()
	{
		var path = "unit/search/test-large1.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=5;y=8;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/search/test-large1.mzn")]
	public async Task test_solve_unit_search_test_large1_2()
	{
		var path = "unit/search/test-large1.mzn";
		var solver = "chuffed";
		var solutions = new List<string> {
			"x=6;y=7;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/test-med1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_med1(string solver)
	{
		var path = "unit/search/test-med1.mzn";
		var solutions = new List<string> {
			"x=5;y=6;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/search/test-small1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_small1(string solver)
	{
		var path = "unit/search/test-small1.mzn";
		var solutions = new List<string> {
			"x=9;y=2;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/alias.mzn")]
	public async Task test_solve_unit_types_alias()
	{
		var path = "unit/types/alias.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=3;y=[<>,1];tup=[2,true];tuptup=[2,true,2,true];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/alias_call.mzn")]
	public async Task test_solve_unit_types_alias_call()
	{
		var path = "unit/types/alias_call.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/common_struct_bottom.mzn")]
	public async Task test_solve_unit_types_common_struct_bottom()
	{
		var path = "unit/types/common_struct_bottom.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[[[[1]]],[[]]];y=[(a: [(a: 1)]),(a: [])];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/comprehension_type.mzn")]
	public async Task test_solve_unit_types_comprehension_type()
	{
		var path = "unit/types/comprehension_type.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[[A,A],[A,A]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/cv_comprehension.mzn")]
	public async Task test_solve_unit_types_cv_comprehension()
	{
		var path = "unit/types/cv_comprehension.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/enum_refl.mzn")]
	public async Task test_solve_unit_types_enum_refl()
	{
		var path = "unit/types/enum_refl.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x={};ubx={ab,c};y=a;lby=a;uby=c;domy={ab,c};",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/github_647.mzn")]
	public async Task test_solve_unit_types_github_647()
	{
		var path = "unit/types/github_647.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"b=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/if_then_else_struct.mzn")]
	public async Task test_solve_unit_types_if_then_else_struct()
	{
		var path = "unit/types/if_then_else_struct.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"t=[<>,<>];b=false;u=[0,0];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/non_contig_enum.mzn")]
	public async Task test_solve_unit_types_non_contig_enum()
	{
		var path = "unit/types/non_contig_enum.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=(argument: 6, constructor: S);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/opt_alias._int.mzn")]
	public async Task test_solve_unit_types_opt_alias_int()
	{
		var path = "unit/types/opt_alias._int.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=<>;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/polymorphic_overloading.mzn")]
	public async Task test_solve_unit_types_polymorphic_overloading()
	{
		var path = "unit/types/polymorphic_overloading.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=Ok;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/record_access_success.mzn")]
	public async Task test_solve_unit_types_record_access_success()
	{
		var path = "unit/types/record_access_success.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"onetwo\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/record_binop_par.mzn")]
	public async Task test_solve_unit_types_record_binop_par()
	{
		var path = "unit/types/record_binop_par.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"eq1=true;eq0=false;nq1=true;nq0=false;in1=true;in0=false;le1=true;le0=false;lq1=true;lq0=false;merge1=(x: 1, y: 2.0, z: true);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/record_binop_var.mzn")]
	public async Task test_solve_unit_types_record_binop_var()
	{
		var path = "unit/types/record_binop_var.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"eqA=(a: 2, b: true);nq=(a: 3, b: true);leA=(x: 2, y: 4);lqA=(x: 2, y: 4);arrin=(a: 3, b: 5.0);merge1=(a: 2, b: true, x: 2, y: 4);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/record_comprehensions.mzn")]
	public async Task test_solve_unit_types_record_comprehensions()
	{
		var path = "unit/types/record_comprehensions.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"simple=[(x: 2, y: true),(x: 1, y: false),(x: 0, y: true),(x: 1, y: false),(x: 2, y: true)];indexed=[(a: 4, b: true),(a: 6, b: true),(a: 8, b: true),(a: 9, b: false),(a: 11, b: false)];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/record_in_checker.mzn")]
	public async Task test_solve_unit_types_record_in_checker()
	{
		var path = "unit/types/record_in_checker.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_checker={\"x\": 1};",
			};
		var args = new List<string>{
			"--data \"unit/types/record_in_checker.mzc.mzn\"",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/record_output.mzn")]
	public async Task test_solve_unit_types_record_output()
	{
		var path = "unit/types/record_output.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"full var: (a: 0, b: true, c: 1.5)\nvar array: [(a: 2, b: false), (a: 1, b: true)]\nnested: (inner: (left: 3, right: 4), outer: false)\nelement: 3\npartial: (x: 10, y: true)\ndata: (e: -3.2, f: false)\n\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/record_subtyping.mzn")]
	public async Task test_solve_unit_types_record_subtyping()
	{
		var path = "unit/types/record_subtyping.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"single=(a: 1);double=(a: 1.0, b: [1,2,3]);tupId=(x: 1, y: 0.0);tupExpr=(a: -5.0, b: 0);arr1=[(a: 5, b: 1.0),(a: 1, b: -1.0)];arr2=[(a: 0, b: 1),(a: 0, b: 1)];arrId=[(a: 0.0, b: 1.0),(a: 0.0, b: 1.0)];arrExpr=[(a: 1.0, b: 0.0),(a: 2.0, b: 1.0),(a: 3.0, b: 0.0)];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/record_var_ite.mzn")]
	public async Task test_solve_unit_types_record_var_ite()
	{
		var path = "unit/types/record_var_ite.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"tups=[(x: 12, y: false),(x: 10, y: true),(x: 11, y: false)];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/specialise_large_struct.mzn")]
	public async Task test_solve_unit_types_specialise_large_struct()
	{
		var path = "unit/types/specialise_large_struct.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"t=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];u=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/struct_array_coercion.mzn")]
	public async Task test_solve_unit_types_struct_array_coercion()
	{
		var path = "unit/types/struct_array_coercion.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"mzn_enum_X=[[\"A\",[]],[B,[]],[G,[[0,(range: 1..3)]]]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/struct_domain_1.mzn")]
	public async Task test_solve_unit_types_struct_domain_1()
	{
		var path = "unit/types/struct_domain_1.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=false;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/struct_domain_2.mzn")]
	public async Task test_solve_unit_types_struct_domain_2()
	{
		var path = "unit/types/struct_domain_2.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=false;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/struct_domain_3.mzn")]
	public async Task test_solve_unit_types_struct_domain_3()
	{
		var path = "unit/types/struct_domain_3.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=false;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/struct_domain_4.mzn")]
	public async Task test_solve_unit_types_struct_domain_4()
	{
		var path = "unit/types/struct_domain_4.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=false;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/struct_member_paths.mzn")]
	public async Task test_solve_unit_types_struct_member_paths()
	{
		var path = "unit/types/struct_member_paths.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"a=[(o: 1, s: <>)];",
			};
		var args = new List<string>{
			"--keep-paths",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/struct_par_function_version.mzn")]
	public async Task test_solve_unit_types_struct_par_function_version()
	{
		var path = "unit/types/struct_par_function_version.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"p=true;a=false;b=true;c=false;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/struct_return_ti_1.mzn")]
	public async Task test_solve_unit_types_struct_return_ti_1()
	{
		var path = "unit/types/struct_return_ti_1.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=false;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/struct_return_ti_2.mzn")]
	public async Task test_solve_unit_types_struct_return_ti_2()
	{
		var path = "unit/types/struct_return_ti_2.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=false;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/struct_specialise.mzn")]
	public async Task test_solve_unit_types_struct_specialise()
	{
		var path = "unit/types/struct_specialise.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"foo_int=1;foo_str=test;foo_enum=B;bar_int=2;bar_str=pred;bar_enum=C;baz_tup=[3,func];baz_rec=(x: B);",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/struct_specialise_return.mzn")]
	public async Task test_solve_unit_types_struct_specialise_return()
	{
		var path = "unit/types/struct_specialise_return.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"{C}, [(A,)]\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/tuple_access_success.mzn")]
	public async Task test_solve_unit_types_tuple_access_success()
	{
		var path = "unit/types/tuple_access_success.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"onetwo\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/tuple_binop_par.mzn")]
	public async Task test_solve_unit_types_tuple_binop_par()
	{
		var path = "unit/types/tuple_binop_par.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"eq1=true;eq0=false;nq1=true;nq0=false;in1=true;in0=false;le1=true;le0=false;lq1=true;lq0=false;con1=[1,2.0,true];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/tuple_binop_var.mzn")]
	public async Task test_solve_unit_types_tuple_binop_var()
	{
		var path = "unit/types/tuple_binop_var.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"eqA=[2,true];nq=[3,true];leA=[2,4];lqA=[2,4];arrin=[3,5.0];con1=[2,true,3,true];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/tuple_comprehensions.mzn")]
	public async Task test_solve_unit_types_tuple_comprehensions()
	{
		var path = "unit/types/tuple_comprehensions.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"simple=[[2,true],[1,false],[0,true],[1,false],[2,true]];indexed=[[4,true],[6,true],[8,true],[9,false],[11,false]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/tuple_int_set_of_int_specialisation.mzn")]
	public async Task test_solve_unit_types_tuple_int_set_of_int_specialisation()
	{
		var path = "unit/types/tuple_int_set_of_int_specialisation.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"f=true;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/tuple_lit.mzn")]
	public async Task test_solve_unit_types_tuple_lit()
	{
		var path = "unit/types/tuple_lit.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"single=[1];double=[false,-1];triple=[1,false,200.0];square=[[1,one],[-2,two]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/tuple_mkpar.mzn")]
	public async Task test_solve_unit_types_tuple_mkpar()
	{
		var path = "unit/types/tuple_mkpar.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=1;y=3;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/tuple_output.mzn")]
	public async Task test_solve_unit_types_tuple_output()
	{
		var path = "unit/types/tuple_output.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"_output_item=\"full var: (0, true, 1.5)\nvar array: [(2, false), (1, true)]\nnested: (false, (3, 4))\nelement: 3\npartial: (10, true)\ndata: (-3.2, false)\nenumtup: ((x: a a, y: c), c)\n\";",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/tuple_subtyping.mzn")]
	public async Task test_solve_unit_types_tuple_subtyping()
	{
		var path = "unit/types/tuple_subtyping.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"single=[1];double=[1.0,[1,2,3]];tupId=[1,0.0];tupExpr=[-5.0,0];arr1=[[5,1.0],[1,-1.0]];arr2=[[1,0],[1,0]];arrId=[[1.0,0.0],[1.0,0.0]];arrExpr=[[1.0,0.0],[2.0,1.0],[3.0,0.0]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/tuple_var_ite.mzn")]
	public async Task test_solve_unit_types_tuple_var_ite()
	{
		var path = "unit/types/tuple_var_ite.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"tups=[[12,false],[10,true],[11,false]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/types/type_specialise_struct_domain.mzn")]
	public async Task test_solve_unit_types_type_specialise_struct_domain()
	{
		var path = "unit/types/type_specialise_struct_domain.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"x=[(a: [A]),(a: [B]),(a: [C])];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/globals/cumulatives/globals_cumulatives.mzn")]
	public async Task test_solve_unit_globals_cumulatives_globals_cumulatives()
	{
		var path = "unit/globals/cumulatives/globals_cumulatives.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"makespan=11;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/globals/cumulatives/globals_cumulatives.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_cumulatives_globals_cumulatives_2(string solver)
	{
		var path = "unit/globals/cumulatives/globals_cumulatives.mzn";
		var solutions = new List<string> {
			"makespan=11;",
			};
		var args = new List<string>{
			"-G std",
		};
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/globals/int_set_channel/test_int_set_channel2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_globals_int_set_channel_test_int_set_channel2(string solver)
	{
		var path = "unit/globals/int_set_channel/test_int_set_channel2.mzn";
		var solutions = new List<string> {
			"x=[1,1,1,1,1,1,1,1,1];y=[(range: 1..9),{},{},{},{}];",
			"x=[5,3,1,1,1,1,1,1,1];y=[(range: 3..9),{},{2},{},{1}];",
			"x=[2,2,2,2,2,2,2,2,2];y=[{},(range: 1..9),{},{},{}];",
			"x=[5,5,5,5,5,5,5,5,5];y=[{},{},{},{},(range: 1..9)];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/globals/lex2/globals_lex2.mzn")]
	public async Task test_solve_unit_globals_lex2_globals_lex2_2()
	{
		var path = "unit/globals/lex2/globals_lex2.mzn";
		var solver = "coin-bc";
		var solutions = new List<string> {
			"y=[[1,1],[1,1]];",
			"y=[[1,2],[2,1]];",
			"y=[[1,1],[1,2]];",
			"y=[[1,2],[1,2]];",
			"y=[[1,1],[2,2]];",
			"y=[[1,2],[2,2]];",
			"y=[[2,2],[2,2]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="unit/globals/lex_chain/globals_lex_chain__orbitope.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_globals_lex_chain_globals_lex_chain__orbitope(string solver)
	{
		var path = "unit/globals/lex_chain/globals_lex_chain__orbitope.mzn";
		var solutions = new List<string> {
			"lex_members_int=[1,0,1];lex_members_bool=[false,false];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/globals/nvalue/nvalue_total.mzn")]
	public async Task test_solve_unit_globals_nvalue_nvalue_total()
	{
		var path = "unit/globals/nvalue/nvalue_total.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"l1=1;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Fact(DisplayName="unit/globals/regular/globals_regular.mzn")]
	public async Task test_solve_unit_globals_regular_globals_regular()
	{
		var path = "unit/globals/regular/globals_regular.mzn";
		var solver = "gecode";
		var solutions = new List<string> {
			"reg_input=[1,2,3,3,3,2,1];reg_input2=[1,2,3,3,3,3,3,3,3,2,1];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="examples/battleships_4.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_4(string solver)
	{
		var path = "examples/battleships_4.mzn";
		var solutions = new List<string> {
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,1,0,1,0,0],[0,0,0,0,0,2,0,2,0,0,0,0],[0,0,0,0,0,3,0,3,0,0,1,0],[0,1,2,0,0,4,0,0,0,0,2,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,0,2,0,0],[0,1,0,0,0,0,0,0,0,3,0,0],[0,0,0,0,0,1,2,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,2,0],[0,0,0,0,0,1,2,0,0,0,0,0],[0,1,2,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,1,2,3,4,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0,2,0,0],[0,0,0,0,0,1,0,0,0,3,0,0],[0,0,0,0,0,2,0,1,0,0,0,0],[0,0,0,0,0,3,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,1,0,0,1,0],[0,0,0,0,0,2,0,2,0,0,0,0],[0,1,0,0,0,3,0,3,0,0,0,0],[0,2,0,0,0,4,0,0,0,1,2,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,0,2,0,0],[0,0,1,0,0,0,0,0,0,3,0,0],[0,0,0,0,0,1,2,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,2,3,0,0,0],[0,1,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,1,2,3,0,0,0,0],[0,1,2,0,0,0,0,0,0,1,2,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,2,0,0,0,1,0,0],[0,0,0,0,0,3,0,0,0,2,0,0],[0,0,0,0,0,4,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,1,2,0],[0,0,0,0,0,2,0,1,0,0,0,0],[0,0,0,0,0,3,0,2,0,0,1,0],[0,1,2,0,0,4,0,3,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,0,2,0,0],[0,1,0,0,0,0,0,0,0,3,0,0],[0,0,0,0,0,1,2,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,2,3,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,2,0],[0,1,2,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,2,3,4,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,2,0,0],[0,0,0,0,0,2,0,1,0,0,0,0],[0,0,0,0,0,3,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="examples/battleships_7.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_7(string solver)
	{
		var path = "examples/battleships_7.mzn";
		var solutions = new List<string> {
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,2,0],[0,0,0,1,0,1,0,0,0,0,0,0],[0,0,0,2,0,2,0,0,0,0,0,0],[0,0,0,3,0,0,0,0,0,0,0,0],[0,0,0,4,0,0,1,2,3,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,2,0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0],[0,1,0,0,2,0,0,0,0,1,0,0],[0,0,0,0,3,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1,2,0,0],[0,2,0,1,0,0,0,0,0,0,0,0],[0,0,0,2,0,1,0,0,0,0,0,0],[0,0,0,3,0,0,0,0,0,0,0,0],[0,0,0,4,0,1,2,3,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0,1,0,0],[0,0,0,0,2,0,0,0,0,0,0,0],[0,1,2,0,3,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,2,0],[0,2,0,1,0,0,0,0,0,0,0,0],[0,0,0,2,0,1,0,0,0,0,0,0],[0,0,0,3,0,0,0,0,0,0,0,0],[0,0,0,4,0,1,2,3,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,0,0,0,0,0,0],[0,0,0,0,3,0,0,0,1,2,0,0],[0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,2,0],[0,0,0,1,0,1,0,0,0,0,0,0],[0,0,0,2,0,2,0,0,0,0,0,0],[0,0,0,3,0,0,0,0,0,0,0,0],[0,0,0,4,0,0,0,1,2,3,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,0,0,0,0,0,0],[0,1,2,0,3,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,2,0],[0,2,0,1,0,0,0,0,0,0,0,0],[0,0,0,2,0,1,0,0,0,0,0,0],[0,0,0,3,0,0,0,0,0,0,0,0],[0,0,0,4,0,1,2,3,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,1,0,0,0],[0,0,0,0,2,0,0,0,0,0,0,0],[0,1,2,0,3,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,2,0],[0,0,0,1,0,1,0,0,0,0,0,0],[0,0,0,2,0,2,0,0,0,0,0,0],[0,0,0,3,0,0,0,0,0,0,0,0],[0,1,0,4,0,0,1,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,2,3,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0],[0,1,2,0,2,0,0,0,0,0,0,0],[0,0,0,0,3,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,2,0],[0,0,0,1,0,1,0,0,0,0,0,0],[0,0,0,2,0,2,0,0,0,0,0,0],[0,0,0,3,0,0,0,0,0,0,0,0],[0,0,0,4,0,0,1,2,3,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,1,0,0,1,0,0],[0,0,0,0,1,0,0,0,0,0,0,0],[0,1,2,0,2,0,0,0,0,0,0,0],[0,0,0,0,3,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
			"a=[[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,1,2,0],[0,0,0,1,0,1,0,0,0,0,0,0],[0,0,0,2,0,2,0,0,0,0,0,0],[0,0,0,3,0,0,0,0,0,0,0,0],[0,0,0,4,0,0,0,1,2,3,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,2,0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0],[0,1,0,0,2,0,1,0,0,0,0,0],[0,0,0,0,3,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="examples/factory_planning_instance.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_factory_planning_instance(string solver)
	{
		var path = "examples/factory_planning_instance.mzn";
		var solutions = new List<string> {
			"last_step=5;",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="examples/knights.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_knights(string solver)
	{
		var path = "examples/knights.mzn";
		var solutions = new List<string> {
			"p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="examples/magicsq_4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_4(string solver)
	{
		var path = "examples/magicsq_4.mzn";
		var solutions = new List<string> {
			"a=[[16,1,15,2],[5,8,10,11],[4,13,3,14],[9,12,6,7]];",
			"a=[[12,1,14,7],[15,4,9,6],[2,13,8,11],[5,16,3,10]];",
			"a=[[10,5,11,8],[6,9,7,12],[3,4,14,13],[15,16,2,1]];",
			"a=[[10,11,5,8],[6,7,9,12],[3,2,16,13],[15,14,4,1]];",
			"a=[[16,2,9,7],[3,13,6,12],[5,11,4,14],[10,8,15,1]];",
			"a=[[8,11,6,9],[13,7,10,4],[12,14,3,5],[1,2,15,16]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="examples/magicsq_5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_5(string solver)
	{
		var path = "examples/magicsq_5.mzn";
		var solutions = new List<string> {
			"a=[[20,7,3,24,11],[4,19,14,10,18],[6,9,17,21,12],[13,5,16,8,23],[22,25,15,2,1]];",
			"a=[[16,5,4,17,23],[9,18,8,6,24],[12,7,11,21,14],[13,10,20,19,3],[15,25,22,2,1]];",
			"a=[[7,5,9,21,23],[19,14,22,6,4],[25,24,11,3,2],[1,12,15,17,20],[13,10,8,18,16]];",
			"a=[[23,5,13,17,7],[3,21,9,14,18],[6,4,12,24,19],[11,10,16,8,20],[22,25,15,2,1]];",
			"a=[[25,5,9,3,23],[4,24,15,14,8],[20,7,1,16,21],[6,17,18,13,11],[10,12,22,19,2]];",
			"a=[[11,21,17,10,6],[22,8,12,19,4],[16,15,18,9,7],[14,20,5,3,23],[2,1,13,24,25]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="examples/oss.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_oss(string solver)
	{
		var path = "examples/oss.mzn";
		var solutions = new List<string> {
			"makespan=1168;objective=1168;start=[[507,0,6],[0,168,663],[168,663,339]];",
			"makespan=1168;objective=1168;start=[[333,1162,0],[1000,0,657],[0,657,333]];",
			"makespan=1168;objective=1168;start=[[339,0,6],[0,168,663],[168,663,339]];",
			"makespan=1168;objective=1168;start=[[0,1162,829],[1000,505,0],[829,0,505]];",
			"makespan=1168;objective=1168;start=[[339,1162,0],[1000,168,657],[161,657,333]];",
			"makespan=1168;objective=1168;start=[[503,0,6],[0,169,820],[168,663,339]];",
			"makespan=1168;objective=1168;start=[[507,0,6],[0,174,825],[168,663,339]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="examples/packing.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_packing(string solver)
	{
		var path = "examples/packing.mzn";
		var solutions = new List<string> {
			"x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="examples/template_design.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_template_design(string solver)
	{
		var path = "examples/template_design.mzn";
		var solutions = new List<string> {
			"Production=442;R=[167,275];Surplus=313;objective=442;p=[[0,1],[2,0],[1,1],[3,0],[3,0],[0,3],[0,4]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

	[Theory(DisplayName="examples/wolf_goat_cabbage.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_wolf_goat_cabbage_2(string solver)
	{
		var path = "examples/wolf_goat_cabbage.mzn";
		var solutions = new List<string> {
			"cabbage=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];farmer=[[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[false,true,false],[true,false,false],[true,false,false],[true,false,false]];goat=[[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[false,true,false],[true,false,false],[true,false,false],[true,false,false]];wolf=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];",
			"cabbage=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];farmer=[[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[true,false,false],[true,false,false]];goat=[[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[true,false,false],[true,false,false]];wolf=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];",
			"cabbage=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];farmer=[[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];goat=[[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];wolf=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];",
			"cabbage=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];farmer=[[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false]];goat=[[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false]];wolf=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];",
			"cabbage=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];farmer=[[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[true,false,false],[true,false,false],[false,true,false],[true,false,false]];goat=[[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[true,false,false],[true,false,false],[false,true,false],[true,false,false]];wolf=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];",
			"cabbage=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];farmer=[[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[false,true,false],[true,false,false],[false,true,false],[true,false,false]];goat=[[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[false,true,false],[true,false,false],[false,true,false],[true,false,false]];wolf=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];",
			"cabbage=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];farmer=[[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];goat=[[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];wolf=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];",
			"cabbage=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];farmer=[[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[true,false,false]];goat=[[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[true,false,false]];wolf=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];",
			"cabbage=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];farmer=[[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,false,true],[false,true,false],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false]];goat=[[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false]];wolf=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];",
			"cabbage=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];farmer=[[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[true,false,false],[true,false,false]];goat=[[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[false,true,false],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[false,true,false],[true,false,false],[true,false,false]];wolf=[[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,false,true],[false,true,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false],[true,false,false]];",
			};
		var args = new List<string>();
		await TestAllSolutions(path, solver, solutions, args);
	}

}

