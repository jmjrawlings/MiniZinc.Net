/*
<auto-generated>
This file has been auto generated by the following command:
dotnet run --project ./build/Make/Make.csproj --make-client-tests
</auto-generated>
*/
#nullable enable

public class ClientIntegrationTests : ClientTest
{

	public ClientIntegrationTests(ITestOutputHelper output, ClientFixture fixture) : base(output, fixture)
	{
	}

	[Theory(DisplayName="unit/test-globals-float.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_test_globals_float(string solver)
	{
		await Test(
			path: "unit/test-globals-float.mzn",
			solver: solver,
			solutions: ["""inc_avf=[1.0,2.0,2.0];min_vf1=0.0;min_vf2=0.0;max_vf1=9.9;max_vf2=0.0;""","""inc_avf=[1.0,2.0,2.0];min_vf1=0.0;min_vf2=0.0;max_vf1=9.9;max_vf2=9.9;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/compilation/annotate_bool_literal.mzn")]
	public async Task test_solve_unit_compilation_annotate_bool_literal()
	{
		await Test(
			path: "unit/compilation/annotate_bool_literal.mzn",
			solver: "gecode",
			solutions: ["""x=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/compilation/assert_dbg_ignore.mzn")]
	public async Task test_solve_unit_compilation_assert_dbg_ignore()
	{
		await Test(
			path: "unit/compilation/assert_dbg_ignore.mzn",
			solver: "gecode",
			solutions: ["""x=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/compilation/debug_mode_false.mzn")]
	public async Task test_solve_unit_compilation_debug_mode_false()
	{
		await Test(
			path: "unit/compilation/debug_mode_false.mzn",
			solver: "gecode",
			solutions: ["""b=false;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/compilation/debug_mode_true.mzn")]
	public async Task test_solve_unit_compilation_debug_mode_true()
	{
		await Test(
			path: "unit/compilation/debug_mode_true.mzn",
			solver: "gecode",
			solutions: ["""b=true;"""],
			args: ["--debug"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/compilation/has_ann.mzn")]
	public async Task test_solve_unit_compilation_has_ann()
	{
		await Test(
			path: "unit/compilation/has_ann.mzn",
			solver: "gecode",
			solutions: ["""b=true;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/compilation/if_then_no_else.mzn")]
	public async Task test_solve_unit_compilation_if_then_no_else()
	{
		await Test(
			path: "unit/compilation/if_then_no_else.mzn",
			solver: "gecode",
			solutions: ["""b=true;s=;x=[];y=[];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/compilation/multiple_neg.mzn")]
	public async Task test_solve_unit_compilation_multiple_neg()
	{
		await Test(
			path: "unit/compilation/multiple_neg.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/compilation/par_arg_out_of_bounds.mzn")]
	public async Task test_solve_unit_compilation_par_arg_out_of_bounds()
	{
		await Test(
			path: "unit/compilation/par_arg_out_of_bounds.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/compilation/poly_overload.mzn")]
	public async Task test_solve_unit_compilation_poly_overload()
	{
		await Test(
			path: "unit/compilation/poly_overload.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/compilation/set2iter.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_compilation_set2iter(string solver)
	{
		await Test(
			path: "unit/compilation/set2iter.mzn",
			solver: solver,
			solutions: ["""x=2..3;y=4..5;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/division/test_div10.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_division_test_div10(string solver)
	{
		await Test(
			path: "unit/division/test_div10.mzn",
			solver: solver,
			solutions: ["""y=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/division/test_div11.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_division_test_div11(string solver)
	{
		await Test(
			path: "unit/division/test_div11.mzn",
			solver: solver,
			solutions: ["""y=0;""","""y=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/division/test_div12.mzn")]
	public async Task test_solve_unit_division_test_div12()
	{
		await Test(
			path: "unit/division/test_div12.mzn",
			solver: "gecode",
			solutions: ["""aCostSupport=0;mdl8_Z=0;"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/division/test_div8.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_division_test_div8(string solver)
	{
		await Test(
			path: "unit/division/test_div8.mzn",
			solver: solver,
			solutions: ["""y=0;""","""y=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/division/test_div_mod_bounds.mzn")]
	[InlineData("gecode")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_division_test_div_mod_bounds(string solver)
	{
		await Test(
			path: "unit/division/test_div_mod_bounds.mzn",
			solver: solver,
			solutions: ["""x=20;y=-3;z=-6;zbnd=[-20,20];zfbnd=[0.15,1.333333333333333];zif=-6.666666666666667;tf=1.0;tfbnd=[0.1125,8.888888888888889];zmbnd=[0,6];zm2lb=0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/division/test_fldiv_01.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_division_test_fldiv_01(string solver)
	{
		await Test(
			path: "unit/division/test_fldiv_01.mzn",
			solver: solver,
			solutions: ["""x=0.3;y=2.0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/division/test_fldiv_02.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_division_test_fldiv_02(string solver)
	{
		await Test(
			path: "unit/division/test_fldiv_02.mzn",
			solver: solver,
			solutions: ["""x=2.0;y=1.5;z=1.5;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/annotated_expression_1.mzn")]
	public async Task test_solve_unit_general_annotated_expression_1()
	{
		await Test(
			path: "unit/general/annotated_expression_1.mzn",
			solver: "gecode",
			solutions: ["""x=3;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/array_intersect_context.mzn")]
	public async Task test_solve_unit_general_array_intersect_context()
	{
		await Test(
			path: "unit/general/array_intersect_context.mzn",
			solver: "gecode",
			solutions: ["""x=[{1},{2},{3}];b=true;""","""x=[{1,2,3},{1,2,3},{1,2,3}];b=false;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/array_param_non_array_return.mzn")]
	public async Task test_solve_unit_general_array_param_non_array_return()
	{
		await Test(
			path: "unit/general/array_param_non_array_return.mzn",
			solver: "gecode",
			solutions: ["""x=[1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/array_union_intersect_enum.mzn")]
	public async Task test_solve_unit_general_array_union_intersect_enum()
	{
		await Test(
			path: "unit/general/array_union_intersect_enum.mzn",
			solver: "gecode",
			solutions: ["""x=[{A},{B},{C}];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/bind_par_opt.mzn")]
	public async Task test_solve_unit_general_bind_par_opt()
	{
		await Test(
			path: "unit/general/bind_par_opt.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Unsatisfiable]
		);
	}

	[Fact(DisplayName="unit/general/bin_pack_multiobj.mzn", Skip="Solver not supported")]
	public async Task test_solve_unit_general_bin_pack_multiobj()
	{
		await Test(
			path: "unit/general/bin_pack_multiobj.mzn",
			solver: "gurobi",
			solutions: ["""load=[3,8,10];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/builtins_arg_max.mzn")]
	public async Task test_solve_unit_general_builtins_arg_max()
	{
		await Test(
			path: "unit/general/builtins_arg_max.mzn",
			solver: "gecode",
			solutions: ["""bool_output=3;int_output=1;float_output=2;indexed_output=4;enumed_output=TWO;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/builtins_debug.mzn")]
	public async Task test_solve_unit_general_builtins_debug()
	{
		await Test(
			path: "unit/general/builtins_debug.mzn",
			solver: "gecode",
			solutions: ["""assert_par_int=1;assert_var_int=2;assert_par_opt_int=3;assert_var_opt_int=4;assert_array_of_par_int=[1];assert_array_of_var_int=[2];assert_array_of_par_opt_int=[3];assert_array_of_var_opt_int=[4];trace_par_int=1;trace_var_int=2;trace_par_opt_int=3;trace_var_opt_int=4;trace_array_of_par_int=[1];trace_array_of_var_int=[2];trace_array_of_par_opt_int=[3];trace_array_of_var_opt_int=[4];logstream=trace_logstream_par_inttrace_logstream_var_inttrace_logstream_par_opt_inttrace_logstream_var_opt_inttrace_logstream_array_of_par_inttrace_logstream_array_of_var_inttrace_logstream_array_of_par_opt_inttrace_logstream_array_of_var_opt_int;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/comprehension_cv_struct.mzn")]
	public async Task test_solve_unit_general_comprehension_cv_struct()
	{
		await Test(
			path: "unit/general/comprehension_cv_struct.mzn",
			solver: "gecode",
			solutions: ["""x=1;z=[<>];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/comprehension_var_ub.mzn")]
	public async Task test_solve_unit_general_comprehension_var_ub()
	{
		await Test(
			path: "unit/general/comprehension_var_ub.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/cse_ctx.mzn")]
	public async Task test_solve_unit_general_cse_ctx()
	{
		await Test(
			path: "unit/general/cse_ctx.mzn",
			solver: "gecode",
			solutions: ["""x=1;b=true;a=true;c=false;""","""x=0;b=false;a=false;c=true;""","""x=0;b=false;a=true;c=true;""","""x=1;b=true;a=false;c=true;"""],
			args: ["-G std"],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/enum_constructor_quoting.mzn")]
	public async Task test_solve_unit_general_enum_constructor_quoting()
	{
		await Test(
			path: "unit/general/enum_constructor_quoting.mzn",
			solver: "gecode",
			solutions: ["""_output_item='Q~'('F!'('"'));"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/enum_order.mzn")]
	public async Task test_solve_unit_general_enum_order()
	{
		await Test(
			path: "unit/general/enum_order.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/eval_par_opt_set.mzn")]
	public async Task test_solve_unit_general_eval_par_opt_set()
	{
		await Test(
			path: "unit/general/eval_par_opt_set.mzn",
			solver: "gecode",
			solutions: ["""x=<>;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/fix_struct.mzn")]
	public async Task test_solve_unit_general_fix_struct()
	{
		await Test(
			path: "unit/general/fix_struct.mzn",
			solver: "gecode",
			solutions: ["""x=(a:[1],b:1,);y=(a:[1],b:1,);"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/fn_par_array_undefined.mzn")]
	public async Task test_solve_unit_general_fn_par_array_undefined()
	{
		await Test(
			path: "unit/general/fn_par_array_undefined.mzn",
			solver: "gecode",
			solutions: ["""x=[2];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/infinite_domain_bind.mzn")]
	public async Task test_solve_unit_general_infinite_domain_bind()
	{
		await Test(
			path: "unit/general/infinite_domain_bind.mzn",
			solver: "gecode",
			solutions: ["""x=10;"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/let_struct_domain.mzn")]
	public async Task test_solve_unit_general_let_struct_domain()
	{
		await Test(
			path: "unit/general/let_struct_domain.mzn",
			solver: "gecode",
			solutions: ["""x=1;y=2;""","""x=2;y=2;""","""x=1;y=3;""","""x=2;y=3;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/md_exists.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_exists(string solver)
	{
		await Test(
			path: "unit/general/md_exists.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/md_exists.mzn")]
	public async Task test_solve_unit_general_md_exists_2()
	{
		await Test(
			path: "unit/general/md_exists.mzn",
			solver: "coin-bc",
			solutions: ["""b=true;bs=[true,true,false,false,false,false,false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/md_forall.mzn")]
	public async Task test_solve_unit_general_md_forall()
	{
		await Test(
			path: "unit/general/md_forall.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/md_forall.mzn")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_forall_2(string solver)
	{
		await Test(
			path: "unit/general/md_forall.mzn",
			solver: solver,
			solutions: ["""b=true;bs=[true,true,true,true,true,true,true,true];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/md_iffall.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_iffall(string solver)
	{
		await Test(
			path: "unit/general/md_iffall.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/md_iffall.mzn")]
	public async Task test_solve_unit_general_md_iffall_2()
	{
		await Test(
			path: "unit/general/md_iffall.mzn",
			solver: "coin-bc",
			solutions: ["""b=false;bs=[false,false,false,false,false,false,false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/md_product_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_product_int(string solver)
	{
		await Test(
			path: "unit/general/md_product_int.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/md_sum_float.mzn")]
	public async Task test_solve_unit_general_md_sum_float()
	{
		await Test(
			path: "unit/general/md_sum_float.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/md_sum_float.mzn")]
	public async Task test_solve_unit_general_md_sum_float_2()
	{
		await Test(
			path: "unit/general/md_sum_float.mzn",
			solver: "chuffed",
			solutions: ["""a=55.0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/md_sum_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_sum_int(string solver)
	{
		await Test(
			path: "unit/general/md_sum_int.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/md_xorall.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_md_xorall(string solver)
	{
		await Test(
			path: "unit/general/md_xorall.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/missing_ozn_decl.mzn")]
	public async Task test_solve_unit_general_missing_ozn_decl()
	{
		await Test(
			path: "unit/general/missing_ozn_decl.mzn",
			solver: "gecode",
			solutions: ["""I1=7;B2=true;B3=true;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/mortgage.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_general_mortgage(string solver)
	{
		await Test(
			path: "unit/general/mortgage.mzn",
			solver: solver,
			solutions: ["""P=373.0277986476333;mortgage=[260.3305785123967,136.3636363636363,0.0];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/negated_boolean_let.mzn")]
	public async Task test_solve_unit_general_negated_boolean_let()
	{
		await Test(
			path: "unit/general/negated_boolean_let.mzn",
			solver: "gecode",
			solutions: ["""x=2;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/nosets_empty.mzn")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_nosets_empty(string solver)
	{
		await Test(
			path: "unit/general/nosets_empty.mzn",
			solver: solver,
			solutions: ["""x={};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/overload_bottom.mzn")]
	public async Task test_solve_unit_general_overload_bottom()
	{
		await Test(
			path: "unit/general/overload_bottom.mzn",
			solver: "gecode",
			solutions: ["""x={};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_1.mzn")]
	public async Task test_solve_unit_general_pow_1()
	{
		await Test(
			path: "unit/general/pow_1.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_2.mzn")]
	public async Task test_solve_unit_general_pow_2()
	{
		await Test(
			path: "unit/general/pow_2.mzn",
			solver: "gecode",
			args: ["-D \"x = -2..2; y = 0\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_2.mzn")]
	public async Task test_solve_unit_general_pow_2_2()
	{
		await Test(
			path: "unit/general/pow_2.mzn",
			solver: "gecode",
			args: ["-D \"x = -2..2; y = 1\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_2.mzn")]
	public async Task test_solve_unit_general_pow_2_3()
	{
		await Test(
			path: "unit/general/pow_2.mzn",
			solver: "gecode",
			args: ["-D \"x = 0..1; y = 2\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_2.mzn")]
	public async Task test_solve_unit_general_pow_2_4()
	{
		await Test(
			path: "unit/general/pow_2.mzn",
			solver: "gecode",
			args: ["-D \"x = -1..1; y = 3\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_2.mzn")]
	public async Task test_solve_unit_general_pow_2_5()
	{
		await Test(
			path: "unit/general/pow_2.mzn",
			solver: "gecode",
			args: ["-D \"x = 1..3; y = -1\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_2.mzn")]
	public async Task test_solve_unit_general_pow_2_6()
	{
		await Test(
			path: "unit/general/pow_2.mzn",
			solver: "gecode",
			args: ["-D \"x = 2..3; y = 2\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_2.mzn")]
	public async Task test_solve_unit_general_pow_2_7()
	{
		await Test(
			path: "unit/general/pow_2.mzn",
			solver: "gecode",
			args: ["-D \"x = -1..2; y = -2\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_3.mzn")]
	public async Task test_solve_unit_general_pow_3()
	{
		await Test(
			path: "unit/general/pow_3.mzn",
			solver: "gecode",
			args: ["-D \"x = 0..1; y = 0..1\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_3.mzn")]
	public async Task test_solve_unit_general_pow_3_2()
	{
		await Test(
			path: "unit/general/pow_3.mzn",
			solver: "gecode",
			args: ["-D \"x = 0..1; y = 1..2\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_3.mzn")]
	public async Task test_solve_unit_general_pow_3_3()
	{
		await Test(
			path: "unit/general/pow_3.mzn",
			solver: "gecode",
			args: ["-D \"x = -1..2; y = 0..2\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_3.mzn")]
	public async Task test_solve_unit_general_pow_3_4()
	{
		await Test(
			path: "unit/general/pow_3.mzn",
			solver: "gecode",
			args: ["-D \"x = -2..2 diff {0}; y = -2..-1\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_3.mzn")]
	public async Task test_solve_unit_general_pow_3_5()
	{
		await Test(
			path: "unit/general/pow_3.mzn",
			solver: "gecode",
			args: ["-D \"x = -2..2 diff {0}; y = -1..2\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_3.mzn")]
	public async Task test_solve_unit_general_pow_3_6()
	{
		await Test(
			path: "unit/general/pow_3.mzn",
			solver: "gecode",
			args: ["-D \"x = -1..1; y = -1..1\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_4.mzn")]
	public async Task test_solve_unit_general_pow_4()
	{
		await Test(
			path: "unit/general/pow_4.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/pow_bounds.mzn")]
	public async Task test_solve_unit_general_pow_bounds()
	{
		await Test(
			path: "unit/general/pow_bounds.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/quoted_id_1.mzn")]
	public async Task test_solve_unit_general_quoted_id_1()
	{
		await Test(
			path: "unit/general/quoted_id_1.mzn",
			solver: "gecode",
			solutions: ["""hello!=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/quoted_id_2.mzn")]
	public async Task test_solve_unit_general_quoted_id_2()
	{
		await Test(
			path: "unit/general/quoted_id_2.mzn",
			solver: "gecode",
			solutions: ["""x=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/quoted_id_3.mzn")]
	public async Task test_solve_unit_general_quoted_id_3()
	{
		await Test(
			path: "unit/general/quoted_id_3.mzn",
			solver: "gecode",
			solutions: ["""_output_item=A?;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/quoted_id_4.mzn")]
	public async Task test_solve_unit_general_quoted_id_4()
	{
		await Test(
			path: "unit/general/quoted_id_4.mzn",
			solver: "gecode",
			solutions: ["""_output_item=Foo~(A?);"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/range_var_enum.mzn")]
	public async Task test_solve_unit_general_range_var_enum()
	{
		await Test(
			path: "unit/general/range_var_enum.mzn",
			solver: "gecode",
			solutions: ["""x_to_y={A,B,C};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/reverse_map_path.mzn")]
	public async Task test_solve_unit_general_reverse_map_path()
	{
		await Test(
			path: "unit/general/reverse_map_path.mzn",
			solver: "gecode",
			solutions: ["""x=[<>,<>];""","""x=[1,<>];""","""x=[<>,1];""","""x=[1,1];"""],
			args: ["--keep-paths"],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/string_length.mzn")]
	public async Task test_solve_unit_general_string_length()
	{
		await Test(
			path: "unit/general/string_length.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/string_split.mzn")]
	public async Task test_solve_unit_general_string_split()
	{
		await Test(
			path: "unit/general/string_split.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/struct_flat_cv_path.mzn")]
	public async Task test_solve_unit_general_struct_flat_cv_path()
	{
		await Test(
			path: "unit/general/struct_flat_cv_path.mzn",
			solver: "gecode",
			solutions: ["""a=2;b=1;c=[1,2,3,4];"""],
			args: ["--keep-paths"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test-search1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_general_test_search1(string solver)
	{
		await Test(
			path: "unit/general/test-search1.mzn",
			solver: solver,
			solutions: ["""x=3;y=8;"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/test_mod_bounds.mzn")]
	public async Task test_solve_unit_general_test_mod_bounds()
	{
		await Test(
			path: "unit/general/test_mod_bounds.mzn",
			solver: "gecode",
			solutions: ["""b=0..2;c=-2..2;d=-2..0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test_negated_and.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_negated_and(string solver)
	{
		await Test(
			path: "unit/general/test_negated_and.mzn",
			solver: solver,
			solutions: ["""x=false;y=false;z=false;""","""x=false;y=false;z=true;""","""x=false;y=true;z=false;""","""x=false;y=true;z=true;""","""x=true;y=false;z=false;""","""x=true;y=false;z=true;""","""x=true;y=true;z=false;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test_negated_and_or.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_negated_and_or(string solver)
	{
		await Test(
			path: "unit/general/test_negated_and_or.mzn",
			solver: solver,
			solutions: ["""x=true;y=false;z=false;""","""x=false;y=true;z=false;""","""x=false;y=false;z=false;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test_negated_let_good_2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_negated_let_good_2(string solver)
	{
		await Test(
			path: "unit/general/test_negated_let_good_2.mzn",
			solver: solver,
			solutions: ["""x=[0];""","""x=[2];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test_negated_or.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_negated_or(string solver)
	{
		await Test(
			path: "unit/general/test_negated_or.mzn",
			solver: solver,
			solutions: ["""x=false;y=false;z=false;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test_queens.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_queens(string solver)
	{
		await Test(
			path: "unit/general/test_queens.mzn",
			solver: solver,
			solutions: ["""q=[9,13,2,8,11,20,10,6,19,15,18,12,7,16,4,17,14,5,3,1];""","""q=[9,7,10,14,11,15,4,12,5,13,1,3,6,8,2,17,19,16,18,20];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/test_rounding_a.mzn")]
	public async Task test_solve_unit_general_test_rounding_a()
	{
		await Test(
			path: "unit/general/test_rounding_a.mzn",
			solver: "gecode",
			solutions: ["""_output_item=-2.00, -2, -2, -2 OK;x=-2.0;""","""_output_item=-1.75, -1, -2, -2 OK;x=-1.75;""","""_output_item=-1.50, -1, -2, -2 OK;x=-1.5;""","""_output_item=-1.25, -1, -2, -1 OK;x=-1.25;""","""_output_item=-1.00, -1, -1, -1 OK;x=-1.0;""","""_output_item=-0.25, 0, -1, 0 OK;x=-0.25;""","""_output_item=-0.00, 0, 0, 0 OK;x=0.0;""","""_output_item=0.00, 0, 0, 0 OK;x=0.0;""","""_output_item=0.25, 1, 0, 0 OK;x=0.25;""","""_output_item=0.50, 1, 0, 1 OK;x=0.5;""","""_output_item=0.75, 1, 0, 1 OK;x=0.75;""","""_output_item=1.00, 1, 1, 1 OK;x=1.0;""","""_output_item=1.25, 2, 1, 1 OK;x=1.25;""","""_output_item=1.50, 2, 1, 2 OK;x=1.5;""","""_output_item=1.75, 2, 1, 2 OK;x=1.75;""","""_output_item=2.00, 2, 2, 2 OK;x=2.0;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/test_rounding_b.mzn")]
	public async Task test_solve_unit_general_test_rounding_b()
	{
		await Test(
			path: "unit/general/test_rounding_b.mzn",
			solver: "gecode",
			solutions: ["""_output_item=0.00, 0, 0, 0 OK;x=0.0;""","""_output_item=0.25, 1, 0, 0 OK;x=0.25;""","""_output_item=0.50, 1, 0, 1 OK;x=0.5;""","""_output_item=0.75, 1, 0, 1 OK;x=0.75;""","""_output_item=1.00, 1, 1, 1 OK;x=1.0;""","""_output_item=1.25, 2, 1, 1 OK;x=1.25;""","""_output_item=1.50, 2, 1, 2 OK;x=1.5;""","""_output_item=1.75, 2, 1, 2 OK;x=1.75;""","""_output_item=2.00, 2, 2, 2 OK;x=2.0;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/test_rounding_c.mzn")]
	public async Task test_solve_unit_general_test_rounding_c()
	{
		await Test(
			path: "unit/general/test_rounding_c.mzn",
			solver: "gecode",
			solutions: ["""_output_item=-2.00, -2, -2, -2 OK;x=-2.0;""","""_output_item=-1.75, -1, -2, -2 OK;x=-1.75;""","""_output_item=-1.50, -1, -2, -2 OK;x=-1.5;""","""_output_item=-1.25, -1, -2, -1 OK;x=-1.25;""","""_output_item=-1.00, -1, -1, -1 OK;x=-1.0;""","""_output_item=-0.25, 0, -1, 0 OK;x=-0.25;""","""_output_item=-0.00, 0, 0, 0 OK;x=0.0;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test_same.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_general_test_same(string solver)
	{
		await Test(
			path: "unit/general/test_same.mzn",
			solver: solver,
			solutions: ["""if5_5=1;if5f_5=0;if5_4=0;if5f_5f=1;if2_set2_4=0;ifTwoVars=0;ifTwoOptVars=0;ifEqualInitVars=1;ifEqualChainInitVars=1;ifOneVar=1;ifOneOptVar=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/test_set_lt_1.mzn")]
	public async Task test_solve_unit_general_test_set_lt_1()
	{
		await Test(
			path: "unit/general/test_set_lt_1.mzn",
			solver: "chuffed",
			solutions: ["""sets=[1..3,{1,2,4},{1,2,5},{1,2,6},{1,3,4},{1,3,5},{1,3,6},{1,4,5},{1,4,6},{1,5,6},2..4,{2,3,5},{2,3,6},{2,4,5},{2,4,6},{2,5,6},3..5,{3,4,6},{3,5,6},4..6];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/test_set_lt_2.mzn")]
	public async Task test_solve_unit_general_test_set_lt_2()
	{
		await Test(
			path: "unit/general/test_set_lt_2.mzn",
			solver: "chuffed",
			solutions: ["""sets=[{},{1},1..2,1..3,{1,3},{2},2..3,{3}];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/test_set_lt_2.mzn")]
	public async Task test_solve_unit_general_test_set_lt_2_2()
	{
		await Test(
			path: "unit/general/test_set_lt_2.mzn",
			solver: "coin-bc",
			solutions: ["""sets=[{},{1},1..2,1..3,{1,3},{2},2..3,{3}];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test_set_lt_3.mzn")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_general_test_set_lt_3(string solver)
	{
		await Test(
			path: "unit/general/test_set_lt_3.mzn",
			solver: solver,
			solutions: ["""y={1,4};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test_times_int_float_eq.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_general_test_times_int_float_eq(string solver)
	{
		await Test(
			path: "unit/general/test_times_int_float_eq.mzn",
			solver: solver,
			solutions: ["""objective=-5;x=5;y=6;z=30;xf=5.0;yf=6.0;"""],
			args: ["-D QuadrFloat=true;QuadrIntCard=0"],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test_times_int_float_eq__defaultopt.mzn")]
	[InlineData("gurobi", Skip="Solver not supported")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_general_test_times_int_float_eq__defaultopt(string solver)
	{
		await Test(
			path: "unit/general/test_times_int_float_eq__defaultopt.mzn",
			solver: solver,
			solutions: ["""objective=-5;x=5;y=6;z=30;xf=5.0;yf=6.0;"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/test_to_enum.mzn")]
	public async Task test_solve_unit_general_test_to_enum()
	{
		await Test(
			path: "unit/general/test_to_enum.mzn",
			solver: "gecode",
			solutions: ["""par_int=b;var_int=c;array_of_int=[a,b,c];array_of_var_int=[a,b,c];array_of_set_of_int=[{a},{a,b},{a,b,c}];array_of_var_set_of_int=[{a},{a,b},{a,b,c}];set_of_int={a,b,c};var_set_of_int={a,b,c};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test_var_prod.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_general_test_var_prod(string solver)
	{
		await Test(
			path: "unit/general/test_var_prod.mzn",
			solver: solver,
			solutions: ["""p=1;xs=[1,1,1,1];""","""p=140;xs=[2,7,10,1];""","""p=700;xs=[10,10,7,1];""","""p=1000;xs=[1,10,10,10];""","""p=1000;xs=[10,10,1,10];""","""p=1000;xs=[10,10,10,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/general/test_var_set_element.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_general_test_var_set_element(string solver)
	{
		await Test(
			path: "unit/general/test_var_set_element.mzn",
			solver: solver,
			solutions: ["""a=[{},{},{}];s={};x=3;""","""a=[1..5,1..5,1..5];s=1..5;x=2;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/general/unicode_file_name_μ.mzn")]
	public async Task test_solve_unit_general_unicode_file_name_μ()
	{
		await Test(
			path: "unit/general/unicode_file_name_μ.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/typecheck_globals.mzn")]
	[InlineData("chuffed")]
	[InlineData("gecode")]
	[InlineData("gecode_presolver", Skip="Solver not supported")]
	[InlineData("highs")]
	public async Task test_solve_unit_globals_typecheck_globals(string solver)
	{
		await Test(
			path: "unit/globals/typecheck_globals.mzn",
			solver: solver,
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/anon_enum_json.mzn")]
	public async Task test_solve_unit_json_anon_enum_json()
	{
		await Test(
			path: "unit/json/anon_enum_json.mzn",
			solver: "gecode",
			solutions: ["""x=Foo(1);y=Foo(2);"""],
			args: ["--data \"unit/json/anon_enum_json.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/coerce_enum_str.mzn")]
	public async Task test_solve_unit_json_coerce_enum_str()
	{
		await Test(
			path: "unit/json/coerce_enum_str.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			args: ["--data \"unit/json/coerce_enum_str.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/coerce_indices.mzn")]
	public async Task test_solve_unit_json_coerce_indices()
	{
		await Test(
			path: "unit/json/coerce_indices.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			args: ["--data \"unit/json/coerce_indices.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/coerce_set.mzn")]
	public async Task test_solve_unit_json_coerce_set()
	{
		await Test(
			path: "unit/json/coerce_set.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			args: ["--data \"unit/json/coerce_set.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/enum_constructor_basic.mzn")]
	public async Task test_solve_unit_json_enum_constructor_basic()
	{
		await Test(
			path: "unit/json/enum_constructor_basic.mzn",
			solver: "gecode",
			solutions: ["""x=F(A);"""],
			args: ["--data \"unit/json/enum_constructor_basic.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/enum_constructor_basic_2.mzn")]
	public async Task test_solve_unit_json_enum_constructor_basic_2()
	{
		await Test(
			path: "unit/json/enum_constructor_basic_2.mzn",
			solver: "gecode",
			solutions: ["""x=F(A);"""],
			args: ["--data \"unit/json/enum_constructor_basic_2.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/enum_constructor_int.mzn")]
	public async Task test_solve_unit_json_enum_constructor_int()
	{
		await Test(
			path: "unit/json/enum_constructor_int.mzn",
			solver: "gecode",
			solutions: ["""x=Foo(2);"""],
			args: ["--data \"unit/json/enum_constructor_int.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/enum_constructor_nested.mzn")]
	public async Task test_solve_unit_json_enum_constructor_nested()
	{
		await Test(
			path: "unit/json/enum_constructor_nested.mzn",
			solver: "gecode",
			solutions: ["""x=G(F(A));"""],
			args: ["--data \"unit/json/enum_constructor_nested.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/enum_escaping.mzn")]
	public async Task test_solve_unit_json_enum_escaping()
	{
		await Test(
			path: "unit/json/enum_escaping.mzn",
			solver: "gecode",
			solutions: ["""x=";"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/float_json_exponent.mzn")]
	public async Task test_solve_unit_json_float_json_exponent()
	{
		await Test(
			path: "unit/json/float_json_exponent.mzn",
			solver: "gecode",
			solutions: ["""x=2.0e-05;y=1500.0;"""],
			args: ["--data \"unit/json/float_json_exponent.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/json_array2d_set.mzn")]
	public async Task test_solve_unit_json_json_array2d_set()
	{
		await Test(
			path: "unit/json/json_array2d_set.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			args: ["--data \"unit/json/json_array2d_set.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/json_enum_def.mzn")]
	public async Task test_solve_unit_json_json_enum_def()
	{
		await Test(
			path: "unit/json/json_enum_def.mzn",
			solver: "gecode",
			solutions: ["""w=A;x=D;y=G;z=J;"""],
			args: ["--data \"unit/json/json_enum_def.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/json_input_1.mzn")]
	public async Task test_solve_unit_json_json_input_1()
	{
		await Test(
			path: "unit/json/json_input_1.mzn",
			solver: "gecode",
			solutions: ["""int_set={1,2,4,5,7,9};float_set={1.0,2.0};array_1d_float=[1.0,2.0,3.0];array_2d_bool=[true];array_3d_int=[1,2,3,4,5,6,7,8];array_opt_float=[1.5,<>];x=1;y=2.0;z=true;o=<>;"""],
			args: ["--data \"unit/json/json_input_1.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/json_unicode_escapes.mzn")]
	public async Task test_solve_unit_json_json_unicode_escapes()
	{
		await Test(
			path: "unit/json/json_unicode_escapes.mzn",
			solver: "gecode",
			solutions: ["""a=A;mu=μ;arrow=↑;clef=𝄞;"""],
			args: ["--data \"unit/json/json_unicode_escapes.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/mult_dim_enum.mzn")]
	public async Task test_solve_unit_json_mult_dim_enum()
	{
		await Test(
			path: "unit/json/mult_dim_enum.mzn",
			solver: "gecode",
			solutions: ["""use_e=[A,B,B,C];"""],
			args: ["--data \"unit/json/mult_dim_enum.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/record_json_input.mzn")]
	public async Task test_solve_unit_json_record_json_input()
	{
		await Test(
			path: "unit/json/record_json_input.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			args: ["--data \"unit/json/record_json_input.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/json/tuple_json_input.mzn")]
	public async Task test_solve_unit_json_tuple_json_input()
	{
		await Test(
			path: "unit/json/tuple_json_input.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			args: ["--data \"unit/json/tuple_json_input.json\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/on_restart/complete.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_complete(string solver)
	{
		await Test(
			path: "unit/on_restart/complete.mzn",
			solver: solver,
			solutions: ["""x=3;"""],
			args: ["--restart constant","--restart-base 100"],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/on_restart/last_val_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_bool(string solver)
	{
		await Test(
			path: "unit/on_restart/last_val_bool.mzn",
			solver: solver,
			solutions: ["""x=4;y=true;"""],
			args: ["--restart constant","--restart-base 100"],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/on_restart/last_val_float.mzn")]
	public async Task test_solve_unit_on_restart_last_val_float()
	{
		await Test(
			path: "unit/on_restart/last_val_float.mzn",
			solver: "gecode",
			solutions: ["""x=4;y=0.85;"""],
			args: ["--restart constant","--restart-base 100"],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/on_restart/last_val_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_int(string solver)
	{
		await Test(
			path: "unit/on_restart/last_val_int.mzn",
			solver: solver,
			solutions: ["""x=4;y=3;"""],
			args: ["--restart constant","--restart-base 100"],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/on_restart/last_val_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_last_val_set(string solver)
	{
		await Test(
			path: "unit/on_restart/last_val_set.mzn",
			solver: solver,
			solutions: ["""x=4;y={1,2,4,8};"""],
			args: ["--restart constant","--restart-base 100"],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/on_restart/sol_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_bool(string solver)
	{
		await Test(
			path: "unit/on_restart/sol_bool.mzn",
			solver: solver,
			solutions: ["""x=3;is_even=false;y=true;"""],
			args: ["--restart constant","--restart-base 100"],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/on_restart/sol_float.mzn")]
	public async Task test_solve_unit_on_restart_sol_float()
	{
		await Test(
			path: "unit/on_restart/sol_float.mzn",
			solver: "gecode",
			solutions: ["""x=3;y=2.0;"""],
			args: ["--restart constant","--restart-base 100"],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/on_restart/sol_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_int(string solver)
	{
		await Test(
			path: "unit/on_restart/sol_int.mzn",
			solver: solver,
			solutions: ["""x=3;y=2;"""],
			args: ["--restart constant","--restart-base 100"],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/on_restart/sol_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_on_restart_sol_set(string solver)
	{
		await Test(
			path: "unit/on_restart/sol_set.mzn",
			solver: solver,
			solutions: ["""x={};y={1};"""],
			args: ["--restart constant","--restart-base 100"],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/conj_absent_1.mzn")]
	public async Task test_solve_unit_optional_conj_absent_1()
	{
		await Test(
			path: "unit/optional/conj_absent_1.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/conj_absent_2.mzn")]
	public async Task test_solve_unit_optional_conj_absent_2()
	{
		await Test(
			path: "unit/optional/conj_absent_2.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/fn_return_array_absent.mzn")]
	public async Task test_solve_unit_optional_fn_return_array_absent()
	{
		await Test(
			path: "unit/optional/fn_return_array_absent.mzn",
			solver: "gecode",
			solutions: ["""x=[<>];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/opt_array_access.mzn")]
	public async Task test_solve_unit_optional_opt_array_access()
	{
		await Test(
			path: "unit/optional/opt_array_access.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/opt_math_abs.mzn")]
	public async Task test_solve_unit_optional_opt_math_abs()
	{
		await Test(
			path: "unit/optional/opt_math_abs.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/opt_math_neg.mzn")]
	public async Task test_solve_unit_optional_opt_math_neg()
	{
		await Test(
			path: "unit/optional/opt_math_neg.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test-opt-bool-2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_bool_2(string solver)
	{
		await Test(
			path: "unit/optional/test-opt-bool-2.mzn",
			solver: solver,
			solutions: ["""x=true;y=true;""","""x=true;y=<>;""","""x=<>;y=true;""","""x=<>;y=<>;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test-opt-bool-3.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_bool_3(string solver)
	{
		await Test(
			path: "unit/optional/test-opt-bool-3.mzn",
			solver: solver,
			solutions: ["""x=true;y=true;""","""x=true;y=<>;""","""x=<>;y=true;""","""x=false;y=true;""","""x=true;y=false;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test-opt-bool-4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_bool_4(string solver)
	{
		await Test(
			path: "unit/optional/test-opt-bool-4.mzn",
			solver: solver,
			solutions: ["""x=true;y=false;""","""x=false;y=true;""","""x=<>;y=<>;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test-opt-bool-5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_bool_5(string solver)
	{
		await Test(
			path: "unit/optional/test-opt-bool-5.mzn",
			solver: solver,
			solutions: ["""x=[<>,<>,<>];""","""x=[true,<>,<>];""","""x=[<>,true,<>];""","""x=[true,true,<>];""","""x=[<>,<>,true];""","""x=[true,<>,true];""","""x=[<>,true,true];""","""x=[true,true,true];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test-opt-bool-6.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_bool_6(string solver)
	{
		await Test(
			path: "unit/optional/test-opt-bool-6.mzn",
			solver: solver,
			solutions: ["""x=[true,<>,<>];""","""x=[true,false,<>];""","""x=[true,<>,false];""","""x=[true,false,false];""","""x=[<>,true,<>];""","""x=[false,true,<>];""","""x=[<>,true,false];""","""x=[false,true,false];""","""x=[true,true,<>];""","""x=[true,true,false];""","""x=[<>,<>,true];""","""x=[false,<>,true];""","""x=[<>,false,true];""","""x=[false,false,true];""","""x=[true,<>,true];""","""x=[true,false,true];""","""x=[<>,true,true];""","""x=[false,true,true];""","""x=[true,true,true];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test-opt-float-1.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_optional_test_opt_float_1(string solver)
	{
		await Test(
			path: "unit/optional/test-opt-float-1.mzn",
			solver: solver,
			solutions: ["""x=[1.0,<>];""","""x=[<>,1.0];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test-opt-if-then-else.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_opt_if_then_else(string solver)
	{
		await Test(
			path: "unit/optional/test-opt-if-then-else.mzn",
			solver: solver,
			solutions: ["""x=1;y=<>;p=false;a=1;b=<>;c=<>;""","""x=<>;y=1;p=false;a=1;b=1;c=<>;""","""x=<>;y=1;p=true;a=<>;b=<>;c=<>;""","""x=1;y=<>;p=true;a=<>;b=1;c=<>;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/test-opt-int-2.mzn")]
	public async Task test_solve_unit_optional_test_opt_int_2()
	{
		await Test(
			path: "unit/optional/test-opt-int-2.mzn",
			solver: "gecode",
			solutions: ["""x=[2,<>,<>];""","""x=[<>,2,<>];""","""x=[1,1,<>];""","""x=[<>,<>,2];""","""x=[1,<>,1];""","""x=[<>,1,1];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/test-opt-int-3.mzn")]
	public async Task test_solve_unit_optional_test_opt_int_3()
	{
		await Test(
			path: "unit/optional/test-opt-int-3.mzn",
			solver: "gecode",
			solutions: ["""x=[3,2,<>];""","""x=[2,3,<>];""","""x=[3,<>,2];""","""x=[2,<>,3];""","""x=[<>,3,2];""","""x=[<>,2,3];""","""x=[3,2,1];""","""x=[2,3,1];""","""x=[3,1,2];""","""x=[1,3,2];""","""x=[2,1,3];""","""x=[1,2,3];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/test_count_set.mzn")]
	public async Task test_solve_unit_optional_test_count_set()
	{
		await Test(
			path: "unit/optional/test_count_set.mzn",
			solver: "gecode",
			solutions: ["""i=0;x=6..10;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/test_deopt_absent.mzn")]
	public async Task test_solve_unit_optional_test_deopt_absent()
	{
		await Test(
			path: "unit/optional/test_deopt_absent.mzn",
			solver: "gecode",
			solutions: ["""b=true;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test_if_then_else_opt_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_if_then_else_opt_bool(string solver)
	{
		await Test(
			path: "unit/optional/test_if_then_else_opt_bool.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/test_if_then_else_opt_float.mzn")]
	public async Task test_solve_unit_optional_test_if_then_else_opt_float()
	{
		await Test(
			path: "unit/optional/test_if_then_else_opt_float.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test_if_then_else_opt_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_if_then_else_opt_int(string solver)
	{
		await Test(
			path: "unit/optional/test_if_then_else_opt_int.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test_if_then_else_var_opt_bool.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_if_then_else_var_opt_bool(string solver)
	{
		await Test(
			path: "unit/optional/test_if_then_else_var_opt_bool.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/test_if_then_else_var_opt_float.mzn")]
	public async Task test_solve_unit_optional_test_if_then_else_var_opt_float()
	{
		await Test(
			path: "unit/optional/test_if_then_else_var_opt_float.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test_if_then_else_var_opt_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_optional_test_if_then_else_var_opt_int(string solver)
	{
		await Test(
			path: "unit/optional/test_if_then_else_var_opt_int.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/optional/test_optional_not_absent.mzn")]
	[InlineData("chuffed")]
	[InlineData("gecode")]
	public async Task test_solve_unit_optional_test_optional_not_absent(string solver)
	{
		await Test(
			path: "unit/optional/test_optional_not_absent.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/test_opt_comprehension.mzn")]
	public async Task test_solve_unit_optional_test_opt_comprehension()
	{
		await Test(
			path: "unit/optional/test_opt_comprehension.mzn",
			solver: "gecode",
			solutions: ["""z=[false,false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/test_opt_dom_empty.mzn")]
	public async Task test_solve_unit_optional_test_opt_dom_empty()
	{
		await Test(
			path: "unit/optional/test_opt_dom_empty.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/optional/test_opt_dom_empty_no_absent_zero.mzn")]
	public async Task test_solve_unit_optional_test_opt_dom_empty_no_absent_zero()
	{
		await Test(
			path: "unit/optional/test_opt_dom_empty_no_absent_zero.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/arg-reif-output.mzn")]
	public async Task test_solve_unit_output_arg_reif_output()
	{
		await Test(
			path: "unit/output/arg-reif-output.mzn",
			solver: "gecode",
			solutions: ["""_output_item=WORKED;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/array_of_array.mzn")]
	public async Task test_solve_unit_output_array_of_array()
	{
		await Test(
			path: "unit/output/array_of_array.mzn",
			solver: "gecode",
			solutions: ["""x=[1,2,2];y=[1,1,2,2,2];z=[-1,1,0,2];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/ctx_ann.mzn")]
	public async Task test_solve_unit_output_ctx_ann()
	{
		await Test(
			path: "unit/output/ctx_ann.mzn",
			solver: "gecode",
			solutions: ["""c=5;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/format_justified_enums.mzn")]
	public async Task test_solve_unit_output_format_justified_enums()
	{
		await Test(
			path: "unit/output/format_justified_enums.mzn",
			solver: "gecode",
			solutions: ["""_output_item=>      [Hello, World]<;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/json_ann.mzn")]
	public async Task test_solve_unit_output_json_ann()
	{
		await Test(
			path: "unit/output/json_ann.mzn",
			solver: "gecode",
			solutions: ["""x=promise_total;y=expression_name("test");"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/json_multidim.mzn")]
	public async Task test_solve_unit_output_json_multidim()
	{
		await Test(
			path: "unit/output/json_multidim.mzn",
			solver: "gecode",
			solutions: ["""_output_item=[[{"e":"A"}, {"e":"B"}], [{"e":"C"}, {"e":"D"}]] [[{"e":"A"}, {"e":"B"}], [{"e":"C"}, {"e":"D"}]];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/local_output.mzn")]
	public async Task test_solve_unit_output_local_output()
	{
		await Test(
			path: "unit/output/local_output.mzn",
			solver: "gecode",
			solutions: ["""a=[1];x@14.5-28|a@13.6=[1];_output_item=predicate: [1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/no_output_reverse_mapped_var.mzn")]
	public async Task test_solve_unit_output_no_output_reverse_mapped_var()
	{
		await Test(
			path: "unit/output/no_output_reverse_mapped_var.mzn",
			solver: "gecode",
			solutions: ["""y=0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_annotations_1.mzn")]
	public async Task test_solve_unit_output_output_annotations_1()
	{
		await Test(
			path: "unit/output/output_annotations_1.mzn",
			solver: "gecode",
			solutions: ["""b=4;y=1;z=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_annotations_2.mzn")]
	public async Task test_solve_unit_output_output_annotations_2()
	{
		await Test(
			path: "unit/output/output_annotations_2.mzn",
			solver: "gecode",
			solutions: ["""x@10.3-24=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_annotations_3.mzn")]
	public async Task test_solve_unit_output_output_annotations_3()
	{
		await Test(
			path: "unit/output/output_annotations_3.mzn",
			solver: "gecode",
			solutions: ["""objective=6;x@15.3-23|i=1@14.23|sum@14.18-16.7|=@14.12-16.7=1;x@15.3-23|i=2@14.23|sum@14.18-16.7|=@14.12-16.7=2;x@15.3-23|i=3@14.23|sum@14.18-16.7|=@14.12-16.7=3;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_annotations_4.mzn")]
	public async Task test_solve_unit_output_output_annotations_4()
	{
		await Test(
			path: "unit/output/output_annotations_4.mzn",
			solver: "gecode",
			solutions: ["""a=9;y@11.3-24|foo@15.12-17=10;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_sections_1.mzn")]
	public async Task test_solve_unit_output_output_sections_1()
	{
		await Test(
			path: "unit/output/output_sections_1.mzn",
			solver: "gecode",
			solutions: ["""_output_item=aebdc;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_sections_1.mzn")]
	public async Task test_solve_unit_output_output_sections_1_2()
	{
		await Test(
			path: "unit/output/output_sections_1.mzn",
			solver: "gecode",
			solutions: ["""_output_item=bdc;"""],
			args: ["--only-sections foo,bar"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_sections_1.mzn")]
	public async Task test_solve_unit_output_output_sections_1_3()
	{
		await Test(
			path: "unit/output/output_sections_1.mzn",
			solver: "gecode",
			solutions: ["""_output_item=ae;"""],
			args: ["--not-sections foo,bar"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_sections_2.mzn")]
	public async Task test_solve_unit_output_output_sections_2()
	{
		await Test(
			path: "unit/output/output_sections_2.mzn",
			solver: "gecode",
			solutions: ["""_output_item=aebdc;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_sections_2.mzn")]
	public async Task test_solve_unit_output_output_sections_2_2()
	{
		await Test(
			path: "unit/output/output_sections_2.mzn",
			solver: "gecode",
			solutions: ["""_output_item=bdc;"""],
			args: ["--only-sections foo,bar"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_sections_2.mzn")]
	public async Task test_solve_unit_output_output_sections_2_3()
	{
		await Test(
			path: "unit/output/output_sections_2.mzn",
			solver: "gecode",
			solutions: ["""_output_item=ae;"""],
			args: ["--not-sections foo,bar"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_sections_3.mzn")]
	public async Task test_solve_unit_output_output_sections_3()
	{
		await Test(
			path: "unit/output/output_sections_3.mzn",
			solver: "gecode",
			solutions: ["""objective=9;_output_item=x = 10;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_sections_4.mzn")]
	public async Task test_solve_unit_output_output_sections_4()
	{
		await Test(
			path: "unit/output/output_sections_4.mzn",
			solver: "gecode",
			solutions: ["""_output_item=x = 10;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_sections_5.mzn")]
	public async Task test_solve_unit_output_output_sections_5()
	{
		await Test(
			path: "unit/output/output_sections_5.mzn",
			solver: "gecode",
			solutions: ["""_output_item=x = 10y = 1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_sections_6.mzn")]
	public async Task test_solve_unit_output_output_sections_6()
	{
		await Test(
			path: "unit/output/output_sections_6.mzn",
			solver: "gecode",
			solutions: ["""_output_item=output_to_section: 10output_item: 10;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/output_sections_7.mzn")]
	public async Task test_solve_unit_output_output_sections_7()
	{
		await Test(
			path: "unit/output/output_sections_7.mzn",
			solver: "gecode",
			solutions: ["""_output_item=[1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/output/test-in-output.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_output_test_in_output(string solver)
	{
		await Test(
			path: "unit/output/test-in-output.mzn",
			solver: solver,
			solutions: ["""_output_item=x = 1y = 2NO;""","""_output_item=x = 1y = 2YES;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/output/var_enum.mzn")]
	public async Task test_solve_unit_output_var_enum()
	{
		await Test(
			path: "unit/output/var_enum.mzn",
			solver: "gecode",
			solutions: ["""_output_item=["X_INTRODUCED_16_", "X_INTRODUCED_17_", "X_INTRODUCED_18_"] [X_INTRODUCED_16_, X_INTRODUCED_17_, X_INTRODUCED_18_] [Inch, Inch, Inch];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/param_file/param_file_array.mzn")]
	public async Task test_solve_unit_param_file_param_file_array()
	{
		await Test(
			path: "unit/param_file/param_file_array.mzn",
			solver: "gecode",
			solutions: ["""x=true;y=false;"""],
			args: ["--param-file ./spec/unit/param_file/param_file_array.json"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/param_file/param_file_nested_object.mzn")]
	public async Task test_solve_unit_param_file_param_file_nested_object()
	{
		await Test(
			path: "unit/param_file/param_file_nested_object.mzn",
			solver: "gecode",
			args: ["--data \"unit/param_file/param_file_nested_object.mpc\""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/param_file/param_file_resolution.mzn")]
	public async Task test_solve_unit_param_file_param_file_resolution()
	{
		await Test(
			path: "unit/param_file/param_file_resolution.mzn",
			solver: "gecode",
			solutions: ["""x=1;y=2;"""],
			args: ["--data \"unit/param_file/param_file_resolution.mpc\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/arg-reif-array-float.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_arg_reif_array_float(string solver)
	{
		await Test(
			path: "unit/regression/arg-reif-array-float.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/arg-reif-array-int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_arg_reif_array_int(string solver)
	{
		await Test(
			path: "unit/regression/arg-reif-array-int.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/arg-reif-float.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_arg_reif_float(string solver)
	{
		await Test(
			path: "unit/regression/arg-reif-float.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/arg-reif-int-set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_arg_reif_int_set(string solver)
	{
		await Test(
			path: "unit/regression/arg-reif-int-set.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/arg-reif-int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_arg_reif_int(string solver)
	{
		await Test(
			path: "unit/regression/arg-reif-int.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/array_of_empty_sets.mzn")]
	public async Task test_solve_unit_regression_array_of_empty_sets()
	{
		await Test(
			path: "unit/regression/array_of_empty_sets.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/array_set_element_nosets.mzn")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_array_set_element_nosets(string solver)
	{
		await Test(
			path: "unit/regression/array_set_element_nosets.mzn",
			solver: solver,
			solutions: ["""x=1;y=[{1},{2},{3}];z={1};""","""x=3;y=[{1},{2},{3}];z={3};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/array_var_set_element_nosets.mzn")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_array_var_set_element_nosets(string solver)
	{
		await Test(
			path: "unit/regression/array_var_set_element_nosets.mzn",
			solver: solver,
			solutions: ["""x=1;y=[1..3,{},{1}];z=1..3;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/assign_reverse_map.mzn")]
	public async Task test_solve_unit_regression_assign_reverse_map()
	{
		await Test(
			path: "unit/regression/assign_reverse_map.mzn",
			solver: "gecode",
			solutions: ["""x=2;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bind-defines-var.mzn")]
	public async Task test_solve_unit_regression_bind_defines_var()
	{
		await Test(
			path: "unit/regression/bind-defines-var.mzn",
			solver: "gecode",
			args: ["-G std"],
			statuses: [SolveStatus.Unsatisfiable]
		);
	}

	[Fact(DisplayName="unit/regression/binop_mult_gclock.mzn")]
	public async Task test_solve_unit_regression_binop_mult_gclock()
	{
		await Test(
			path: "unit/regression/binop_mult_gclock.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bounds_for_linear_01_max_0.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_max_0(string solver)
	{
		await Test(
			path: "unit/regression/bounds_for_linear_01_max_0.mzn",
			solver: solver,
			solutions: ["""x=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bounds_for_linear_01_max_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_max_1(string solver)
	{
		await Test(
			path: "unit/regression/bounds_for_linear_01_max_1.mzn",
			solver: solver,
			solutions: ["""x=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bounds_for_linear_01_min_0.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_min_0(string solver)
	{
		await Test(
			path: "unit/regression/bounds_for_linear_01_min_0.mzn",
			solver: solver,
			solutions: ["""x=0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bounds_for_linear_01_min_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bounds_for_linear_01_min_1(string solver)
	{
		await Test(
			path: "unit/regression/bounds_for_linear_01_min_1.mzn",
			solver: solver,
			solutions: ["""x=0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bug110.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug110(string solver)
	{
		await Test(
			path: "unit/regression/bug110.mzn",
			solver: solver,
			solutions: ["""board=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];""","""board=[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bug131.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug131(string solver)
	{
		await Test(
			path: "unit/regression/bug131.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bug212.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug212(string solver)
	{
		await Test(
			path: "unit/regression/bug212.mzn",
			solver: solver,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bug222.mzn")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_bug222(string solver)
	{
		await Test(
			path: "unit/regression/bug222.mzn",
			solver: solver,
			solutions: ["""K=11;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bug244.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug244(string solver)
	{
		await Test(
			path: "unit/regression/bug244.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bug269.mzn")]
	public async Task test_solve_unit_regression_bug269()
	{
		await Test(
			path: "unit/regression/bug269.mzn",
			solver: "gecode",
			solutions: ["""queens=[4,6,1,5,2,8,3,7];""","""queens=[4,6,8,3,1,7,5,2];""","""queens=[8,4,1,3,6,2,7,5];""","""queens=[2,5,7,4,1,8,6,3];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bug284.mzn")]
	public async Task test_solve_unit_regression_bug284()
	{
		await Test(
			path: "unit/regression/bug284.mzn",
			solver: "gecode",
			solutions: ["""ignore_me=true;""","""A=1;B=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bug318_orig.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug318_orig(string solver)
	{
		await Test(
			path: "unit/regression/bug318_orig.mzn",
			solver: solver,
			solutions: ["""objective=-2147483646;var1=1;var2=-2147483646;var3=-2147483646;""","""objective=-500000000;var1=1;var2=-500000000;var3=-500000000;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bug335.mzn")]
	public async Task test_solve_unit_regression_bug335()
	{
		await Test(
			path: "unit/regression/bug335.mzn",
			solver: "gecode",
			solutions: ["""sokPosns=[14,13,8,7,8,9,4,5,10,1,1,1];stime=9;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bug380.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug380(string solver)
	{
		await Test(
			path: "unit/regression/bug380.mzn",
			solver: solver,
			solutions: ["""a=[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];d=[3,3,3,3];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bug532.mzn")]
	public async Task test_solve_unit_regression_bug532()
	{
		await Test(
			path: "unit/regression/bug532.mzn",
			solver: "gecode",
			solutions: ["""y=0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bug534.mzn")]
	public async Task test_solve_unit_regression_bug534()
	{
		await Test(
			path: "unit/regression/bug534.mzn",
			solver: "gecode",
			solutions: ["""x=[,];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bug536.mzn")]
	public async Task test_solve_unit_regression_bug536()
	{
		await Test(
			path: "unit/regression/bug536.mzn",
			solver: "gecode",
			solutions: ["""x=[1];"""],
			args: ["-O2"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bug552.mzn")]
	public async Task test_solve_unit_regression_bug552()
	{
		await Test(
			path: "unit/regression/bug552.mzn",
			solver: "gecode",
			solutions: ["""x=[2.0];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bug565.mzn")]
	public async Task test_solve_unit_regression_bug565()
	{
		await Test(
			path: "unit/regression/bug565.mzn",
			solver: "gecode",
			solutions: ["""x=true;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bug635.mzn")]
	public async Task test_solve_unit_regression_bug635()
	{
		await Test(
			path: "unit/regression/bug635.mzn",
			solver: "gecode",
			args: ["-O2"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bug67.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug67(string solver)
	{
		await Test(
			path: "unit/regression/bug67.mzn",
			solver: solver,
			solutions: ["""x=-2147483646;y=-2147483646;z=-2147483646;""","""x=-500000000;y=-500000000;z=-500000000;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/bug82.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_bug82(string solver)
	{
		await Test(
			path: "unit/regression/bug82.mzn",
			solver: solver,
			solutions: ["""pos=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];""","""pos=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,3,1,1,4,1,1,5,1,1,4,1,1,3,1,1,2,1,1,1,1,1];""","""pos=[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bug_empty_enum_extension.mzn")]
	public async Task test_solve_unit_regression_bug_empty_enum_extension()
	{
		await Test(
			path: "unit/regression/bug_empty_enum_extension.mzn",
			solver: "gecode",
			solutions: ["""as=[z(z2),z(z1),x(x2),x(x1)];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/bug_opt_polymorphic.mzn")]
	public async Task test_solve_unit_regression_bug_opt_polymorphic()
	{
		await Test(
			path: "unit/regression/bug_opt_polymorphic.mzn",
			solver: "gecode",
			solutions: ["""x=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/checker_var_bug.mzn")]
	public async Task test_solve_unit_regression_checker_var_bug()
	{
		await Test(
			path: "unit/regression/checker_var_bug.mzn",
			solver: "gecode",
			solutions: ["""_checker=x = 1;;""","""_checker=x = 2;;"""],
			args: ["--data \"unit/regression/checker_var_bug.mzc.mzn\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/coercion_par.mzn")]
	public async Task test_solve_unit_regression_coercion_par()
	{
		await Test(
			path: "unit/regression/coercion_par.mzn",
			solver: "gecode",
			solutions: ["""x=[1,<>];y=[1.0,<>];z=[0.0,<>];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/constructor_of_set.mzn")]
	public async Task test_solve_unit_regression_constructor_of_set()
	{
		await Test(
			path: "unit/regression/constructor_of_set.mzn",
			solver: "gecode",
			solutions: ["""y=C(2);"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/decision_tree_binary.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_decision_tree_binary(string solver)
	{
		await Test(
			path: "unit/regression/decision_tree_binary.mzn",
			solver: solver,
			solutions: ["""node_used=[3,4,6,9,11,13,15,8,9,10,11,12,13,14,15];x=[6,2,6,2,4,6,8,1,2,3,4,5,6,7,8];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/dim_1_struct_merge.mzn")]
	public async Task test_solve_unit_regression_dim_1_struct_merge()
	{
		await Test(
			path: "unit/regression/dim_1_struct_merge.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/enigma_1568.mzn")]
	public async Task test_solve_unit_regression_enigma_1568()
	{
		await Test(
			path: "unit/regression/enigma_1568.mzn",
			solver: "gecode",
			solutions: ["""D=6;E=5;L=3;O=9;ODD=966;P=1;PUZZLE=102235;U=0;Z=2;num1=161;num2=635;num3=805;num4=483;x=[9,6,1,0,2,3,5];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/flatten_comp_in.mzn")]
	public async Task test_solve_unit_regression_flatten_comp_in()
	{
		await Test(
			path: "unit/regression/flatten_comp_in.mzn",
			solver: "gecode",
			solutions: ["""x=[true];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/flat_set_lit.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_flat_set_lit(string solver)
	{
		await Test(
			path: "unit/regression/flat_set_lit.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/float_ceil_floor.mzn")]
	public async Task test_solve_unit_regression_float_ceil_floor()
	{
		await Test(
			path: "unit/regression/float_ceil_floor.mzn",
			solver: "gecode",
			solutions: ["""c=-1;f=-1;p=-1.0;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/float_opt_crash.mzn")]
	public async Task test_solve_unit_regression_float_opt_crash()
	{
		await Test(
			path: "unit/regression/float_opt_crash.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github537.mzn")]
	public async Task test_solve_unit_regression_github537()
	{
		await Test(
			path: "unit/regression/github537.mzn",
			solver: "gecode",
			solutions: ["""b=true;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_638_reduced.mzn")]
	public async Task test_solve_unit_regression_github_638_reduced()
	{
		await Test(
			path: "unit/regression/github_638_reduced.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_639_part1.mzn")]
	public async Task test_solve_unit_regression_github_639_part1()
	{
		await Test(
			path: "unit/regression/github_639_part1.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_639_part2.mzn")]
	public async Task test_solve_unit_regression_github_639_part2()
	{
		await Test(
			path: "unit/regression/github_639_part2.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_644_a.mzn")]
	public async Task test_solve_unit_regression_github_644_a()
	{
		await Test(
			path: "unit/regression/github_644_a.mzn",
			solver: "gecode",
			solutions: ["""arr=[<>,<>];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_644_b.mzn")]
	public async Task test_solve_unit_regression_github_644_b()
	{
		await Test(
			path: "unit/regression/github_644_b.mzn",
			solver: "gecode",
			solutions: ["""a=[<>];b=[1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_644_c.mzn")]
	public async Task test_solve_unit_regression_github_644_c()
	{
		await Test(
			path: "unit/regression/github_644_c.mzn",
			solver: "gecode",
			solutions: ["""arr=[1];x=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_644_d.mzn")]
	public async Task test_solve_unit_regression_github_644_d()
	{
		await Test(
			path: "unit/regression/github_644_d.mzn",
			solver: "gecode",
			solutions: ["""value=<>;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_644_e.mzn")]
	public async Task test_solve_unit_regression_github_644_e()
	{
		await Test(
			path: "unit/regression/github_644_e.mzn",
			solver: "gecode",
			solutions: ["""x=<>;y=<>;z=<>;p=3;q=1;r=4;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_646.mzn")]
	public async Task test_solve_unit_regression_github_646()
	{
		await Test(
			path: "unit/regression/github_646.mzn",
			solver: "gecode",
			solutions: ["""x=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_661_part1.mzn")]
	public async Task test_solve_unit_regression_github_661_part1()
	{
		await Test(
			path: "unit/regression/github_661_part1.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Unsatisfiable]
		);
	}

	[Fact(DisplayName="unit/regression/github_661_part2.mzn")]
	public async Task test_solve_unit_regression_github_661_part2()
	{
		await Test(
			path: "unit/regression/github_661_part2.mzn",
			solver: "gecode",
			solutions: ["""x=1;y=2;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_664.mzn")]
	public async Task test_solve_unit_regression_github_664()
	{
		await Test(
			path: "unit/regression/github_664.mzn",
			solver: "gecode",
			solutions: ["""x={1};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_666.mzn")]
	public async Task test_solve_unit_regression_github_666()
	{
		await Test(
			path: "unit/regression/github_666.mzn",
			solver: "gecode",
			args: ["-G std"],
			statuses: [SolveStatus.Unsatisfiable]
		);
	}

	[Theory(DisplayName="unit/regression/github_667.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_github_667(string solver)
	{
		await Test(
			path: "unit/regression/github_667.mzn",
			solver: solver,
			solutions: ["""arr=[false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_668.mzn")]
	public async Task test_solve_unit_regression_github_668()
	{
		await Test(
			path: "unit/regression/github_668.mzn",
			solver: "gecode",
			solutions: ["""x=<>;arr=[false];""","""x=<>;arr=[true];""","""x=1;arr=[false];""","""x=1;arr=[true];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_669.mzn")]
	public async Task test_solve_unit_regression_github_669()
	{
		await Test(
			path: "unit/regression/github_669.mzn",
			solver: "gecode",
			solutions: ["""v=<>;""","""v=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_670.mzn")]
	public async Task test_solve_unit_regression_github_670()
	{
		await Test(
			path: "unit/regression/github_670.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_671.mzn")]
	public async Task test_solve_unit_regression_github_671()
	{
		await Test(
			path: "unit/regression/github_671.mzn",
			solver: "gecode",
			solutions: ["""arr=[true];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_673.mzn")]
	public async Task test_solve_unit_regression_github_673()
	{
		await Test(
			path: "unit/regression/github_673.mzn",
			solver: "gecode",
			solutions: ["""_output_item=[X, <>];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/github_674.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("highs")]
	public async Task test_solve_unit_regression_github_674(string solver)
	{
		await Test(
			path: "unit/regression/github_674.mzn",
			solver: solver,
			solutions: ["""arr=[true,false];ns=[false,false,false,false,false,false,false,false,false,true,false];es=[false,false,false,false,false,false,false,false,false,false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_675a.mzn")]
	public async Task test_solve_unit_regression_github_675a()
	{
		await Test(
			path: "unit/regression/github_675a.mzn",
			solver: "gecode",
			solutions: ["""t=[false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_675b.mzn")]
	public async Task test_solve_unit_regression_github_675b()
	{
		await Test(
			path: "unit/regression/github_675b.mzn",
			solver: "gecode",
			args: ["--keep-paths"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_681.mzn")]
	public async Task test_solve_unit_regression_github_681()
	{
		await Test(
			path: "unit/regression/github_681.mzn",
			solver: "gecode",
			solutions: ["""arr=[true];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_683.mzn")]
	public async Task test_solve_unit_regression_github_683()
	{
		await Test(
			path: "unit/regression/github_683.mzn",
			solver: "gecode",
			solutions: ["""vars=[2,1];c=1;""","""vars=[1,2];c=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_685.mzn")]
	public async Task test_solve_unit_regression_github_685()
	{
		await Test(
			path: "unit/regression/github_685.mzn",
			solver: "gecode",
			solutions: ["""x=[false,true];y=[true,false];""","""x=[true,false];y=[false,true];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_687.mzn")]
	public async Task test_solve_unit_regression_github_687()
	{
		await Test(
			path: "unit/regression/github_687.mzn",
			solver: "gecode",
			solutions: ["""r=(x:0,);"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_691.mzn")]
	public async Task test_solve_unit_regression_github_691()
	{
		await Test(
			path: "unit/regression/github_691.mzn",
			solver: "gecode",
			solutions: ["""a=-1;c=-2;""","""a=0;c=0;""","""a=1;c=2;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_693_part1.mzn")]
	public async Task test_solve_unit_regression_github_693_part1()
	{
		await Test(
			path: "unit/regression/github_693_part1.mzn",
			solver: "gecode",
			solutions: ["""c=true;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_693_part2.mzn")]
	public async Task test_solve_unit_regression_github_693_part2()
	{
		await Test(
			path: "unit/regression/github_693_part2.mzn",
			solver: "gecode",
			solutions: ["""x=[{},{2},{1},1..2];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_695.mzn")]
	public async Task test_solve_unit_regression_github_695()
	{
		await Test(
			path: "unit/regression/github_695.mzn",
			solver: "gecode",
			solutions: ["""x=-3;y=-3;idx=0;val=-3;p=true;""","""x=-3;y=-3;idx=1;val=-3;p=true;""","""x=-3;y=-3;idx=2;val=-3;p=false;""","""x=-3;y=-3;idx=2;val=-3;p=true;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_700.mzn")]
	public async Task test_solve_unit_regression_github_700()
	{
		await Test(
			path: "unit/regression/github_700.mzn",
			solver: "gecode",
			solutions: ["""c={1};d=1..2;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/github_700_bad_sol.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_github_700_bad_sol(string solver)
	{
		await Test(
			path: "unit/regression/github_700_bad_sol.mzn",
			solver: solver,
			solutions: ["""c={1};d={};""","""c={};d={1};"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_716.mzn")]
	public async Task test_solve_unit_regression_github_716()
	{
		await Test(
			path: "unit/regression/github_716.mzn",
			solver: "gecode",
			solutions: ["""BV9=false;BV8=true;BV7=false;BV4=true;""","""BV9=true;BV8=true;BV7=false;BV4=true;""","""BV9=false;BV8=false;BV7=true;BV4=true;""","""BV9=true;BV8=false;BV7=true;BV4=true;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_719.mzn")]
	public async Task test_solve_unit_regression_github_719()
	{
		await Test(
			path: "unit/regression/github_719.mzn",
			solver: "gecode",
			solutions: ["""foo=1;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_726.mzn")]
	public async Task test_solve_unit_regression_github_726()
	{
		await Test(
			path: "unit/regression/github_726.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_728.mzn")]
	public async Task test_solve_unit_regression_github_728()
	{
		await Test(
			path: "unit/regression/github_728.mzn",
			solver: "gecode",
			solutions: ["""wanted={1};""","""wanted={4};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_732.mzn")]
	public async Task test_solve_unit_regression_github_732()
	{
		await Test(
			path: "unit/regression/github_732.mzn",
			solver: "gecode",
			solutions: ["""sts=[(x:0,),(x:1,)];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_747.mzn")]
	public async Task test_solve_unit_regression_github_747()
	{
		await Test(
			path: "unit/regression/github_747.mzn",
			solver: "gecode",
			solutions: ["""x=[<>,<>];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_748.mzn")]
	public async Task test_solve_unit_regression_github_748()
	{
		await Test(
			path: "unit/regression/github_748.mzn",
			solver: "gecode",
			solutions: ["""x=[true,false,false];y=true;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_748.mzn")]
	public async Task test_solve_unit_regression_github_748_2()
	{
		await Test(
			path: "unit/regression/github_748.mzn",
			solver: "gecode",
			solutions: ["""x=[true,false,false];y=true;"""],
			args: ["-O0"],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_749.mzn")]
	public async Task test_solve_unit_regression_github_749()
	{
		await Test(
			path: "unit/regression/github_749.mzn",
			solver: "gecode",
			solutions: ["""x=[true,false,false];y=false;c=2;""","""x=[false,false,false];y=false;c=3;""","""x=[true,true,false];y=false;c=1;""","""x=[false,true,false];y=false;c=2;""","""x=[true,false,true];y=false;c=1;""","""x=[false,true,true];y=false;c=1;""","""x=[false,false,true];y=false;c=2;""","""x=[true,false,false];y=true;c=1;""","""x=[false,true,false];y=true;c=1;""","""x=[true,true,false];y=true;c=2;""","""x=[false,false,true];y=true;c=1;""","""x=[true,false,true];y=true;c=2;""","""x=[false,true,true];y=true;c=2;""","""x=[true,true,true];y=true;c=3;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_752.mzn")]
	public async Task test_solve_unit_regression_github_752()
	{
		await Test(
			path: "unit/regression/github_752.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_754.mzn")]
	public async Task test_solve_unit_regression_github_754()
	{
		await Test(
			path: "unit/regression/github_754.mzn",
			solver: "gecode",
			solutions: ["""a=false;b=false;c=true;d=true;""","""a=false;b=false;c=false;d=true;""","""a=false;b=false;c=true;d=false;""","""a=false;b=false;c=false;d=false;""","""a=true;b=false;c=false;d=false;""","""a=false;b=true;c=false;d=false;""","""a=true;b=true;c=false;d=false;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_758.mzn")]
	public async Task test_solve_unit_regression_github_758()
	{
		await Test(
			path: "unit/regression/github_758.mzn",
			solver: "gecode",
			solutions: ["""x=[true];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_758.mzn")]
	public async Task test_solve_unit_regression_github_758_2()
	{
		await Test(
			path: "unit/regression/github_758.mzn",
			solver: "gecode",
			solutions: ["""x=[true];"""],
			args: ["-O0"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_760.mzn")]
	public async Task test_solve_unit_regression_github_760()
	{
		await Test(
			path: "unit/regression/github_760.mzn",
			solver: "gecode",
			solutions: ["""x=1;""","""x=2;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_761.mzn")]
	public async Task test_solve_unit_regression_github_761()
	{
		await Test(
			path: "unit/regression/github_761.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_762.mzn")]
	public async Task test_solve_unit_regression_github_762()
	{
		await Test(
			path: "unit/regression/github_762.mzn",
			solver: "chuffed",
			solutions: ["""x=[true];""","""x=[false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_765.mzn")]
	public async Task test_solve_unit_regression_github_765()
	{
		await Test(
			path: "unit/regression/github_765.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Unsatisfiable]
		);
	}

	[Fact(DisplayName="unit/regression/github_766.mzn")]
	public async Task test_solve_unit_regression_github_766()
	{
		await Test(
			path: "unit/regression/github_766.mzn",
			solver: "gecode",
			solutions: ["""a=-2;b=-2;""","""a=-2;b=2;""","""a=2;b=-2;""","""a=2;b=2;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_771.mzn")]
	public async Task test_solve_unit_regression_github_771()
	{
		await Test(
			path: "unit/regression/github_771.mzn",
			solver: "gecode",
			solutions: ["""_output_item=0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_776.mzn")]
	public async Task test_solve_unit_regression_github_776()
	{
		await Test(
			path: "unit/regression/github_776.mzn",
			solver: "gecode",
			solutions: ["""x=A(1);"""],
			args: ["--data \"unit/regression/github_776.dzn\""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_778.mzn")]
	public async Task test_solve_unit_regression_github_778()
	{
		await Test(
			path: "unit/regression/github_778.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_783.mzn")]
	public async Task test_solve_unit_regression_github_783()
	{
		await Test(
			path: "unit/regression/github_783.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			args: ["-O2"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_785.mzn")]
	public async Task test_solve_unit_regression_github_785()
	{
		await Test(
			path: "unit/regression/github_785.mzn",
			solver: "gecode",
			args: ["-G std"],
			statuses: [SolveStatus.Unsatisfiable]
		);
	}

	[Fact(DisplayName="unit/regression/github_792.mzn")]
	public async Task test_solve_unit_regression_github_792()
	{
		await Test(
			path: "unit/regression/github_792.mzn",
			solver: "gecode",
			solutions: ["""y=true;""","""y=false;"""],
			args: ["-G std"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_793.mzn")]
	public async Task test_solve_unit_regression_github_793()
	{
		await Test(
			path: "unit/regression/github_793.mzn",
			solver: "gecode",
			solutions: ["""_output_item=[{"e":"A"}] {"v": [{"e":"A"}]};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_798.mzn")]
	public async Task test_solve_unit_regression_github_798()
	{
		await Test(
			path: "unit/regression/github_798.mzn",
			solver: "gecode",
			args: ["-G gecode_presolver"],
			statuses: [SolveStatus.Unsatisfiable]
		);
	}

	[Fact(DisplayName="unit/regression/github_802.mzn")]
	public async Task test_solve_unit_regression_github_802()
	{
		await Test(
			path: "unit/regression/github_802.mzn",
			solver: "gecode",
			solutions: ["""i=1;x=5;""","""i=2;x=10;"""],
			args: ["--keep-paths"],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_803.mzn")]
	public async Task test_solve_unit_regression_github_803()
	{
		await Test(
			path: "unit/regression/github_803.mzn",
			solver: "gecode",
			solutions: ["""BV0=false;IV0=0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_805.mzn")]
	public async Task test_solve_unit_regression_github_805()
	{
		await Test(
			path: "unit/regression/github_805.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_806.mzn")]
	public async Task test_solve_unit_regression_github_806()
	{
		await Test(
			path: "unit/regression/github_806.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_807.mzn")]
	public async Task test_solve_unit_regression_github_807()
	{
		await Test(
			path: "unit/regression/github_807.mzn",
			solver: "gecode",
			solutions: ["""bar=[1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_809.mzn")]
	public async Task test_solve_unit_regression_github_809()
	{
		await Test(
			path: "unit/regression/github_809.mzn",
			solver: "gecode",
			solutions: ["""bar=<>;biz={B};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_810a.mzn")]
	public async Task test_solve_unit_regression_github_810a()
	{
		await Test(
			path: "unit/regression/github_810a.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_810b.mzn")]
	public async Task test_solve_unit_regression_github_810b()
	{
		await Test(
			path: "unit/regression/github_810b.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/github_813.mzn")]
	public async Task test_solve_unit_regression_github_813()
	{
		await Test(
			path: "unit/regression/github_813.mzn",
			solver: "gecode",
			solutions: ["""a=true;b=false;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/if_then_else_absent.mzn")]
	public async Task test_solve_unit_regression_if_then_else_absent()
	{
		await Test(
			path: "unit/regression/if_then_else_absent.mzn",
			solver: "gecode",
			solutions: ["""x=[<>];b=true;""","""x=[1];b=false;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/int2float_subst.mzn")]
	public async Task test_solve_unit_regression_int2float_subst()
	{
		await Test(
			path: "unit/regression/int2float_subst.mzn",
			solver: "gecode",
			solutions: ["""x_int=1;y_int=2;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/in_array_eval_error.mzn")]
	public async Task test_solve_unit_regression_in_array_eval_error()
	{
		await Test(
			path: "unit/regression/in_array_eval_error.mzn",
			solver: "gecode",
			solutions: ["""x=[1];y=true;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/let_domain_from_generator.mzn")]
	public async Task test_solve_unit_regression_let_domain_from_generator()
	{
		await Test(
			path: "unit/regression/let_domain_from_generator.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/makepar_output.mzn")]
	public async Task test_solve_unit_regression_makepar_output()
	{
		await Test(
			path: "unit/regression/makepar_output.mzn",
			solver: "gecode",
			solutions: ["""_output_item=1..1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/multi_goal_hierarchy_error.mzn")]
	public async Task test_solve_unit_regression_multi_goal_hierarchy_error()
	{
		await Test(
			path: "unit/regression/multi_goal_hierarchy_error.mzn",
			solver: "coin-bc",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/non_pos_pow.mzn")]
	public async Task test_solve_unit_regression_non_pos_pow()
	{
		await Test(
			path: "unit/regression/non_pos_pow.mzn",
			solver: "gecode",
			solutions: ["""a=2;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/nosets_set_search.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_nosets_set_search(string solver)
	{
		await Test(
			path: "unit/regression/nosets_set_search.mzn",
			solver: solver,
			solutions: ["""x=1..3;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/opt_minmax.mzn")]
	public async Task test_solve_unit_regression_opt_minmax()
	{
		await Test(
			path: "unit/regression/opt_minmax.mzn",
			solver: "gecode",
			solutions: ["""xmax=10;xmin=1;ymax=10.0;ymin=1.0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/opt_noncontiguous_domain.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_opt_noncontiguous_domain(string solver)
	{
		await Test(
			path: "unit/regression/opt_noncontiguous_domain.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/output_2d_array_enum.mzn")]
	public async Task test_solve_unit_regression_output_2d_array_enum()
	{
		await Test(
			path: "unit/regression/output_2d_array_enum.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/output_fn_toplevel_var.mzn")]
	public async Task test_solve_unit_regression_output_fn_toplevel_var()
	{
		await Test(
			path: "unit/regression/output_fn_toplevel_var.mzn",
			solver: "gecode",
			solutions: ["""_output_item=[1][true];""","""_output_item=[2][false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/par_opt_dom.mzn")]
	public async Task test_solve_unit_regression_par_opt_dom()
	{
		await Test(
			path: "unit/regression/par_opt_dom.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/polymorphic_var_and_par.mzn")]
	public async Task test_solve_unit_regression_polymorphic_var_and_par()
	{
		await Test(
			path: "unit/regression/polymorphic_var_and_par.mzn",
			solver: "gecode",
			solutions: ["""_output_item=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/pow_undefined.mzn")]
	public async Task test_solve_unit_regression_pow_undefined()
	{
		await Test(
			path: "unit/regression/pow_undefined.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/pred_param_r7550.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_pred_param_r7550(string solver)
	{
		await Test(
			path: "unit/regression/pred_param_r7550.mzn",
			solver: solver,
			solutions: ["""end=53;objective=53;s=[0,0,0,4,7,7,6,8,12,8,6,4,14,19,12,12,13,18,8,11,14,18,19,4,16,10,20,9,14,6,24,26,21,16,9,21,24,28,31,22,24,11,25,16,30,26,38,25,25,30,33,36,39,34,33,47,25,44,50,38];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/slice_enum_indexset.mzn")]
	public async Task test_solve_unit_regression_slice_enum_indexset()
	{
		await Test(
			path: "unit/regression/slice_enum_indexset.mzn",
			solver: "gecode",
			solutions: ["""_output_item=ok;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/subsets_100.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_subsets_100(string solver)
	{
		await Test(
			path: "unit/regression/subsets_100.mzn",
			solver: solver,
			solutions: ["""s=1..9;t={45};s_total=45;t_total=45;""","""s={100};t={49,51};s_total=100;t_total=100;""","""s={1,2,40,56,94};t={3,93,97};s_total=193;t_total=193;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_annotation_on_exists.mzn")]
	public async Task test_solve_unit_regression_test_annotation_on_exists()
	{
		await Test(
			path: "unit/regression/test_annotation_on_exists.mzn",
			solver: "gecode",
			solutions: ["""b=true;c=true;d=false;""","""b=true;c=false;d=true;""","""b=true;c=true;d=true;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/test_bug359.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_test_bug359(string solver)
	{
		await Test(
			path: "unit/regression/test_bug359.mzn",
			solver: solver,
			solutions: ["""p1=1;p2=1;p3=0;p4=0;""","""p1=1;p2=1;p3=0;p4=1;""","""p1=1;p2=1;p3=1;p4=1;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug54.mzn")]
	public async Task test_solve_unit_regression_test_bug54()
	{
		await Test(
			path: "unit/regression/test_bug54.mzn",
			solver: "gecode",
			solutions: ["""x=7;y=1;z=7;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug54.mzn")]
	public async Task test_solve_unit_regression_test_bug54_2()
	{
		await Test(
			path: "unit/regression/test_bug54.mzn",
			solver: "chuffed",
			solutions: ["""x=7;y=1;z=7;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug72.mzn")]
	public async Task test_solve_unit_regression_test_bug72()
	{
		await Test(
			path: "unit/regression/test_bug72.mzn",
			solver: "gecode",
			solutions: ["""x={1};b=true;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug72.mzn")]
	public async Task test_solve_unit_regression_test_bug72_2()
	{
		await Test(
			path: "unit/regression/test_bug72.mzn",
			solver: "chuffed",
			solutions: ["""x={1};b=true;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_476.mzn")]
	public async Task test_solve_unit_regression_test_bug_476()
	{
		await Test(
			path: "unit/regression/test_bug_476.mzn",
			solver: "gecode",
			solutions: ["""b=1;c=true;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_493.mzn")]
	public async Task test_solve_unit_regression_test_bug_493()
	{
		await Test(
			path: "unit/regression/test_bug_493.mzn",
			solver: "gecode",
			solutions: ["""_output_item={};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_494.mzn")]
	public async Task test_solve_unit_regression_test_bug_494()
	{
		await Test(
			path: "unit/regression/test_bug_494.mzn",
			solver: "gecode",
			solutions: ["""x1=1;x2=[0];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_520.mzn")]
	public async Task test_solve_unit_regression_test_bug_520()
	{
		await Test(
			path: "unit/regression/test_bug_520.mzn",
			solver: "gecode",
			solutions: ["""_output_item={a}"b";"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_521.mzn")]
	public async Task test_solve_unit_regression_test_bug_521()
	{
		await Test(
			path: "unit/regression/test_bug_521.mzn",
			solver: "gecode",
			solutions: ["""x=0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_527.mzn")]
	public async Task test_solve_unit_regression_test_bug_527()
	{
		await Test(
			path: "unit/regression/test_bug_527.mzn",
			solver: "gecode",
			solutions: ["""x=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_529.mzn")]
	public async Task test_solve_unit_regression_test_bug_529()
	{
		await Test(
			path: "unit/regression/test_bug_529.mzn",
			solver: "gecode",
			solutions: ["""_output_item=ok;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_588.mzn")]
	public async Task test_solve_unit_regression_test_bug_588()
	{
		await Test(
			path: "unit/regression/test_bug_588.mzn",
			solver: "gecode",
			solutions: ["""x=2;y=1;z=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_637.mzn")]
	public async Task test_solve_unit_regression_test_bug_637()
	{
		await Test(
			path: "unit/regression/test_bug_637.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_array_sum_bounds.mzn")]
	public async Task test_solve_unit_regression_test_bug_array_sum_bounds()
	{
		await Test(
			path: "unit/regression/test_bug_array_sum_bounds.mzn",
			solver: "gecode",
			solutions: ["""C=[0,0,0];y=0;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_ite_array_eq.mzn")]
	public async Task test_solve_unit_regression_test_bug_ite_array_eq()
	{
		await Test(
			path: "unit/regression/test_bug_ite_array_eq.mzn",
			solver: "gecode",
			solutions: ["""b=true;x=[false,false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/test_bug_pred_arg.mzn")]
	public async Task test_solve_unit_regression_test_bug_pred_arg()
	{
		await Test(
			path: "unit/regression/test_bug_pred_arg.mzn",
			solver: "gecode",
			solutions: ["""b=false;x=1;""","""b=true;x=1;""","""b=false;x=2;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/test_parout.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_test_parout(string solver)
	{
		await Test(
			path: "unit/regression/test_parout.mzn",
			solver: solver,
			solutions: ["""x=10;y=-2147483646;""","""x=10;y=11;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/ts_bug.mzn")]
	public async Task test_solve_unit_regression_ts_bug()
	{
		await Test(
			path: "unit/regression/ts_bug.mzn",
			solver: "gecode",
			solutions: ["""cost=48;s=[4,1,2,3,6,5];dur=[{2,4},{1,2,4},{1,3,4},{1,3,4},{1,3},{1,3}];bef=[{},{2,4},{1,2,4},{1,2,3,4},{1,2,3,4},{1,2,3,4}];aft=[{1,2,3,4},{1,2,3,4},{1,3,4},{1,3,4},{1,3},{}];a=[{1,2},{2,3},{3,4},{2,4},{1,3},{1,4}];""","""cost=48;s=[4,1,2,3,6,5];dur=[{2,4},{1,2,4},{1,3,4},{1,3,4},{1,3},{1,3}];bef=[{},{2,4},{1,2,4},1..4,1..4,1..4];aft=[1..4,1..4,{1,3,4},{1,3,4},{1,3},{}];a=[1..2,2..3,3..4,{2,4},{1,3},{1,4}];""","""cost=48;s=[5,3,2,1,4,6];dur=[{1,3},{1,3,4},{1,2,4},{1,2,4},{1,4},{1,4}];bef=[{},{1,3},{1,3,4},1..4,1..4,1..4];aft=[1..4,1..4,{1,2,4},{1,2,4},{1,4},{}];a=[1..2,2..3,3..4,{2,4},{1,3},{1,4}];""","""cost=48;s=[4,1,2,3,5,6];dur=[{2,4},{1,2,4},{1,3,4},{1,3,4},{1,4},{1,4}];bef=[{},{2,4},{1,2,4},1..4,1..4,1..4];aft=[1..4,1..4,{1,3,4},{1,3,4},{1,4},{}];a=[1..2,2..3,3..4,{2,4},{1,3},{1,4}];"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/regression/var_bool_comp.mzn")]
	public async Task test_solve_unit_regression_var_bool_comp()
	{
		await Test(
			path: "unit/regression/var_bool_comp.mzn",
			solver: "gecode",
			solutions: ["""x=[2,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/var_opt_unconstrained.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_regression_var_opt_unconstrained(string solver)
	{
		await Test(
			path: "unit/regression/var_opt_unconstrained.mzn",
			solver: solver,
			solutions: ["""x=<>;""","""x=1;"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/regression/var_self_assign_bug.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_regression_var_self_assign_bug(string solver)
	{
		await Test(
			path: "unit/regression/var_self_assign_bug.mzn",
			solver: solver,
			solutions: ["""partitions=[{1,2,3},{1,2,3},{1,2,3}];""","""partitions=[1..3,1..3,1..3];""","""partitions=[{},{},{}];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/int_choice_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_choice_1(string solver)
	{
		await Test(
			path: "unit/search/int_choice_1.mzn",
			solver: solver,
			solutions: ["""q=[1,5,8,6,3,7,2,4];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/int_choice_2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_choice_2(string solver)
	{
		await Test(
			path: "unit/search/int_choice_2.mzn",
			solver: solver,
			solutions: ["""q=[8,4,1,3,6,2,7,5];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/int_choice_6.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_choice_6(string solver)
	{
		await Test(
			path: "unit/search/int_choice_6.mzn",
			solver: solver,
			solutions: ["""q=[1,5,8,6,3,7,2,4];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/int_var_select_1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_1(string solver)
	{
		await Test(
			path: "unit/search/int_var_select_1.mzn",
			solver: solver,
			solutions: ["""q=[1,5,8,6,3,7,2,4];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/int_var_select_2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_2(string solver)
	{
		await Test(
			path: "unit/search/int_var_select_2.mzn",
			solver: solver,
			solutions: ["""q=[1,5,8,6,3,7,2,4];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/search/int_var_select_3.mzn")]
	public async Task test_solve_unit_search_int_var_select_3()
	{
		await Test(
			path: "unit/search/int_var_select_3.mzn",
			solver: "chuffed",
			solutions: ["""q=[1,7,4,6,8,2,5,3];""","""q=[1,7,5,8,2,4,6,3];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/int_var_select_4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_4(string solver)
	{
		await Test(
			path: "unit/search/int_var_select_4.mzn",
			solver: solver,
			solutions: ["""q=[1,7,4,6,8,2,5,3];""","""q=[1,7,5,8,2,4,6,3];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/int_var_select_6.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_int_var_select_6(string solver)
	{
		await Test(
			path: "unit/search/int_var_select_6.mzn",
			solver: solver,
			solutions: ["""q=[1,5,8,6,3,7,2,4];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/test-ff1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_ff1(string solver)
	{
		await Test(
			path: "unit/search/test-ff1.mzn",
			solver: solver,
			solutions: ["""x=3;y=8;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/test-ff2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_ff2(string solver)
	{
		await Test(
			path: "unit/search/test-ff2.mzn",
			solver: solver,
			solutions: ["""x=5;y=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/test-ff3.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_ff3(string solver)
	{
		await Test(
			path: "unit/search/test-ff3.mzn",
			solver: solver,
			solutions: ["""x=5;y=1;z=1;w=3;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/search/test-large1.mzn")]
	public async Task test_solve_unit_search_test_large1()
	{
		await Test(
			path: "unit/search/test-large1.mzn",
			solver: "gecode",
			solutions: ["""x=5;y=8;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/search/test-large1.mzn")]
	public async Task test_solve_unit_search_test_large1_2()
	{
		await Test(
			path: "unit/search/test-large1.mzn",
			solver: "chuffed",
			solutions: ["""x=6;y=7;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/test-med1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_med1(string solver)
	{
		await Test(
			path: "unit/search/test-med1.mzn",
			solver: solver,
			solutions: ["""x=5;y=6;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/search/test-small1.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_search_test_small1(string solver)
	{
		await Test(
			path: "unit/search/test-small1.mzn",
			solver: solver,
			solutions: ["""x=9;y=2;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/alias.mzn")]
	public async Task test_solve_unit_types_alias()
	{
		await Test(
			path: "unit/types/alias.mzn",
			solver: "gecode",
			solutions: ["""x=3;y=[<>,1];tup=[2,true];tuptup=[2,true,2,true];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/alias_call.mzn")]
	public async Task test_solve_unit_types_alias_call()
	{
		await Test(
			path: "unit/types/alias_call.mzn",
			solver: "gecode",
			solutions: ["""x=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/alias_extern_dom.mzn")]
	public async Task test_solve_unit_types_alias_extern_dom()
	{
		await Test(
			path: "unit/types/alias_extern_dom.mzn",
			solver: "gecode",
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/common_struct_bottom.mzn")]
	public async Task test_solve_unit_types_common_struct_bottom()
	{
		await Test(
			path: "unit/types/common_struct_bottom.mzn",
			solver: "gecode",
			solutions: ["""x=[1,];y=[(a:[(a:1,)],),(a:[],)];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/comprehension_type.mzn")]
	public async Task test_solve_unit_types_comprehension_type()
	{
		await Test(
			path: "unit/types/comprehension_type.mzn",
			solver: "gecode",
			solutions: ["""x=[A,A,A,A];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/cv_comprehension.mzn")]
	public async Task test_solve_unit_types_cv_comprehension()
	{
		await Test(
			path: "unit/types/cv_comprehension.mzn",
			solver: "gecode",
			solutions: ["""x=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/enum_decl.mzn")]
	public async Task test_solve_unit_types_enum_decl()
	{
		await Test(
			path: "unit/types/enum_decl.mzn",
			solver: "gecode",
			solutions: ["""__val__=;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/enum_refl.mzn")]
	public async Task test_solve_unit_types_enum_refl()
	{
		await Test(
			path: "unit/types/enum_refl.mzn",
			solver: "gecode",
			solutions: ["""x={};ubx={a,b,c};y=a;lby=a;uby=c;domy={a,b,c};"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/github_647.mzn")]
	public async Task test_solve_unit_types_github_647()
	{
		await Test(
			path: "unit/types/github_647.mzn",
			solver: "gecode",
			solutions: ["""b=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/if_then_else_struct.mzn")]
	public async Task test_solve_unit_types_if_then_else_struct()
	{
		await Test(
			path: "unit/types/if_then_else_struct.mzn",
			solver: "gecode",
			solutions: ["""t=[<>,<>];b=false;u=[0,0];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/non_contig_enum.mzn")]
	public async Task test_solve_unit_types_non_contig_enum()
	{
		await Test(
			path: "unit/types/non_contig_enum.mzn",
			solver: "gecode",
			solutions: ["""x=S(6);"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/opt_alias._int.mzn")]
	public async Task test_solve_unit_types_opt_alias_int()
	{
		await Test(
			path: "unit/types/opt_alias._int.mzn",
			solver: "gecode",
			solutions: ["""x=<>;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/overload_inst_tuple_return.mzn")]
	public async Task test_solve_unit_types_overload_inst_tuple_return()
	{
		await Test(
			path: "unit/types/overload_inst_tuple_return.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/par_struct_tiid.mzn")]
	public async Task test_solve_unit_types_par_struct_tiid()
	{
		await Test(
			path: "unit/types/par_struct_tiid.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/polymorphic_overloading.mzn")]
	public async Task test_solve_unit_types_polymorphic_overloading()
	{
		await Test(
			path: "unit/types/polymorphic_overloading.mzn",
			solver: "gecode",
			solutions: ["""_output_item=Ok;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/record_access_success.mzn")]
	public async Task test_solve_unit_types_record_access_success()
	{
		await Test(
			path: "unit/types/record_access_success.mzn",
			solver: "gecode",
			solutions: ["""_output_item=onetwo;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/record_binop_par.mzn")]
	public async Task test_solve_unit_types_record_binop_par()
	{
		await Test(
			path: "unit/types/record_binop_par.mzn",
			solver: "gecode",
			solutions: ["""eq1=true;eq0=false;nq1=true;nq0=false;in1=true;in0=false;le1=true;le0=false;lq1=true;lq0=false;merge1=(x:1,y:2.0,z:true,);"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/record_binop_var.mzn")]
	public async Task test_solve_unit_types_record_binop_var()
	{
		await Test(
			path: "unit/types/record_binop_var.mzn",
			solver: "gecode",
			solutions: ["""eqA=(a:2,b:true,);nq=(a:3,b:true,);leA=(x:2,y:4,);lqA=(x:2,y:4,);arrin=(a:3,b:5.0,);merge1=(a:2,b:true,x:2,y:4,);"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/record_comprehensions.mzn")]
	public async Task test_solve_unit_types_record_comprehensions()
	{
		await Test(
			path: "unit/types/record_comprehensions.mzn",
			solver: "gecode",
			solutions: ["""simple=[(x:2,y:true,),(x:1,y:false,),(x:0,y:true,),(x:1,y:false,),(x:2,y:true,)];indexed=[(a:4,b:true,),(a:6,b:true,),(a:8,b:true,),(a:9,b:false,),(a:11,b:false,)];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/record_nested.mzn")]
	public async Task test_solve_unit_types_record_nested()
	{
		await Test(
			path: "unit/types/record_nested.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/record_output.mzn")]
	public async Task test_solve_unit_types_record_output()
	{
		await Test(
			path: "unit/types/record_output.mzn",
			solver: "gecode",
			solutions: ["""_output_item=full var: (a: 0, b: true, c: 1.5)var array: [(a: 2, b: false), (a: 1, b: true)]nested: (inner: (left: 3, right: 4), outer: false)element: 3partial: (x: 10, y: true)data: (e: -3.2, f: false);"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/record_subtyping.mzn")]
	public async Task test_solve_unit_types_record_subtyping()
	{
		await Test(
			path: "unit/types/record_subtyping.mzn",
			solver: "gecode",
			solutions: ["""single=(a:1,);double=(a:1.0,b:[1,2,3],);tupId=(x:1,y:0.0,);tupExpr=(a:-5.0,b:0,);arr1=[(a:5,b:1.0,),(a:1,b:-1.0,)];arr2=[(a:0,b:1,),(a:0,b:1,)];arrId=[(a:0.0,b:1.0,),(a:0.0,b:1.0,)];arrExpr=[(a:1.0,b:0.0,),(a:2.0,b:1.0,),(a:3.0,b:0.0,)];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/record_var_element.mzn")]
	public async Task test_solve_unit_types_record_var_element()
	{
		await Test(
			path: "unit/types/record_var_element.mzn",
			solver: "gecode",
			solutions: ["""idx=iE;selected=(a:6,b:(c:3,d:3,),);"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/record_var_ite.mzn")]
	public async Task test_solve_unit_types_record_var_ite()
	{
		await Test(
			path: "unit/types/record_var_ite.mzn",
			solver: "gecode",
			solutions: ["""tups=[(x:12,y:false,),(x:10,y:true,),(x:11,y:false,)];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/specialise_large_struct.mzn")]
	public async Task test_solve_unit_types_specialise_large_struct()
	{
		await Test(
			path: "unit/types/specialise_large_struct.mzn",
			solver: "gecode",
			solutions: ["""t=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];u=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_array_coercion.mzn")]
	public async Task test_solve_unit_types_struct_array_coercion()
	{
		await Test(
			path: "unit/types/struct_array_coercion.mzn",
			solver: "gecode",
			solutions: ["""mzn_enum_X=[A,,B,,G,0,1..3];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_bind_1.mzn")]
	public async Task test_solve_unit_types_struct_bind_1()
	{
		await Test(
			path: "unit/types/struct_bind_1.mzn",
			solver: "gecode",
			solutions: ["""a=[1,1];x=[1,1];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_bind_2.mzn")]
	public async Task test_solve_unit_types_struct_bind_2()
	{
		await Test(
			path: "unit/types/struct_bind_2.mzn",
			solver: "gecode",
			solutions: ["""a=[1];x=[1];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_domain_1.mzn")]
	public async Task test_solve_unit_types_struct_domain_1()
	{
		await Test(
			path: "unit/types/struct_domain_1.mzn",
			solver: "gecode",
			solutions: ["""a=false;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_domain_2.mzn")]
	public async Task test_solve_unit_types_struct_domain_2()
	{
		await Test(
			path: "unit/types/struct_domain_2.mzn",
			solver: "gecode",
			solutions: ["""a=false;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_domain_3.mzn")]
	public async Task test_solve_unit_types_struct_domain_3()
	{
		await Test(
			path: "unit/types/struct_domain_3.mzn",
			solver: "gecode",
			solutions: ["""a=false;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_domain_4.mzn")]
	public async Task test_solve_unit_types_struct_domain_4()
	{
		await Test(
			path: "unit/types/struct_domain_4.mzn",
			solver: "gecode",
			solutions: ["""a=false;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_domain_5.mzn")]
	public async Task test_solve_unit_types_struct_domain_5()
	{
		await Test(
			path: "unit/types/struct_domain_5.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Unsatisfiable]
		);
	}

	[Fact(DisplayName="unit/types/struct_domain_6.mzn")]
	public async Task test_solve_unit_types_struct_domain_6()
	{
		await Test(
			path: "unit/types/struct_domain_6.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Unsatisfiable]
		);
	}

	[Fact(DisplayName="unit/types/struct_member_paths.mzn")]
	public async Task test_solve_unit_types_struct_member_paths()
	{
		await Test(
			path: "unit/types/struct_member_paths.mzn",
			solver: "gecode",
			solutions: ["""a=[(o:1,s:<>,)];"""],
			args: ["--keep-paths"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_opt_supertype.mzn")]
	public async Task test_solve_unit_types_struct_opt_supertype()
	{
		await Test(
			path: "unit/types/struct_opt_supertype.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_par_function_version.mzn")]
	public async Task test_solve_unit_types_struct_par_function_version()
	{
		await Test(
			path: "unit/types/struct_par_function_version.mzn",
			solver: "gecode",
			solutions: ["""p=true;a=false;b=true;c=false;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_return_ti_1.mzn")]
	public async Task test_solve_unit_types_struct_return_ti_1()
	{
		await Test(
			path: "unit/types/struct_return_ti_1.mzn",
			solver: "gecode",
			solutions: ["""x=false;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_return_ti_2.mzn")]
	public async Task test_solve_unit_types_struct_return_ti_2()
	{
		await Test(
			path: "unit/types/struct_return_ti_2.mzn",
			solver: "gecode",
			solutions: ["""x=false;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_return_ti_4.mzn")]
	public async Task test_solve_unit_types_struct_return_ti_4()
	{
		await Test(
			path: "unit/types/struct_return_ti_4.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Unsatisfiable]
		);
	}

	[Fact(DisplayName="unit/types/struct_specialise.mzn")]
	public async Task test_solve_unit_types_struct_specialise()
	{
		await Test(
			path: "unit/types/struct_specialise.mzn",
			solver: "gecode",
			solutions: ["""foo_int=1;foo_str=test;foo_enum=B;bar_int=2;bar_str=pred;bar_enum=C;baz_tup=[3,func];baz_rec=(x:B,);"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/struct_specialise_return.mzn")]
	public async Task test_solve_unit_types_struct_specialise_return()
	{
		await Test(
			path: "unit/types/struct_specialise_return.mzn",
			solver: "gecode",
			solutions: ["""_output_item={C}, [(A,)];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/test_any_enum_typeinstid.mzn")]
	public async Task test_solve_unit_types_test_any_enum_typeinstid()
	{
		await Test(
			path: "unit/types/test_any_enum_typeinstid.mzn",
			solver: "gecode",
			solutions: ["""x=[true,false];""","""x=[true,true];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_access_success.mzn")]
	public async Task test_solve_unit_types_tuple_access_success()
	{
		await Test(
			path: "unit/types/tuple_access_success.mzn",
			solver: "gecode",
			solutions: ["""_output_item=onetwo;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_binop_par.mzn")]
	public async Task test_solve_unit_types_tuple_binop_par()
	{
		await Test(
			path: "unit/types/tuple_binop_par.mzn",
			solver: "gecode",
			solutions: ["""eq1=true;eq0=false;nq1=true;nq0=false;in1=true;in0=false;le1=true;le0=false;lq1=true;lq0=false;con1=[1,2.0,true];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_binop_var.mzn")]
	public async Task test_solve_unit_types_tuple_binop_var()
	{
		await Test(
			path: "unit/types/tuple_binop_var.mzn",
			solver: "gecode",
			solutions: ["""eqA=[2,true];nq=[3,true];leA=[2,4];lqA=[2,4];arrin=[3,5.0];con1=[2,true,3,true];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_comprehensions.mzn")]
	public async Task test_solve_unit_types_tuple_comprehensions()
	{
		await Test(
			path: "unit/types/tuple_comprehensions.mzn",
			solver: "gecode",
			solutions: ["""simple=[2,true,1,false,0,true,1,false,2,true];indexed=[4,true,6,true,8,true,9,false,11,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_if_then_else.mzn")]
	public async Task test_solve_unit_types_tuple_if_then_else()
	{
		await Test(
			path: "unit/types/tuple_if_then_else.mzn",
			solver: "gecode",
			solutions: ["""b=true;p0=[3,4];""","""b=false;p0=[3,5];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_int_set_of_int_specialisation.mzn")]
	public async Task test_solve_unit_types_tuple_int_set_of_int_specialisation()
	{
		await Test(
			path: "unit/types/tuple_int_set_of_int_specialisation.mzn",
			solver: "gecode",
			solutions: ["""f=true;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_lit.mzn")]
	public async Task test_solve_unit_types_tuple_lit()
	{
		await Test(
			path: "unit/types/tuple_lit.mzn",
			solver: "gecode",
			solutions: ["""single=[1];double=[false,-1];triple=[1,false,200.0];square=[1,one,-2,two];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_mkpar.mzn")]
	public async Task test_solve_unit_types_tuple_mkpar()
	{
		await Test(
			path: "unit/types/tuple_mkpar.mzn",
			solver: "gecode",
			solutions: ["""x=1;y=3;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_output.mzn")]
	public async Task test_solve_unit_types_tuple_output()
	{
		await Test(
			path: "unit/types/tuple_output.mzn",
			solver: "gecode",
			solutions: ["""_output_item=full var: (0, true, 1.5)var array: [(2, false), (1, true)]nested: (false, (3, 4))element: 3partial: (10, true)data: (-3.2, false)enumtup: ((x: a a, y: c), c);"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_subtyping.mzn")]
	public async Task test_solve_unit_types_tuple_subtyping()
	{
		await Test(
			path: "unit/types/tuple_subtyping.mzn",
			solver: "gecode",
			solutions: ["""single=[1];double=[1.0,1,2,3];tupId=[1,0.0];tupExpr=[-5.0,0];arr1=[5,1.0,1,-1.0];arr2=[1,0,1,0];arrId=[1.0,0.0,1.0,0.0];arrExpr=[1.0,0.0,2.0,1.0,3.0,0.0];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_var_element.mzn")]
	public async Task test_solve_unit_types_tuple_var_element()
	{
		await Test(
			path: "unit/types/tuple_var_element.mzn",
			solver: "gecode",
			solutions: ["""idx=iE;selected=[6,3,3];"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/tuple_var_ite.mzn")]
	public async Task test_solve_unit_types_tuple_var_ite()
	{
		await Test(
			path: "unit/types/tuple_var_ite.mzn",
			solver: "gecode",
			solutions: ["""tups=[12,false,10,true,11,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/type_specialise_param_arrays.mzn")]
	public async Task test_solve_unit_types_type_specialise_param_arrays()
	{
		await Test(
			path: "unit/types/type_specialise_param_arrays.mzn",
			solver: "gecode",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/types/type_specialise_struct_domain.mzn")]
	public async Task test_solve_unit_types_type_specialise_struct_domain()
	{
		await Test(
			path: "unit/types/type_specialise_struct_domain.mzn",
			solver: "gecode",
			solutions: ["""x=[(a:[A],),(a:[B],),(a:[C],)];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/alldifferent_except_0/test_alldiff_except0b.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_alldifferent_except_0_test_alldiff_except0b(string solver)
	{
		await Test(
			path: "unit/globals/alldifferent_except_0/test_alldiff_except0b.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/arg_max/globals_arg_max.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_max_globals_arg_max(string solver)
	{
		await Test(
			path: "unit/globals/arg_max/globals_arg_max.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/arg_max/globals_arg_max_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_max_globals_arg_max_opt(string solver)
	{
		await Test(
			path: "unit/globals/arg_max/globals_arg_max_opt.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/arg_max/globals_arg_max_opt_weak.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_max_globals_arg_max_opt_weak(string solver)
	{
		await Test(
			path: "unit/globals/arg_max/globals_arg_max_opt_weak.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/arg_min/globals_arg_max_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_min_globals_arg_max_opt(string solver)
	{
		await Test(
			path: "unit/globals/arg_min/globals_arg_max_opt.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/arg_min/globals_arg_min.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_min_globals_arg_min(string solver)
	{
		await Test(
			path: "unit/globals/arg_min/globals_arg_min.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/arg_min/globals_arg_min_opt_weak.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_min_globals_arg_min_opt_weak(string solver)
	{
		await Test(
			path: "unit/globals/arg_min/globals_arg_min_opt_weak.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/arg_val/arg_val_enum.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_arg_val_arg_val_enum(string solver)
	{
		await Test(
			path: "unit/globals/arg_val/arg_val_enum.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/bin_packing/globals_bin_packing.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_bin_packing_globals_bin_packing(string solver)
	{
		await Test(
			path: "unit/globals/bin_packing/globals_bin_packing.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/bin_packing_capa/globals_bin_packing_capa.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_bin_packing_capa_globals_bin_packing_capa(string solver)
	{
		await Test(
			path: "unit/globals/bin_packing_capa/globals_bin_packing_capa.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/circuit/test_circuit.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_circuit_test_circuit(string solver)
	{
		await Test(
			path: "unit/globals/circuit/test_circuit.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/globals/cumulative/github_589.mzn")]
	public async Task test_solve_unit_globals_cumulative_github_589()
	{
		await Test(
			path: "unit/globals/cumulative/github_589.mzn",
			solver: "gecode",
			args: ["-G std"],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/globals/cumulatives/globals_cumulatives.mzn")]
	public async Task test_solve_unit_globals_cumulatives_globals_cumulatives()
	{
		await Test(
			path: "unit/globals/cumulatives/globals_cumulatives.mzn",
			solver: "gecode",
			solutions: ["""makespan=11;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/cumulatives/globals_cumulatives.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_cumulatives_globals_cumulatives_2(string solver)
	{
		await Test(
			path: "unit/globals/cumulatives/globals_cumulatives.mzn",
			solver: solver,
			solutions: ["""makespan=11;"""],
			args: ["-G std"],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/global_cardinality/globals_global_cardinality_low_up_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_globals_global_cardinality_low_up_set(string solver)
	{
		await Test(
			path: "unit/globals/global_cardinality/globals_global_cardinality_low_up_set.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/global_cardinality/globals_global_cardinality_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_globals_global_cardinality_opt(string solver)
	{
		await Test(
			path: "unit/globals/global_cardinality/globals_global_cardinality_opt.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/global_cardinality/globals_global_cardinality_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_globals_global_cardinality_set(string solver)
	{
		await Test(
			path: "unit/globals/global_cardinality/globals_global_cardinality_set.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/global_cardinality_closed/globals_global_cardinality_closed_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_closed_globals_global_cardinality_closed_opt(string solver)
	{
		await Test(
			path: "unit/globals/global_cardinality_closed/globals_global_cardinality_closed_opt.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/global_cardinality_closed/globals_global_cardinality_closed_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_closed_globals_global_cardinality_closed_set(string solver)
	{
		await Test(
			path: "unit/globals/global_cardinality_closed/globals_global_cardinality_closed_set.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/global_cardinality_closed/globals_global_cardinality_low_up_closed_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_closed_globals_global_cardinality_low_up_closed_opt(string solver)
	{
		await Test(
			path: "unit/globals/global_cardinality_closed/globals_global_cardinality_low_up_closed_opt.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/global_cardinality_closed/globals_global_cardinality_low_up_closed_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_global_cardinality_closed_globals_global_cardinality_low_up_closed_set(string solver)
	{
		await Test(
			path: "unit/globals/global_cardinality_closed/globals_global_cardinality_low_up_closed_set.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/int_set_channel/test_int_set_channel2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	[InlineData("coin-bc")]
	public async Task test_solve_unit_globals_int_set_channel_test_int_set_channel2(string solver)
	{
		await Test(
			path: "unit/globals/int_set_channel/test_int_set_channel2.mzn",
			solver: solver,
			solutions: ["""x=[1,1,1,1,1,1,1,1,1];y=[1..9,{},{},{},{}];""","""x=[5,3,1,1,1,1,1,1,1];y=[3..9,{},{2},{},{1}];""","""x=[2,2,2,2,2,2,2,2,2];y=[{},1..9,{},{},{}];""","""x=[5,5,5,5,5,5,5,5,5];y=[{},{},{},{},1..9];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/globals/inverse/inverse_opt.mzn")]
	public async Task test_solve_unit_globals_inverse_inverse_opt()
	{
		await Test(
			path: "unit/globals/inverse/inverse_opt.mzn",
			solver: "gecode",
			args: ["-G std"],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/lex2/globals_lex2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_lex2_globals_lex2(string solver)
	{
		await Test(
			path: "unit/globals/lex2/globals_lex2.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/globals/lex2/globals_lex2.mzn")]
	public async Task test_solve_unit_globals_lex2_globals_lex2_2()
	{
		await Test(
			path: "unit/globals/lex2/globals_lex2.mzn",
			solver: "coin-bc",
			solutions: ["""y=[1,1,1,1];""","""y=[1,2,2,1];""","""y=[1,1,1,2];""","""y=[1,2,1,2];""","""y=[1,1,2,2];""","""y=[1,2,2,2];""","""y=[2,2,2,2];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/lex_chain/globals_lex_chain__orbitope.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("scip", Skip="Solver not supported")]
	public async Task test_solve_unit_globals_lex_chain_globals_lex_chain__orbitope(string solver)
	{
		await Test(
			path: "unit/globals/lex_chain/globals_lex_chain__orbitope.mzn",
			solver: solver,
			solutions: ["""lex_members_int=[1,0,1];lex_members_bool=[false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/lex_greater/globals_lex_greater.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_lex_greater_globals_lex_greater(string solver)
	{
		await Test(
			path: "unit/globals/lex_greater/globals_lex_greater.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/lex_greatereq/globals_lex_greatereq.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_lex_greatereq_globals_lex_greatereq(string solver)
	{
		await Test(
			path: "unit/globals/lex_greatereq/globals_lex_greatereq.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/lex_less/test_bool_lex_less.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_lex_less_test_bool_lex_less(string solver)
	{
		await Test(
			path: "unit/globals/lex_less/test_bool_lex_less.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/lex_lesseq/test_bool_lex_lesseq.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_lex_lesseq_test_bool_lex_lesseq(string solver)
	{
		await Test(
			path: "unit/globals/lex_lesseq/test_bool_lex_lesseq.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/nvalue/globals_nvalue.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_nvalue_globals_nvalue(string solver)
	{
		await Test(
			path: "unit/globals/nvalue/globals_nvalue.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/nvalue/globals_nvalue.mzn")]
	[InlineData("coin-bc")]
	[InlineData("highs")]
	public async Task test_solve_unit_globals_nvalue_globals_nvalue_2(string solver)
	{
		await Test(
			path: "unit/globals/nvalue/globals_nvalue.mzn",
			solver: solver,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/globals/nvalue/nvalue_total.mzn")]
	public async Task test_solve_unit_globals_nvalue_nvalue_total()
	{
		await Test(
			path: "unit/globals/nvalue/nvalue_total.mzn",
			solver: "gecode",
			solutions: ["""l1=1;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/range/globals_range.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_range_globals_range(string solver)
	{
		await Test(
			path: "unit/globals/range/globals_range.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="unit/globals/regular/globals_regular.mzn")]
	public async Task test_solve_unit_globals_regular_globals_regular()
	{
		await Test(
			path: "unit/globals/regular/globals_regular.mzn",
			solver: "gecode",
			solutions: ["""reg_input=[1,2,3,3,3,2,1];reg_input2=[1,2,3,3,3,3,3,3,3,2,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/regular/globals_regular_regex_3.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_regular_globals_regular_regex_3(string solver)
	{
		await Test(
			path: "unit/globals/regular/globals_regular_regex_3.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/regular/globals_regular_regex_5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_regular_globals_regular_regex_5(string solver)
	{
		await Test(
			path: "unit/globals/regular/globals_regular_regex_5.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/roots/test_roots2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_roots_test_roots2(string solver)
	{
		await Test(
			path: "unit/globals/roots/test_roots2.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/strict_lex2/globals_strict_lex2.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_strict_lex2_globals_strict_lex2(string solver)
	{
		await Test(
			path: "unit/globals/strict_lex2/globals_strict_lex2.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/subcircuit/test_subcircuit.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_subcircuit_test_subcircuit(string solver)
	{
		await Test(
			path: "unit/globals/subcircuit/test_subcircuit.mzn",
			solver: solver,
			solutions: ["""x=[1,2,3,4];""","""x=[2,1,3,4];""","""x=[1,4,3,2];""","""x=[4,2,3,1];""","""x=[2,4,3,1];""","""x=[4,1,3,2];""","""x=[1,2,4,3];""","""x=[1,3,2,4];""","""x=[1,3,4,2];""","""x=[1,4,2,3];""","""x=[3,2,1,4];""","""x=[4,2,1,3];""","""x=[3,2,4,1];""","""x=[2,3,1,4];""","""x=[3,1,2,4];""","""x=[4,3,1,2];""","""x=[2,3,4,1];""","""x=[3,4,2,1];""","""x=[4,1,2,3];""","""x=[2,4,1,3];""","""x=[3,1,4,2];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/table/globals_table_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_table_globals_table_opt(string solver)
	{
		await Test(
			path: "unit/globals/table/globals_table_opt.mzn",
			solver: solver,
			solutions: ["""xs=[3,5];""","""xs=[4,5];""","""xs=[5,5];""","""xs=[3,<>];""","""xs=[4,<>];""","""xs=[5,<>];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/value_precede/globals_value_precede_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_globals_value_precede_int(string solver)
	{
		await Test(
			path: "unit/globals/value_precede/globals_value_precede_int.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/value_precede/globals_value_precede_int_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_globals_value_precede_int_opt(string solver)
	{
		await Test(
			path: "unit/globals/value_precede/globals_value_precede_int_opt.mzn",
			solver: solver,
			solutions: ["""x=[<>,<>,<>];""","""x=[1,<>,<>];""","""x=[3,<>,<>];""","""x=[<>,1,<>];""","""x=[<>,3,<>];""","""x=[1,1,<>];""","""x=[1,2,<>];""","""x=[1,3,<>];""","""x=[3,1,<>];""","""x=[3,3,<>];""","""x=[<>,<>,1];""","""x=[<>,<>,3];""","""x=[1,<>,1];""","""x=[1,<>,2];""","""x=[1,<>,3];""","""x=[3,<>,1];""","""x=[3,<>,3];""","""x=[<>,1,1];""","""x=[<>,1,2];""","""x=[<>,1,3];""","""x=[<>,3,1];""","""x=[<>,3,3];""","""x=[1,1,1];""","""x=[1,2,1];""","""x=[1,3,1];""","""x=[1,1,2];""","""x=[1,2,2];""","""x=[1,3,2];""","""x=[1,1,3];""","""x=[1,2,3];""","""x=[1,3,3];""","""x=[3,1,1];""","""x=[3,1,2];""","""x=[3,1,3];""","""x=[3,3,1];""","""x=[3,3,3];"""],
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/value_precede/globals_value_precede_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_globals_value_precede_set(string solver)
	{
		await Test(
			path: "unit/globals/value_precede/globals_value_precede_set.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/value_precede_chain/globals_value_precede_chain_int.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_chain_globals_value_precede_chain_int(string solver)
	{
		await Test(
			path: "unit/globals/value_precede_chain/globals_value_precede_chain_int.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/value_precede_chain/globals_value_precede_chain_int_opt.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_chain_globals_value_precede_chain_int_opt(string solver)
	{
		await Test(
			path: "unit/globals/value_precede_chain/globals_value_precede_chain_int_opt.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/value_precede_chain/globals_value_precede_chain_set.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_value_precede_chain_globals_value_precede_chain_set(string solver)
	{
		await Test(
			path: "unit/globals/value_precede_chain/globals_value_precede_chain_set.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="unit/globals/var_sqr_sym/globals_var_sqr_sym.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_unit_globals_var_sqr_sym_globals_var_sqr_sym(string solver)
	{
		await Test(
			path: "unit/globals/var_sqr_sym/globals_var_sqr_sym.mzn",
			solver: solver,
			allSolutions: true,
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_4.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_4(string solver)
	{
		await Test(
			path: "examples/battleships_4.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_7.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_7(string solver)
	{
		await Test(
			path: "examples/battleships_7.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/factory_planning_instance.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_factory_planning_instance(string solver)
	{
		await Test(
			path: "examples/factory_planning_instance.mzn",
			solver: solver,
			solutions: ["""last_step=5;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/knights.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_knights(string solver)
	{
		await Test(
			path: "examples/knights.mzn",
			solver: solver,
			solutions: ["""p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_4(string solver)
	{
		await Test(
			path: "examples/magicsq_4.mzn",
			solver: solver,
			solutions: ["""a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];""","""a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];""","""a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];""","""a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];""","""a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];""","""a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_5(string solver)
	{
		await Test(
			path: "examples/magicsq_5.mzn",
			solver: solver,
			solutions: ["""a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];""","""a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];""","""a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];""","""a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];""","""a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];""","""a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/oss.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_oss(string solver)
	{
		await Test(
			path: "examples/oss.mzn",
			solver: solver,
			solutions: ["""makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];""","""makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];""","""makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];""","""makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];""","""makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/packing.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_packing(string solver)
	{
		await Test(
			path: "examples/packing.mzn",
			solver: solver,
			solutions: ["""x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/radiation.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_radiation(string solver)
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: solver,
			solutions: ["""Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/radiation.mzn")]
	public async Task test_solve_examples_radiation_2()
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/template_design.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_template_design(string solver)
	{
		await Test(
			path: "examples/template_design.mzn",
			solver: solver,
			solutions: ["""Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/wolf_goat_cabbage.mzn")]
	public async Task test_solve_examples_wolf_goat_cabbage()
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/wolf_goat_cabbage.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_wolf_goat_cabbage_2(string solver)
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: solver,
			solutions: ["""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_4.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_4_2(string solver)
	{
		await Test(
			path: "examples/battleships_4.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_7.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_7_2(string solver)
	{
		await Test(
			path: "examples/battleships_7.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/factory_planning_instance.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_factory_planning_instance_2(string solver)
	{
		await Test(
			path: "examples/factory_planning_instance.mzn",
			solver: solver,
			solutions: ["""last_step=5;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/knights.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_knights_2(string solver)
	{
		await Test(
			path: "examples/knights.mzn",
			solver: solver,
			solutions: ["""p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_4_2(string solver)
	{
		await Test(
			path: "examples/magicsq_4.mzn",
			solver: solver,
			solutions: ["""a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];""","""a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];""","""a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];""","""a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];""","""a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];""","""a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_5_2(string solver)
	{
		await Test(
			path: "examples/magicsq_5.mzn",
			solver: solver,
			solutions: ["""a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];""","""a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];""","""a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];""","""a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];""","""a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];""","""a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/oss.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_oss_2(string solver)
	{
		await Test(
			path: "examples/oss.mzn",
			solver: solver,
			solutions: ["""makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];""","""makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];""","""makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];""","""makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];""","""makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/packing.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_packing_2(string solver)
	{
		await Test(
			path: "examples/packing.mzn",
			solver: solver,
			solutions: ["""x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/radiation.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_radiation_3(string solver)
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: solver,
			solutions: ["""Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/radiation.mzn")]
	public async Task test_solve_examples_radiation_4()
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/template_design.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_template_design_2(string solver)
	{
		await Test(
			path: "examples/template_design.mzn",
			solver: solver,
			solutions: ["""Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/wolf_goat_cabbage.mzn")]
	public async Task test_solve_examples_wolf_goat_cabbage_3()
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/wolf_goat_cabbage.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_wolf_goat_cabbage_4(string solver)
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: solver,
			solutions: ["""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_4.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_4_3(string solver)
	{
		await Test(
			path: "examples/battleships_4.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_7.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_7_3(string solver)
	{
		await Test(
			path: "examples/battleships_7.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/factory_planning_instance.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_factory_planning_instance_3(string solver)
	{
		await Test(
			path: "examples/factory_planning_instance.mzn",
			solver: solver,
			solutions: ["""last_step=5;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/knights.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_knights_3(string solver)
	{
		await Test(
			path: "examples/knights.mzn",
			solver: solver,
			solutions: ["""p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_4_3(string solver)
	{
		await Test(
			path: "examples/magicsq_4.mzn",
			solver: solver,
			solutions: ["""a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];""","""a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];""","""a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];""","""a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];""","""a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];""","""a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_5_3(string solver)
	{
		await Test(
			path: "examples/magicsq_5.mzn",
			solver: solver,
			solutions: ["""a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];""","""a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];""","""a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];""","""a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];""","""a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];""","""a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/oss.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_oss_3(string solver)
	{
		await Test(
			path: "examples/oss.mzn",
			solver: solver,
			solutions: ["""makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];""","""makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];""","""makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];""","""makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];""","""makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/packing.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_packing_3(string solver)
	{
		await Test(
			path: "examples/packing.mzn",
			solver: solver,
			solutions: ["""x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/radiation.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_radiation_5(string solver)
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: solver,
			solutions: ["""Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/radiation.mzn")]
	public async Task test_solve_examples_radiation_6()
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/template_design.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_template_design_3(string solver)
	{
		await Test(
			path: "examples/template_design.mzn",
			solver: solver,
			solutions: ["""Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/wolf_goat_cabbage.mzn")]
	public async Task test_solve_examples_wolf_goat_cabbage_5()
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/wolf_goat_cabbage.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_wolf_goat_cabbage_6(string solver)
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: solver,
			solutions: ["""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_4.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_4_4(string solver)
	{
		await Test(
			path: "examples/battleships_4.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_7.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_7_4(string solver)
	{
		await Test(
			path: "examples/battleships_7.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/factory_planning_instance.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_factory_planning_instance_4(string solver)
	{
		await Test(
			path: "examples/factory_planning_instance.mzn",
			solver: solver,
			solutions: ["""last_step=5;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/knights.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_knights_4(string solver)
	{
		await Test(
			path: "examples/knights.mzn",
			solver: solver,
			solutions: ["""p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_4_4(string solver)
	{
		await Test(
			path: "examples/magicsq_4.mzn",
			solver: solver,
			solutions: ["""a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];""","""a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];""","""a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];""","""a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];""","""a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];""","""a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_5_4(string solver)
	{
		await Test(
			path: "examples/magicsq_5.mzn",
			solver: solver,
			solutions: ["""a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];""","""a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];""","""a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];""","""a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];""","""a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];""","""a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/oss.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_oss_4(string solver)
	{
		await Test(
			path: "examples/oss.mzn",
			solver: solver,
			solutions: ["""makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];""","""makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];""","""makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];""","""makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];""","""makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/packing.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_packing_4(string solver)
	{
		await Test(
			path: "examples/packing.mzn",
			solver: solver,
			solutions: ["""x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/radiation.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_radiation_7(string solver)
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: solver,
			solutions: ["""Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/radiation.mzn")]
	public async Task test_solve_examples_radiation_8()
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/template_design.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_template_design_4(string solver)
	{
		await Test(
			path: "examples/template_design.mzn",
			solver: solver,
			solutions: ["""Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/wolf_goat_cabbage.mzn")]
	public async Task test_solve_examples_wolf_goat_cabbage_7()
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/wolf_goat_cabbage.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_wolf_goat_cabbage_8(string solver)
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: solver,
			solutions: ["""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_4.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_4_5(string solver)
	{
		await Test(
			path: "examples/battleships_4.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_7.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_7_5(string solver)
	{
		await Test(
			path: "examples/battleships_7.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/factory_planning_instance.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_factory_planning_instance_5(string solver)
	{
		await Test(
			path: "examples/factory_planning_instance.mzn",
			solver: solver,
			solutions: ["""last_step=5;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/knights.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_knights_5(string solver)
	{
		await Test(
			path: "examples/knights.mzn",
			solver: solver,
			solutions: ["""p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_4_5(string solver)
	{
		await Test(
			path: "examples/magicsq_4.mzn",
			solver: solver,
			solutions: ["""a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];""","""a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];""","""a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];""","""a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];""","""a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];""","""a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_5_5(string solver)
	{
		await Test(
			path: "examples/magicsq_5.mzn",
			solver: solver,
			solutions: ["""a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];""","""a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];""","""a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];""","""a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];""","""a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];""","""a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/oss.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_oss_5(string solver)
	{
		await Test(
			path: "examples/oss.mzn",
			solver: solver,
			solutions: ["""makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];""","""makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];""","""makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];""","""makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];""","""makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/packing.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_packing_5(string solver)
	{
		await Test(
			path: "examples/packing.mzn",
			solver: solver,
			solutions: ["""x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/radiation.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_radiation_9(string solver)
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: solver,
			solutions: ["""Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/radiation.mzn")]
	public async Task test_solve_examples_radiation_10()
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/template_design.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_template_design_5(string solver)
	{
		await Test(
			path: "examples/template_design.mzn",
			solver: solver,
			solutions: ["""Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/wolf_goat_cabbage.mzn")]
	public async Task test_solve_examples_wolf_goat_cabbage_9()
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/wolf_goat_cabbage.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_wolf_goat_cabbage_10(string solver)
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: solver,
			solutions: ["""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_4.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_4_6(string solver)
	{
		await Test(
			path: "examples/battleships_4.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,3,0,0,1,0,0,1,2,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,3,0,3,0,0,0,0,0,2,0,0,0,4,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,3,0,0,0,0,0,1,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,2,0,0,1,0,0,1,2,0,0,4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[2,1,0,0,5,2,3,1,4,2];row_sums=[3,2,3,4,0,1,2,2,2,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/battleships_7.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_battleships_7_6(string solver)
	{
		await Test(
			path: "examples/battleships_7.mzn",
			solver: solver,
			solutions: ["""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,4,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];""","""a=[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];col_sums=[3,1,4,3,2,2,1,1,2,1];row_sums=[3,2,2,1,4,0,3,1,3,1];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/factory_planning_instance.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_factory_planning_instance_6(string solver)
	{
		await Test(
			path: "examples/factory_planning_instance.mzn",
			solver: solver,
			solutions: ["""last_step=5;"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/knights.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_knights_6(string solver)
	{
		await Test(
			path: "examples/knights.mzn",
			solver: solver,
			solutions: ["""p=[1,9,5,16,3,7,15,2,10,6,17,30,34,26,13,21,32,19,8,4,12,23,36,28,20,31,27,35,24,11,22,18,29,33,25,14];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_4.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_4_6(string solver)
	{
		await Test(
			path: "examples/magicsq_4.mzn",
			solver: solver,
			solutions: ["""a=[16,1,15,2,5,8,10,11,4,13,3,14,9,12,6,7];""","""a=[12,1,14,7,15,4,9,6,2,13,8,11,5,16,3,10];""","""a=[10,5,11,8,6,9,7,12,3,4,14,13,15,16,2,1];""","""a=[10,11,5,8,6,7,9,12,3,2,16,13,15,14,4,1];""","""a=[16,2,9,7,3,13,6,12,5,11,4,14,10,8,15,1];""","""a=[8,11,6,9,13,7,10,4,12,14,3,5,1,2,15,16];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/magicsq_5.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_magicsq_5_6(string solver)
	{
		await Test(
			path: "examples/magicsq_5.mzn",
			solver: solver,
			solutions: ["""a=[20,7,3,24,11,4,19,14,10,18,6,9,17,21,12,13,5,16,8,23,22,25,15,2,1];""","""a=[16,5,4,17,23,9,18,8,6,24,12,7,11,21,14,13,10,20,19,3,15,25,22,2,1];""","""a=[7,5,9,21,23,19,14,22,6,4,25,24,11,3,2,1,12,15,17,20,13,10,8,18,16];""","""a=[23,5,13,17,7,3,21,9,14,18,6,4,12,24,19,11,10,16,8,20,22,25,15,2,1];""","""a=[25,5,9,3,23,4,24,15,14,8,20,7,1,16,21,6,17,18,13,11,10,12,22,19,2];""","""a=[11,21,17,10,6,22,8,12,19,4,16,15,18,9,7,14,20,5,3,23,2,1,13,24,25];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/oss.mzn")]
	[InlineData("gecode")]
	[InlineData("coin-bc")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_oss_6(string solver)
	{
		await Test(
			path: "examples/oss.mzn",
			solver: solver,
			solutions: ["""makespan=1168;objective=1168;start=[507,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[333,1162,0,1000,0,657,0,657,333];""","""makespan=1168;objective=1168;start=[339,0,6,0,168,663,168,663,339];""","""makespan=1168;objective=1168;start=[0,1162,829,1000,505,0,829,0,505];""","""makespan=1168;objective=1168;start=[339,1162,0,1000,168,657,161,657,333];""","""makespan=1168;objective=1168;start=[503,0,6,0,169,820,168,663,339];""","""makespan=1168;objective=1168;start=[507,0,6,0,174,825,168,663,339];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/packing.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_packing_6(string solver)
	{
		await Test(
			path: "examples/packing.mzn",
			solver: solver,
			solutions: ["""x=[0,70,75,0,79,50,0,50,46,27,52,35,59,35,35,50,27,52,46,75,50];y=[0,70,33,50,0,0,85,29,88,93,70,65,54,50,82,54,85,63,82,29,63];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/radiation.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_radiation_11(string solver)
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: solver,
			solutions: ["""Beamtime=21;K=7;N=[2,1,1,1,2,0,0,0,0,0,0,0,0,0];Q=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0];objective=175;"""],
			statuses: [SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/radiation.mzn")]
	public async Task test_solve_examples_radiation_12()
	{
		await Test(
			path: "examples/radiation.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/template_design.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_template_design_6(string solver)
	{
		await Test(
			path: "examples/template_design.mzn",
			solver: solver,
			solutions: ["""Production=442;R=[167,275];Surplus=313;objective=442;p=[0,1,2,0,1,1,3,0,3,0,0,3,0,4];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Fact(DisplayName="examples/wolf_goat_cabbage.mzn")]
	public async Task test_solve_examples_wolf_goat_cabbage_11()
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: "coin-bc",
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

	[Theory(DisplayName="examples/wolf_goat_cabbage.mzn")]
	[InlineData("gecode")]
	[InlineData("chuffed")]
	public async Task test_solve_examples_wolf_goat_cabbage_12(string solver)
	{
		await Test(
			path: "examples/wolf_goat_cabbage.mzn",
			solver: solver,
			solutions: ["""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,false,true,false,true,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];""","""cabbage=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];farmer=[false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];goat=[false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,false,true,false,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,false,true,false,true,false,false,true,false,false];wolf=[false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false,true,false,false];"""],
			statuses: [SolveStatus.Satisfied,SolveStatus.Optimal]
		);
	}

}

