output ["\"output\": {","\"dzn\": ",showJSON(concat(["a = ",let {array [int] of string: X_INTRODUCED_19_ = [_toString_Foo(X_INTRODUCED_17_,true,false) | X_INTRODUCED_17_ in index_set(a)], array [int] of string: X_INTRODUCED_20_ = [showDzn(a[X_INTRODUCED_18_]) | X_INTRODUCED_18_ in index_set(a)]} in (show_indexed(X_INTRODUCED_19_,X_INTRODUCED_20_)),";\n","b = ",showDzn(b),";\n","c = ",showDzn(c),";\n","d = array1d(",_toString_Foo(1,false,false),"..",_toString_Foo(3,false,false),", ",showDzn(d),");\n","e = array1d(",show(index_set(e)),", ",showDzn(e),");\n","f = array1d(2..3, ",showDzn(f),");\n","g = array1d(",show(index_set(g)),", ",showDzn(g),");\n","h = array2d(1..2, ",show(index_set_2of2(h)),", ",showDzn(h),");\n"])),"}, \"sections\": [\"dzn\"]"];
function string : _toString_Foo(opt int: X_INTRODUCED_0_,bool: X_INTRODUCED_1_,bool: X_INTRODUCED_2_) = if occurs(X_INTRODUCED_0_) then if X_INTRODUCED_1_ then showDznId(_enum_to_string_0_Foo[deopt(X_INTRODUCED_0_)]) elseif X_INTRODUCED_2_ then ("{\"e\":"++show(_enum_to_string_0_Foo[deopt(X_INTRODUCED_0_)]))++"}" else _enum_to_string_0_Foo[deopt(X_INTRODUCED_0_)] endif else if X_INTRODUCED_2_ then "null" else "<>" endif endif;
bool: x;
array [1..2,int] of bool: h = array2d(1..2,2..3,[fix(x) | i in 1..4]);
array [int] of bool: g = [fix(x) | i in 1..3];
array [2..3] of bool: f = array1d(2..3,[fix(x),fix(x)]);
array [int] of bool: e = [fix(x)];
set of int: Foo = 1..3;
array [Foo] of bool: d = array1d(Foo,[fix(x),fix(x),fix(x)]);
array [1..3] of string: _enum_to_string_0_Foo = ["A","B","C"];
array [int] of bool: c = [x];
array [1..3] of bool: b = [x,x,x];
array [Foo] of bool: a = array1d(Foo,[x,x,x]);
