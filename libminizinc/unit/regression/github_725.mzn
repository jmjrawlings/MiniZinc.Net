/***
!Test
solvers: [gecode]
expected:
- !Error
  type: SyntaxError
type: compile
***/
include "globals.mzn";
array[0..63] of var 0..1: plaintext;
array[0..127] of var 0..1: key;
array[0..7] of var 0..1: modadd_0_0;
array[0..7] of var 0..1: xor_0_1;
array[0..7] of var 0..1: modadd_0_2;
array[0..7] of var 0..1: xor_0_3;
array[0..7] of var 0..1: modadd_0_5;
array[0..7] of var 0..1: modadd_0_7;
array[0..7] of var 0..1: modadd_0_9;
array[0..7] of var 0..1: modadd_0_11;
array[0..7] of var 0..1: rot_0_12;
array[0..7] of var 0..1: rot_0_13;
array[0..7] of var 0..1: rot_0_14;
array[0..7] of var 0..1: xor_0_15;
array[0..7] of var 0..1: xor_0_16;
array[0..7] of var 0..1: xor_0_17;
array[0..7] of var 0..1: modadd_0_18;
array[0..7] of var 0..1: rot_0_19;
array[0..7] of var 0..1: rot_0_20;
array[0..7] of var 0..1: rot_0_21;
array[0..7] of var 0..1: xor_0_22;
array[0..7] of var 0..1: xor_0_23;
array[0..7] of var 0..1: modadd_0_24;
array[0..7] of var 0..1: xor_0_25;
array[0..7] of var 0..1: rot_0_26;
array[0..7] of var 0..1: rot_0_27;
array[0..7] of var 0..1: rot_0_28;
array[0..7] of var 0..1: xor_0_29;
array[0..7] of var 0..1: xor_0_30;
array[0..7] of var 0..1: xor_0_31;
array[0..7] of var 0..1: modadd_0_32;
array[0..7] of var 0..1: rot_0_33;
array[0..7] of var 0..1: rot_0_34;
array[0..7] of var 0..1: rot_0_35;
array[0..7] of var 0..1: xor_0_36;
array[0..7] of var 0..1: xor_0_37;
array[0..7] of var 0..1: modadd_0_38;
array[0..7] of var 0..1: xor_0_39;
array[0..31] of var 0..1: intermediate_output_0_40;
array[0..63] of var 0..1: intermediate_output_0_41;
array[0..7] of var 0..1: modadd_1_1;
array[0..7] of var 0..1: modadd_1_3;
array[0..7] of var 0..1: modadd_1_5;
array[0..7] of var 0..1: modadd_1_7;
array[0..7] of var 0..1: rot_1_8;
array[0..7] of var 0..1: rot_1_9;
array[0..7] of var 0..1: rot_1_10;
array[0..7] of var 0..1: xor_1_11;
array[0..7] of var 0..1: xor_1_12;
array[0..7] of var 0..1: xor_1_13;
array[0..7] of var 0..1: modadd_1_14;
array[0..7] of var 0..1: rot_1_15;
array[0..7] of var 0..1: rot_1_16;
array[0..7] of var 0..1: rot_1_17;
array[0..7] of var 0..1: xor_1_18;
array[0..7] of var 0..1: xor_1_19;
array[0..7] of var 0..1: modadd_1_20;
array[0..7] of var 0..1: xor_1_21;
array[0..7] of var 0..1: rot_1_22;
array[0..7] of var 0..1: rot_1_23;
array[0..7] of var 0..1: rot_1_24;
array[0..7] of var 0..1: xor_1_25;
array[0..7] of var 0..1: xor_1_26;
array[0..7] of var 0..1: xor_1_27;
array[0..7] of var 0..1: modadd_1_28;
array[0..7] of var 0..1: rot_1_29;
array[0..7] of var 0..1: rot_1_30;
array[0..7] of var 0..1: rot_1_31;
array[0..7] of var 0..1: xor_1_32;
array[0..7] of var 0..1: xor_1_33;
array[0..7] of var 0..1: modadd_1_34;
array[0..7] of var 0..1: xor_1_35;
array[0..31] of var 0..1: intermediate_output_1_36;
array[0..63] of var 0..1: intermediate_output_1_37;
array[0..7] of var 0..1: modadd_2_1;
array[0..7] of var 0..1: modadd_2_3;
array[0..7] of var 0..1: modadd_2_5;
array[0..7] of var 0..1: modadd_2_7;
array[0..7] of var 0..1: rot_2_8;
array[0..7] of var 0..1: rot_2_9;
array[0..7] of var 0..1: rot_2_10;
array[0..7] of var 0..1: xor_2_11;
array[0..7] of var 0..1: xor_2_12;
array[0..7] of var 0..1: xor_2_13;
array[0..7] of var 0..1: modadd_2_14;
array[0..7] of var 0..1: rot_2_15;
array[0..7] of var 0..1: rot_2_16;
array[0..7] of var 0..1: rot_2_17;
array[0..7] of var 0..1: xor_2_18;
array[0..7] of var 0..1: xor_2_19;
array[0..7] of var 0..1: modadd_2_20;
array[0..7] of var 0..1: xor_2_21;
array[0..7] of var 0..1: rot_2_22;
array[0..7] of var 0..1: rot_2_23;
array[0..7] of var 0..1: rot_2_24;
array[0..7] of var 0..1: xor_2_25;
array[0..7] of var 0..1: xor_2_26;
array[0..7] of var 0..1: xor_2_27;
array[0..7] of var 0..1: modadd_2_28;
array[0..7] of var 0..1: rot_2_29;
array[0..7] of var 0..1: rot_2_30;
array[0..7] of var 0..1: rot_2_31;
array[0..7] of var 0..1: xor_2_32;
array[0..7] of var 0..1: xor_2_33;
array[0..7] of var 0..1: modadd_2_34;
array[0..7] of var 0..1: xor_2_35;
array[0..7] of var 0..1: modadd_2_36;
array[0..7] of var 0..1: xor_2_37;
array[0..7] of var 0..1: modadd_2_38;
array[0..7] of var 0..1: xor_2_39;
array[0..31] of var 0..1: intermediate_output_2_40;
array[0..63] of var 0..1: cipher_output_2_41;
array[0..27] of var int: p;
var int: weight = sum(p);
array[0..7] of var 0..1: pre_modadd_0_0_0;
array[0..7] of var 0..1: pre_modadd_0_0_1;
array[0..7] of var 0..1: Shi_pre_modadd_0_0_1 = LShift(pre_modadd_0_0_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_0_0_0 = LShift(pre_modadd_0_0_0,1);
array[0..7] of var 0..1: Shi_modadd_0_0 = LShift(modadd_0_0,1);
array[0..7] of var 0..1: eq_modadd_0_0 = Eq(Shi_pre_modadd_0_0_1, Shi_pre_modadd_0_0_0, Shi_modadd_0_0);
array[0..7] of var 0..1: pre_modadd_0_2_0;
array[0..7] of var 0..1: pre_modadd_0_2_1;
array[0..7] of var 0..1: Shi_pre_modadd_0_2_1 = LShift(pre_modadd_0_2_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_0_2_0 = LShift(pre_modadd_0_2_0,1);
array[0..7] of var 0..1: Shi_modadd_0_2 = LShift(modadd_0_2,1);
array[0..7] of var 0..1: eq_modadd_0_2 = Eq(Shi_pre_modadd_0_2_1, Shi_pre_modadd_0_2_0, Shi_modadd_0_2);
array[0..7] of var 0..1: constant_0_4 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_0_5;
array[0..7] of var float: phi_modadd_0_5;
array[0..7] of var 0..1: modadd_0_5;
array[0..7] of var int: pre_modadd_0_5;
array[0..7] of var int: p_modadd_0_5;
array[0..7] of var int: a_modadd_0_5;
array[0..7] of var int: w_modadd_0_5;
array[0..7] of var 0..1: constant_0_6 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_0_7;
array[0..7] of var float: phi_modadd_0_7;
array[0..7] of var 0..1: modadd_0_7;
array[0..7] of var int: pre_modadd_0_7;
array[0..7] of var int: p_modadd_0_7;
array[0..7] of var int: a_modadd_0_7;
array[0..7] of var int: w_modadd_0_7;
array[0..7] of var 0..1: constant_0_8 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_0_9;
array[0..7] of var float: phi_modadd_0_9;
array[0..7] of var 0..1: modadd_0_9;
array[0..7] of var int: pre_modadd_0_9;
array[0..7] of var int: p_modadd_0_9;
array[0..7] of var int: a_modadd_0_9;
array[0..7] of var int: w_modadd_0_9;
array[0..7] of var 0..1: constant_0_10 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_0_11;
array[0..7] of var float: phi_modadd_0_11;
array[0..7] of var 0..1: modadd_0_11;
array[0..7] of var int: pre_modadd_0_11;
array[0..7] of var int: p_modadd_0_11;
array[0..7] of var int: a_modadd_0_11;
array[0..7] of var int: w_modadd_0_11;
array[0..7] of var 0..1: pre_modadd_0_18_0;
array[0..7] of var 0..1: pre_modadd_0_18_1;
array[0..7] of var 0..1: Shi_pre_modadd_0_18_1 = LShift(pre_modadd_0_18_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_0_18_0 = LShift(pre_modadd_0_18_0,1);
array[0..7] of var 0..1: Shi_modadd_0_18 = LShift(modadd_0_18,1);
array[0..7] of var 0..1: eq_modadd_0_18 = Eq(Shi_pre_modadd_0_18_1, Shi_pre_modadd_0_18_0, Shi_modadd_0_18);
array[0..7] of var 0..1: pre_modadd_0_24_0;
array[0..7] of var 0..1: pre_modadd_0_24_1;
array[0..7] of var 0..1: Shi_pre_modadd_0_24_1 = LShift(pre_modadd_0_24_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_0_24_0 = LShift(pre_modadd_0_24_0,1);
array[0..7] of var 0..1: Shi_modadd_0_24 = LShift(modadd_0_24,1);
array[0..7] of var 0..1: eq_modadd_0_24 = Eq(Shi_pre_modadd_0_24_1, Shi_pre_modadd_0_24_0, Shi_modadd_0_24);
array[0..7] of var 0..1: pre_modadd_0_32_0;
array[0..7] of var 0..1: pre_modadd_0_32_1;
array[0..7] of var 0..1: Shi_pre_modadd_0_32_1 = LShift(pre_modadd_0_32_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_0_32_0 = LShift(pre_modadd_0_32_0,1);
array[0..7] of var 0..1: Shi_modadd_0_32 = LShift(modadd_0_32,1);
array[0..7] of var 0..1: eq_modadd_0_32 = Eq(Shi_pre_modadd_0_32_1, Shi_pre_modadd_0_32_0, Shi_modadd_0_32);
array[0..7] of var 0..1: pre_modadd_0_38_0;
array[0..7] of var 0..1: pre_modadd_0_38_1;
array[0..7] of var 0..1: Shi_pre_modadd_0_38_1 = LShift(pre_modadd_0_38_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_0_38_0 = LShift(pre_modadd_0_38_0,1);
array[0..7] of var 0..1: Shi_modadd_0_38 = LShift(modadd_0_38,1);
array[0..7] of var 0..1: eq_modadd_0_38 = Eq(Shi_pre_modadd_0_38_1, Shi_pre_modadd_0_38_0, Shi_modadd_0_38);
array[0..7] of var 0..1: constant_1_0 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_1_1;
array[0..7] of var float: phi_modadd_1_1;
array[0..7] of var 0..1: modadd_1_1;
array[0..7] of var int: pre_modadd_1_1;
array[0..7] of var int: p_modadd_1_1;
array[0..7] of var int: a_modadd_1_1;
array[0..7] of var int: w_modadd_1_1;
array[0..7] of var 0..1: constant_1_2 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_1_3;
array[0..7] of var float: phi_modadd_1_3;
array[0..7] of var 0..1: modadd_1_3;
array[0..7] of var int: pre_modadd_1_3;
array[0..7] of var int: p_modadd_1_3;
array[0..7] of var int: a_modadd_1_3;
array[0..7] of var int: w_modadd_1_3;
array[0..7] of var 0..1: constant_1_4 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_1_5;
array[0..7] of var float: phi_modadd_1_5;
array[0..7] of var 0..1: modadd_1_5;
array[0..7] of var int: pre_modadd_1_5;
array[0..7] of var int: p_modadd_1_5;
array[0..7] of var int: a_modadd_1_5;
array[0..7] of var int: w_modadd_1_5;
array[0..7] of var 0..1: constant_1_6 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_1_7;
array[0..7] of var float: phi_modadd_1_7;
array[0..7] of var 0..1: modadd_1_7;
array[0..7] of var int: pre_modadd_1_7;
array[0..7] of var int: p_modadd_1_7;
array[0..7] of var int: a_modadd_1_7;
array[0..7] of var int: w_modadd_1_7;
array[0..7] of var 0..1: pre_modadd_1_14_0;
array[0..7] of var 0..1: pre_modadd_1_14_1;
array[0..7] of var 0..1: Shi_pre_modadd_1_14_1 = LShift(pre_modadd_1_14_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_1_14_0 = LShift(pre_modadd_1_14_0,1);
array[0..7] of var 0..1: Shi_modadd_1_14 = LShift(modadd_1_14,1);
array[0..7] of var 0..1: eq_modadd_1_14 = Eq(Shi_pre_modadd_1_14_1, Shi_pre_modadd_1_14_0, Shi_modadd_1_14);
array[0..7] of var 0..1: pre_modadd_1_20_0;
array[0..7] of var 0..1: pre_modadd_1_20_1;
array[0..7] of var 0..1: Shi_pre_modadd_1_20_1 = LShift(pre_modadd_1_20_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_1_20_0 = LShift(pre_modadd_1_20_0,1);
array[0..7] of var 0..1: Shi_modadd_1_20 = LShift(modadd_1_20,1);
array[0..7] of var 0..1: eq_modadd_1_20 = Eq(Shi_pre_modadd_1_20_1, Shi_pre_modadd_1_20_0, Shi_modadd_1_20);
array[0..7] of var 0..1: pre_modadd_1_28_0;
array[0..7] of var 0..1: pre_modadd_1_28_1;
array[0..7] of var 0..1: Shi_pre_modadd_1_28_1 = LShift(pre_modadd_1_28_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_1_28_0 = LShift(pre_modadd_1_28_0,1);
array[0..7] of var 0..1: Shi_modadd_1_28 = LShift(modadd_1_28,1);
array[0..7] of var 0..1: eq_modadd_1_28 = Eq(Shi_pre_modadd_1_28_1, Shi_pre_modadd_1_28_0, Shi_modadd_1_28);
array[0..7] of var 0..1: pre_modadd_1_34_0;
array[0..7] of var 0..1: pre_modadd_1_34_1;
array[0..7] of var 0..1: Shi_pre_modadd_1_34_1 = LShift(pre_modadd_1_34_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_1_34_0 = LShift(pre_modadd_1_34_0,1);
array[0..7] of var 0..1: Shi_modadd_1_34 = LShift(modadd_1_34,1);
array[0..7] of var 0..1: eq_modadd_1_34 = Eq(Shi_pre_modadd_1_34_1, Shi_pre_modadd_1_34_0, Shi_modadd_1_34);
array[0..7] of var 0..1: constant_2_0 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_2_1;
array[0..7] of var float: phi_modadd_2_1;
array[0..7] of var 0..1: modadd_2_1;
array[0..7] of var int: pre_modadd_2_1;
array[0..7] of var int: p_modadd_2_1;
array[0..7] of var int: a_modadd_2_1;
array[0..7] of var int: w_modadd_2_1;
array[0..7] of var 0..1: constant_2_2 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_2_3;
array[0..7] of var float: phi_modadd_2_3;
array[0..7] of var 0..1: modadd_2_3;
array[0..7] of var int: pre_modadd_2_3;
array[0..7] of var int: p_modadd_2_3;
array[0..7] of var int: a_modadd_2_3;
array[0..7] of var int: w_modadd_2_3;
array[0..7] of var 0..1: constant_2_4 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_2_5;
array[0..7] of var float: phi_modadd_2_5;
array[0..7] of var 0..1: modadd_2_5;
array[0..7] of var int: pre_modadd_2_5;
array[0..7] of var int: p_modadd_2_5;
array[0..7] of var int: a_modadd_2_5;
array[0..7] of var int: w_modadd_2_5;
array[0..7] of var 0..1: constant_2_6 = array1d(0..7, [0,0,0,0,0,0,0,0]);
array[0..7] of var float: delta_modadd_2_7;
array[0..7] of var float: phi_modadd_2_7;
array[0..7] of var 0..1: modadd_2_7;
array[0..7] of var int: pre_modadd_2_7;
array[0..7] of var int: p_modadd_2_7;
array[0..7] of var int: a_modadd_2_7;
array[0..7] of var int: w_modadd_2_7;
array[0..7] of var 0..1: pre_modadd_2_14_0;
array[0..7] of var 0..1: pre_modadd_2_14_1;
array[0..7] of var 0..1: Shi_pre_modadd_2_14_1 = LShift(pre_modadd_2_14_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_2_14_0 = LShift(pre_modadd_2_14_0,1);
array[0..7] of var 0..1: Shi_modadd_2_14 = LShift(modadd_2_14,1);
array[0..7] of var 0..1: eq_modadd_2_14 = Eq(Shi_pre_modadd_2_14_1, Shi_pre_modadd_2_14_0, Shi_modadd_2_14);
array[0..7] of var 0..1: pre_modadd_2_20_0;
array[0..7] of var 0..1: pre_modadd_2_20_1;
array[0..7] of var 0..1: Shi_pre_modadd_2_20_1 = LShift(pre_modadd_2_20_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_2_20_0 = LShift(pre_modadd_2_20_0,1);
array[0..7] of var 0..1: Shi_modadd_2_20 = LShift(modadd_2_20,1);
array[0..7] of var 0..1: eq_modadd_2_20 = Eq(Shi_pre_modadd_2_20_1, Shi_pre_modadd_2_20_0, Shi_modadd_2_20);
array[0..7] of var 0..1: pre_modadd_2_28_0;
array[0..7] of var 0..1: pre_modadd_2_28_1;
array[0..7] of var 0..1: Shi_pre_modadd_2_28_1 = LShift(pre_modadd_2_28_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_2_28_0 = LShift(pre_modadd_2_28_0,1);
array[0..7] of var 0..1: Shi_modadd_2_28 = LShift(modadd_2_28,1);
array[0..7] of var 0..1: eq_modadd_2_28 = Eq(Shi_pre_modadd_2_28_1, Shi_pre_modadd_2_28_0, Shi_modadd_2_28);
array[0..7] of var 0..1: pre_modadd_2_34_0;
array[0..7] of var 0..1: pre_modadd_2_34_1;
array[0..7] of var 0..1: Shi_pre_modadd_2_34_1 = LShift(pre_modadd_2_34_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_2_34_0 = LShift(pre_modadd_2_34_0,1);
array[0..7] of var 0..1: Shi_modadd_2_34 = LShift(modadd_2_34,1);
array[0..7] of var 0..1: eq_modadd_2_34 = Eq(Shi_pre_modadd_2_34_1, Shi_pre_modadd_2_34_0, Shi_modadd_2_34);
array[0..7] of var 0..1: pre_modadd_2_36_0;
array[0..7] of var 0..1: pre_modadd_2_36_1;
array[0..7] of var 0..1: Shi_pre_modadd_2_36_1 = LShift(pre_modadd_2_36_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_2_36_0 = LShift(pre_modadd_2_36_0,1);
array[0..7] of var 0..1: Shi_modadd_2_36 = LShift(modadd_2_36,1);
array[0..7] of var 0..1: eq_modadd_2_36 = Eq(Shi_pre_modadd_2_36_1, Shi_pre_modadd_2_36_0, Shi_modadd_2_36);
array[0..7] of var 0..1: pre_modadd_2_38_0;
array[0..7] of var 0..1: pre_modadd_2_38_1;
array[0..7] of var 0..1: Shi_pre_modadd_2_38_1 = LShift(pre_modadd_2_38_1,1);
array[0..7] of var 0..1: Shi_pre_modadd_2_38_0 = LShift(pre_modadd_2_38_0,1);
array[0..7] of var 0..1: Shi_modadd_2_38 = LShift(modadd_2_38,1);
array[0..7] of var 0..1: eq_modadd_2_38 = Eq(Shi_pre_modadd_2_38_1, Shi_pre_modadd_2_38_0, Shi_modadd_2_38);
constraint plaintext[0] != 0 \/ plaintext[1] != 0 \/ plaintext[2] != 0 \/ plaintext[3] != 0 \/ plaintext[4] != 0 \/ plaintext[5] != 0 \/ plaintext[6] != 0 \/ plaintext[7] != 0 \/ plaintext[8] != 0 \/ plaintext[9] != 0 \/ plaintext[10] != 0 \/ plaintext[11] != 0 \/ plaintext[12] != 0 \/ plaintext[13] != 0 \/ plaintext[14] != 0 \/ plaintext[15] != 0 \/ plaintext[16] != 0 \/ plaintext[17] != 0 \/ plaintext[18] != 0 \/ plaintext[19] != 0 \/ plaintext[20] != 0 \/ plaintext[21] != 0 \/ plaintext[22] != 0 \/ plaintext[23] != 0 \/ plaintext[24] != 0 \/ plaintext[25] != 0 \/ plaintext[26] != 0 \/ plaintext[27] != 0 \/ plaintext[28] != 0 \/ plaintext[29] != 0 \/ plaintext[30] != 0 \/ plaintext[31] != 0 \/ plaintext[32] != 0 \/ plaintext[33] != 0 \/ plaintext[34] != 0 \/ plaintext[35] != 0 \/ plaintext[36] != 0 \/ plaintext[37] != 0 \/ plaintext[38] != 0 \/ plaintext[39] != 0 \/ plaintext[40] != 0 \/ plaintext[41] != 0 \/ plaintext[42] != 0 \/ plaintext[43] != 0 \/ plaintext[44] != 0 \/ plaintext[45] != 0 \/ plaintext[46] != 0 \/ plaintext[47] != 0 \/ plaintext[48] != 0 \/ plaintext[49] != 0 \/ plaintext[50] != 0 \/ plaintext[51] != 0 \/ plaintext[52] != 0 \/ plaintext[53] != 0 \/ plaintext[54] != 0 \/ plaintext[55] != 0 \/ plaintext[56] != 0 \/ plaintext[57] != 0 \/ plaintext[58] != 0 \/ plaintext[59] != 0 \/ plaintext[60] != 0 \/ plaintext[61] != 0 \/ plaintext[62] != 0 \/ plaintext[63] != 0;
constraint key[0] = 0 /\ key[1] = 0 /\ key[2] = 0 /\ key[3] = 0 /\ key[4] = 0 /\ key[5] = 0 /\ key[6] = 0 /\ key[7] = 0 /\ key[8] = 0 /\ key[9] = 0 /\ key[10] = 0 /\ key[11] = 0 /\ key[12] = 0 /\ key[13] = 0 /\ key[14] = 0 /\ key[15] = 0 /\ key[16] = 0 /\ key[17] = 0 /\ key[18] = 0 /\ key[19] = 0 /\ key[20] = 0 /\ key[21] = 0 /\ key[22] = 0 /\ key[23] = 0 /\ key[24] = 0 /\ key[25] = 0 /\ key[26] = 0 /\ key[27] = 0 /\ key[28] = 0 /\ key[29] = 0 /\ key[30] = 0 /\ key[31] = 0 /\ key[32] = 0 /\ key[33] = 0 /\ key[34] = 0 /\ key[35] = 0 /\ key[36] = 0 /\ key[37] = 0 /\ key[38] = 0 /\ key[39] = 0 /\ key[40] = 0 /\ key[41] = 0 /\ key[42] = 0 /\ key[43] = 0 /\ key[44] = 0 /\ key[45] = 0 /\ key[46] = 0 /\ key[47] = 0 /\ key[48] = 0 /\ key[49] = 0 /\ key[50] = 0 /\ key[51] = 0 /\ key[52] = 0 /\ key[53] = 0 /\ key[54] = 0 /\ key[55] = 0 /\ key[56] = 0 /\ key[57] = 0 /\ key[58] = 0 /\ key[59] = 0 /\ key[60] = 0 /\ key[61] = 0 /\ key[62] = 0 /\ key[63] = 0 /\ key[64] = 0 /\ key[65] = 0 /\ key[66] = 0 /\ key[67] = 0 /\ key[68] = 0 /\ key[69] = 0 /\ key[70] = 0 /\ key[71] = 0 /\ key[72] = 0 /\ key[73] = 0 /\ key[74] = 0 /\ key[75] = 0 /\ key[76] = 0 /\ key[77] = 0 /\ key[78] = 0 /\ key[79] = 0 /\ key[80] = 0 /\ key[81] = 0 /\ key[82] = 0 /\ key[83] = 0 /\ key[84] = 0 /\ key[85] = 0 /\ key[86] = 0 /\ key[87] = 0 /\ key[88] = 0 /\ key[89] = 0 /\ key[90] = 0 /\ key[91] = 0 /\ key[92] = 0 /\ key[93] = 0 /\ key[94] = 0 /\ key[95] = 0 /\ key[96] = 0 /\ key[97] = 0 /\ key[98] = 0 /\ key[99] = 0 /\ key[100] = 0 /\ key[101] = 0 /\ key[102] = 0 /\ key[103] = 0 /\ key[104] = 0 /\ key[105] = 0 /\ key[106] = 0 /\ key[107] = 0 /\ key[108] = 0 /\ key[109] = 0 /\ key[110] = 0 /\ key[111] = 0 /\ key[112] = 0 /\ key[113] = 0 /\ key[114] = 0 /\ key[115] = 0 /\ key[116] = 0 /\ key[117] = 0 /\ key[118] = 0 /\ key[119] = 0 /\ key[120] = 0 /\ key[121] = 0 /\ key[122] = 0 /\ key[123] = 0 /\ key[124] = 0 /\ key[125] = 0 /\ key[126] = 0 /\ key[127] = 0;
constraint pre_modadd_0_0_0[0] = plaintext[56];
constraint pre_modadd_0_0_0[1] = plaintext[57];
constraint pre_modadd_0_0_0[2] = plaintext[58];
constraint pre_modadd_0_0_0[3] = plaintext[59];
constraint pre_modadd_0_0_0[4] = plaintext[60];
constraint pre_modadd_0_0_0[5] = plaintext[61];
constraint pre_modadd_0_0_0[6] = plaintext[62];
constraint pre_modadd_0_0_0[7] = plaintext[63];
constraint pre_modadd_0_0_1[0] = key[24];
constraint pre_modadd_0_0_1[1] = key[25];
constraint pre_modadd_0_0_1[2] = key[26];
constraint pre_modadd_0_0_1[3] = key[27];
constraint pre_modadd_0_0_1[4] = key[28];
constraint pre_modadd_0_0_1[5] = key[29];
constraint pre_modadd_0_0_1[6] = key[30];
constraint pre_modadd_0_0_1[7] = key[31];
constraint forall(j in 0..7)(if eq_modadd_0_0[j] = 1 then (sum([pre_modadd_0_0_1[j], pre_modadd_0_0_0[j], modadd_0_0[j]]) mod 2) = Shi_pre_modadd_0_0_0[j] else true endif) /\ p[0] = 800-100 * sum(eq_modadd_0_0);
constraint xor_0_1[0] = (plaintext[40] + key[16]) mod 2;
constraint xor_0_1[1] = (plaintext[41] + key[17]) mod 2;
constraint xor_0_1[2] = (plaintext[42] + key[18]) mod 2;
constraint xor_0_1[3] = (plaintext[43] + key[19]) mod 2;
constraint xor_0_1[4] = (plaintext[44] + key[20]) mod 2;
constraint xor_0_1[5] = (plaintext[45] + key[21]) mod 2;
constraint xor_0_1[6] = (plaintext[46] + key[22]) mod 2;
constraint xor_0_1[7] = (plaintext[47] + key[23]) mod 2;
constraint pre_modadd_0_2_0[0] = plaintext[24];
constraint pre_modadd_0_2_0[1] = plaintext[25];
constraint pre_modadd_0_2_0[2] = plaintext[26];
constraint pre_modadd_0_2_0[3] = plaintext[27];
constraint pre_modadd_0_2_0[4] = plaintext[28];
constraint pre_modadd_0_2_0[5] = plaintext[29];
constraint pre_modadd_0_2_0[6] = plaintext[30];
constraint pre_modadd_0_2_0[7] = plaintext[31];
constraint pre_modadd_0_2_1[0] = key[8];
constraint pre_modadd_0_2_1[1] = key[9];
constraint pre_modadd_0_2_1[2] = key[10];
constraint pre_modadd_0_2_1[3] = key[11];
constraint pre_modadd_0_2_1[4] = key[12];
constraint pre_modadd_0_2_1[5] = key[13];
constraint pre_modadd_0_2_1[6] = key[14];
constraint pre_modadd_0_2_1[7] = key[15];
constraint forall(j in 0..7)(if eq_modadd_0_2[j] = 1 then (sum([pre_modadd_0_2_1[j], pre_modadd_0_2_0[j], modadd_0_2[j]]) mod 2) = Shi_pre_modadd_0_2_0[j] else true endif) /\ p[1] = 800-100 * sum(eq_modadd_0_2);
constraint xor_0_3[0] = (plaintext[8] + key[0]) mod 2;
constraint xor_0_3[1] = (plaintext[9] + key[1]) mod 2;
constraint xor_0_3[2] = (plaintext[10] + key[2]) mod 2;
constraint xor_0_3[3] = (plaintext[11] + key[3]) mod 2;
constraint xor_0_3[4] = (plaintext[12] + key[4]) mod 2;
constraint xor_0_3[5] = (plaintext[13] + key[5]) mod 2;
constraint xor_0_3[6] = (plaintext[14] + key[6]) mod 2;
constraint xor_0_3[7] = (plaintext[15] + key[7]) mod 2;
constraint pre_modadd_0_5[0] = (key[120] + modadd_0_5[0]) mod 2;
constraint a_modadd_0_5[0] = 0;
constraint pre_modadd_0_5[1] = (key[121] + modadd_0_5[1]) mod 2;
constraint a_modadd_0_5[1] = 1;
constraint pre_modadd_0_5[2] = (key[122] + modadd_0_5[2]) mod 2;
constraint a_modadd_0_5[2] = 0;
constraint pre_modadd_0_5[3] = (key[123] + modadd_0_5[3]) mod 2;
constraint a_modadd_0_5[3] = 1;
constraint pre_modadd_0_5[4] = (key[124] + modadd_0_5[4]) mod 2;
constraint a_modadd_0_5[4] = 1;
constraint pre_modadd_0_5[5] = (key[125] + modadd_0_5[5]) mod 2;
constraint a_modadd_0_5[5] = 0;
constraint pre_modadd_0_5[6] = (key[126] + modadd_0_5[6]) mod 2;
constraint a_modadd_0_5[6] = 1;
constraint pre_modadd_0_5[7] = (key[127] + modadd_0_5[7]) mod 2;
constraint a_modadd_0_5[7] = 0;
constraint phi_modadd_0_5[0] = 1;
constraint delta_modadd_0_5[0] = 0;
constraint w_modadd_0_5[0]=0;
constraint table([key[121], modadd_0_5[1], pre_modadd_0_5[0], delta_modadd_0_5[1], phi_modadd_0_5[1]], [0,0,0,(a_modadd_0_5[0]+delta_modadd_0_5[0])/2,1,0,1,0,a_modadd_0_5[0],1/2,1,0,0,a_modadd_0_5[0],1/2,1,1,0,a_modadd_0_5[0],1-(a_modadd_0_5[0]+delta_modadd_0_5[0]-2*a_modadd_0_5[0]*delta_modadd_0_5[0]),0,1,1,delta_modadd_0_5[0],1/2,1,0,1,delta_modadd_0_5[0],1/2,1,1,1,1/2,a_modadd_0_5[0]+delta_modadd_0_5[0]-2*a_modadd_0_5[0]*delta_modadd_0_5[0]]);
constraint w_modadd_0_5[1]=int(100*log2(phi_modadd_0_5[1]));
constraint table([key[122], modadd_0_5[2], pre_modadd_0_5[1], delta_modadd_0_5[2], phi_modadd_0_5[2]], [0,0,0,(a_modadd_0_5[1]+delta_modadd_0_5[1])/2,1,0,1,0,a_modadd_0_5[1],1/2,1,0,0,a_modadd_0_5[1],1/2,1,1,0,a_modadd_0_5[1],1-(a_modadd_0_5[1]+delta_modadd_0_5[1]-2*a_modadd_0_5[1]*delta_modadd_0_5[1]),0,1,1,delta_modadd_0_5[1],1/2,1,0,1,delta_modadd_0_5[1],1/2,1,1,1,1/2,a_modadd_0_5[1]+delta_modadd_0_5[1]-2*a_modadd_0_5[1]*delta_modadd_0_5[1]]);
constraint w_modadd_0_5[2]=int(100*log2(phi_modadd_0_5[2]));
constraint table([key[123], modadd_0_5[3], pre_modadd_0_5[2], delta_modadd_0_5[3], phi_modadd_0_5[3]], [0,0,0,(a_modadd_0_5[2]+delta_modadd_0_5[2])/2,1,0,1,0,a_modadd_0_5[2],1/2,1,0,0,a_modadd_0_5[2],1/2,1,1,0,a_modadd_0_5[2],1-(a_modadd_0_5[2]+delta_modadd_0_5[2]-2*a_modadd_0_5[2]*delta_modadd_0_5[2]),0,1,1,delta_modadd_0_5[2],1/2,1,0,1,delta_modadd_0_5[2],1/2,1,1,1,1/2,a_modadd_0_5[2]+delta_modadd_0_5[2]-2*a_modadd_0_5[2]*delta_modadd_0_5[2]]);
constraint w_modadd_0_5[3]=int(100*log2(phi_modadd_0_5[3]));
constraint table([key[124], modadd_0_5[4], pre_modadd_0_5[3], delta_modadd_0_5[4], phi_modadd_0_5[4]], [0,0,0,(a_modadd_0_5[3]+delta_modadd_0_5[3])/2,1,0,1,0,a_modadd_0_5[3],1/2,1,0,0,a_modadd_0_5[3],1/2,1,1,0,a_modadd_0_5[3],1-(a_modadd_0_5[3]+delta_modadd_0_5[3]-2*a_modadd_0_5[3]*delta_modadd_0_5[3]),0,1,1,delta_modadd_0_5[3],1/2,1,0,1,delta_modadd_0_5[3],1/2,1,1,1,1/2,a_modadd_0_5[3]+delta_modadd_0_5[3]-2*a_modadd_0_5[3]*delta_modadd_0_5[3]]);
constraint w_modadd_0_5[4]=int(100*log2(phi_modadd_0_5[4]));
constraint table([key[125], modadd_0_5[5], pre_modadd_0_5[4], delta_modadd_0_5[5], phi_modadd_0_5[5]], [0,0,0,(a_modadd_0_5[4]+delta_modadd_0_5[4])/2,1,0,1,0,a_modadd_0_5[4],1/2,1,0,0,a_modadd_0_5[4],1/2,1,1,0,a_modadd_0_5[4],1-(a_modadd_0_5[4]+delta_modadd_0_5[4]-2*a_modadd_0_5[4]*delta_modadd_0_5[4]),0,1,1,delta_modadd_0_5[4],1/2,1,0,1,delta_modadd_0_5[4],1/2,1,1,1,1/2,a_modadd_0_5[4]+delta_modadd_0_5[4]-2*a_modadd_0_5[4]*delta_modadd_0_5[4]]);
constraint w_modadd_0_5[5]=int(100*log2(phi_modadd_0_5[5]));
constraint table([key[126], modadd_0_5[6], pre_modadd_0_5[5], delta_modadd_0_5[6], phi_modadd_0_5[6]], [0,0,0,(a_modadd_0_5[5]+delta_modadd_0_5[5])/2,1,0,1,0,a_modadd_0_5[5],1/2,1,0,0,a_modadd_0_5[5],1/2,1,1,0,a_modadd_0_5[5],1-(a_modadd_0_5[5]+delta_modadd_0_5[5]-2*a_modadd_0_5[5]*delta_modadd_0_5[5]),0,1,1,delta_modadd_0_5[5],1/2,1,0,1,delta_modadd_0_5[5],1/2,1,1,1,1/2,a_modadd_0_5[5]+delta_modadd_0_5[5]-2*a_modadd_0_5[5]*delta_modadd_0_5[5]]);
constraint w_modadd_0_5[6]=int(100*log2(phi_modadd_0_5[6]));
constraint table([key[127], modadd_0_5[7], pre_modadd_0_5[6], delta_modadd_0_5[7], phi_modadd_0_5[7]], [0,0,0,(a_modadd_0_5[6]+delta_modadd_0_5[6])/2,1,0,1,0,a_modadd_0_5[6],1/2,1,0,0,a_modadd_0_5[6],1/2,1,1,0,a_modadd_0_5[6],1-(a_modadd_0_5[6]+delta_modadd_0_5[6]-2*a_modadd_0_5[6]*delta_modadd_0_5[6]),0,1,1,delta_modadd_0_5[6],1/2,1,0,1,delta_modadd_0_5[6],1/2,1,1,1,1/2,a_modadd_0_5[6]+delta_modadd_0_5[6]-2*a_modadd_0_5[6]*delta_modadd_0_5[6]]);
constraint w_modadd_0_5[7]=int(100*log2(phi_modadd_0_5[7]));
constraint p[2] = sum(w_modadd_0_5);
constraint pre_modadd_0_7[0] = (key[112] + modadd_0_7[0]) mod 2;
constraint a_modadd_0_7[0] = 0;
constraint pre_modadd_0_7[1] = (key[113] + modadd_0_7[1]) mod 2;
constraint a_modadd_0_7[1] = 1;
constraint pre_modadd_0_7[2] = (key[114] + modadd_0_7[2]) mod 2;
constraint a_modadd_0_7[2] = 1;
constraint pre_modadd_0_7[3] = (key[115] + modadd_0_7[3]) mod 2;
constraint a_modadd_0_7[3] = 0;
constraint pre_modadd_0_7[4] = (key[116] + modadd_0_7[4]) mod 2;
constraint a_modadd_0_7[4] = 1;
constraint pre_modadd_0_7[5] = (key[117] + modadd_0_7[5]) mod 2;
constraint a_modadd_0_7[5] = 1;
constraint pre_modadd_0_7[6] = (key[118] + modadd_0_7[6]) mod 2;
constraint a_modadd_0_7[6] = 0;
constraint pre_modadd_0_7[7] = (key[119] + modadd_0_7[7]) mod 2;
constraint a_modadd_0_7[7] = 1;
constraint phi_modadd_0_7[0] = 1;
constraint delta_modadd_0_7[0] = 0;
constraint w_modadd_0_7[0]=0;
constraint table([key[113], modadd_0_7[1], pre_modadd_0_7[0], delta_modadd_0_7[1], phi_modadd_0_7[1]], [0,0,0,(a_modadd_0_7[0]+delta_modadd_0_7[0])/2,1,0,1,0,a_modadd_0_7[0],1/2,1,0,0,a_modadd_0_7[0],1/2,1,1,0,a_modadd_0_7[0],1-(a_modadd_0_7[0]+delta_modadd_0_7[0]-2*a_modadd_0_7[0]*delta_modadd_0_7[0]),0,1,1,delta_modadd_0_7[0],1/2,1,0,1,delta_modadd_0_7[0],1/2,1,1,1,1/2,a_modadd_0_7[0]+delta_modadd_0_7[0]-2*a_modadd_0_7[0]*delta_modadd_0_7[0]]);
constraint w_modadd_0_7[1]=int(100*log2(phi_modadd_0_7[1]));
constraint table([key[114], modadd_0_7[2], pre_modadd_0_7[1], delta_modadd_0_7[2], phi_modadd_0_7[2]], [0,0,0,(a_modadd_0_7[1]+delta_modadd_0_7[1])/2,1,0,1,0,a_modadd_0_7[1],1/2,1,0,0,a_modadd_0_7[1],1/2,1,1,0,a_modadd_0_7[1],1-(a_modadd_0_7[1]+delta_modadd_0_7[1]-2*a_modadd_0_7[1]*delta_modadd_0_7[1]),0,1,1,delta_modadd_0_7[1],1/2,1,0,1,delta_modadd_0_7[1],1/2,1,1,1,1/2,a_modadd_0_7[1]+delta_modadd_0_7[1]-2*a_modadd_0_7[1]*delta_modadd_0_7[1]]);
constraint w_modadd_0_7[2]=int(100*log2(phi_modadd_0_7[2]));
constraint table([key[115], modadd_0_7[3], pre_modadd_0_7[2], delta_modadd_0_7[3], phi_modadd_0_7[3]], [0,0,0,(a_modadd_0_7[2]+delta_modadd_0_7[2])/2,1,0,1,0,a_modadd_0_7[2],1/2,1,0,0,a_modadd_0_7[2],1/2,1,1,0,a_modadd_0_7[2],1-(a_modadd_0_7[2]+delta_modadd_0_7[2]-2*a_modadd_0_7[2]*delta_modadd_0_7[2]),0,1,1,delta_modadd_0_7[2],1/2,1,0,1,delta_modadd_0_7[2],1/2,1,1,1,1/2,a_modadd_0_7[2]+delta_modadd_0_7[2]-2*a_modadd_0_7[2]*delta_modadd_0_7[2]]);
constraint w_modadd_0_7[3]=int(100*log2(phi_modadd_0_7[3]));
constraint table([key[116], modadd_0_7[4], pre_modadd_0_7[3], delta_modadd_0_7[4], phi_modadd_0_7[4]], [0,0,0,(a_modadd_0_7[3]+delta_modadd_0_7[3])/2,1,0,1,0,a_modadd_0_7[3],1/2,1,0,0,a_modadd_0_7[3],1/2,1,1,0,a_modadd_0_7[3],1-(a_modadd_0_7[3]+delta_modadd_0_7[3]-2*a_modadd_0_7[3]*delta_modadd_0_7[3]),0,1,1,delta_modadd_0_7[3],1/2,1,0,1,delta_modadd_0_7[3],1/2,1,1,1,1/2,a_modadd_0_7[3]+delta_modadd_0_7[3]-2*a_modadd_0_7[3]*delta_modadd_0_7[3]]);
constraint w_modadd_0_7[4]=int(100*log2(phi_modadd_0_7[4]));
constraint table([key[117], modadd_0_7[5], pre_modadd_0_7[4], delta_modadd_0_7[5], phi_modadd_0_7[5]], [0,0,0,(a_modadd_0_7[4]+delta_modadd_0_7[4])/2,1,0,1,0,a_modadd_0_7[4],1/2,1,0,0,a_modadd_0_7[4],1/2,1,1,0,a_modadd_0_7[4],1-(a_modadd_0_7[4]+delta_modadd_0_7[4]-2*a_modadd_0_7[4]*delta_modadd_0_7[4]),0,1,1,delta_modadd_0_7[4],1/2,1,0,1,delta_modadd_0_7[4],1/2,1,1,1,1/2,a_modadd_0_7[4]+delta_modadd_0_7[4]-2*a_modadd_0_7[4]*delta_modadd_0_7[4]]);
constraint w_modadd_0_7[5]=int(100*log2(phi_modadd_0_7[5]));
constraint table([key[118], modadd_0_7[6], pre_modadd_0_7[5], delta_modadd_0_7[6], phi_modadd_0_7[6]], [0,0,0,(a_modadd_0_7[5]+delta_modadd_0_7[5])/2,1,0,1,0,a_modadd_0_7[5],1/2,1,0,0,a_modadd_0_7[5],1/2,1,1,0,a_modadd_0_7[5],1-(a_modadd_0_7[5]+delta_modadd_0_7[5]-2*a_modadd_0_7[5]*delta_modadd_0_7[5]),0,1,1,delta_modadd_0_7[5],1/2,1,0,1,delta_modadd_0_7[5],1/2,1,1,1,1/2,a_modadd_0_7[5]+delta_modadd_0_7[5]-2*a_modadd_0_7[5]*delta_modadd_0_7[5]]);
constraint w_modadd_0_7[6]=int(100*log2(phi_modadd_0_7[6]));
constraint table([key[119], modadd_0_7[7], pre_modadd_0_7[6], delta_modadd_0_7[7], phi_modadd_0_7[7]], [0,0,0,(a_modadd_0_7[6]+delta_modadd_0_7[6])/2,1,0,1,0,a_modadd_0_7[6],1/2,1,0,0,a_modadd_0_7[6],1/2,1,1,0,a_modadd_0_7[6],1-(a_modadd_0_7[6]+delta_modadd_0_7[6]-2*a_modadd_0_7[6]*delta_modadd_0_7[6]),0,1,1,delta_modadd_0_7[6],1/2,1,0,1,delta_modadd_0_7[6],1/2,1,1,1,1/2,a_modadd_0_7[6]+delta_modadd_0_7[6]-2*a_modadd_0_7[6]*delta_modadd_0_7[6]]);
constraint w_modadd_0_7[7]=int(100*log2(phi_modadd_0_7[7]));
constraint p[3] = sum(w_modadd_0_7);
constraint pre_modadd_0_9[0] = (key[104] + modadd_0_9[0]) mod 2;
constraint a_modadd_0_9[0] = 0;
constraint pre_modadd_0_9[1] = (key[105] + modadd_0_9[1]) mod 2;
constraint a_modadd_0_9[1] = 0;
constraint pre_modadd_0_9[2] = (key[106] + modadd_0_9[2]) mod 2;
constraint a_modadd_0_9[2] = 1;
constraint pre_modadd_0_9[3] = (key[107] + modadd_0_9[3]) mod 2;
constraint a_modadd_0_9[3] = 1;
constraint pre_modadd_0_9[4] = (key[108] + modadd_0_9[4]) mod 2;
constraint a_modadd_0_9[4] = 0;
constraint pre_modadd_0_9[5] = (key[109] + modadd_0_9[5]) mod 2;
constraint a_modadd_0_9[5] = 1;
constraint pre_modadd_0_9[6] = (key[110] + modadd_0_9[6]) mod 2;
constraint a_modadd_0_9[6] = 1;
constraint pre_modadd_0_9[7] = (key[111] + modadd_0_9[7]) mod 2;
constraint a_modadd_0_9[7] = 0;
constraint phi_modadd_0_9[0] = 1;
constraint delta_modadd_0_9[0] = 0;
constraint w_modadd_0_9[0]=0;
constraint table([key[105], modadd_0_9[1], pre_modadd_0_9[0], delta_modadd_0_9[1], phi_modadd_0_9[1]], [0,0,0,(a_modadd_0_9[0]+delta_modadd_0_9[0])/2,1,0,1,0,a_modadd_0_9[0],1/2,1,0,0,a_modadd_0_9[0],1/2,1,1,0,a_modadd_0_9[0],1-(a_modadd_0_9[0]+delta_modadd_0_9[0]-2*a_modadd_0_9[0]*delta_modadd_0_9[0]),0,1,1,delta_modadd_0_9[0],1/2,1,0,1,delta_modadd_0_9[0],1/2,1,1,1,1/2,a_modadd_0_9[0]+delta_modadd_0_9[0]-2*a_modadd_0_9[0]*delta_modadd_0_9[0]]);
constraint w_modadd_0_9[1]=int(100*log2(phi_modadd_0_9[1]));
constraint table([key[106], modadd_0_9[2], pre_modadd_0_9[1], delta_modadd_0_9[2], phi_modadd_0_9[2]], [0,0,0,(a_modadd_0_9[1]+delta_modadd_0_9[1])/2,1,0,1,0,a_modadd_0_9[1],1/2,1,0,0,a_modadd_0_9[1],1/2,1,1,0,a_modadd_0_9[1],1-(a_modadd_0_9[1]+delta_modadd_0_9[1]-2*a_modadd_0_9[1]*delta_modadd_0_9[1]),0,1,1,delta_modadd_0_9[1],1/2,1,0,1,delta_modadd_0_9[1],1/2,1,1,1,1/2,a_modadd_0_9[1]+delta_modadd_0_9[1]-2*a_modadd_0_9[1]*delta_modadd_0_9[1]]);
constraint w_modadd_0_9[2]=int(100*log2(phi_modadd_0_9[2]));
constraint table([key[107], modadd_0_9[3], pre_modadd_0_9[2], delta_modadd_0_9[3], phi_modadd_0_9[3]], [0,0,0,(a_modadd_0_9[2]+delta_modadd_0_9[2])/2,1,0,1,0,a_modadd_0_9[2],1/2,1,0,0,a_modadd_0_9[2],1/2,1,1,0,a_modadd_0_9[2],1-(a_modadd_0_9[2]+delta_modadd_0_9[2]-2*a_modadd_0_9[2]*delta_modadd_0_9[2]),0,1,1,delta_modadd_0_9[2],1/2,1,0,1,delta_modadd_0_9[2],1/2,1,1,1,1/2,a_modadd_0_9[2]+delta_modadd_0_9[2]-2*a_modadd_0_9[2]*delta_modadd_0_9[2]]);
constraint w_modadd_0_9[3]=int(100*log2(phi_modadd_0_9[3]));
constraint table([key[108], modadd_0_9[4], pre_modadd_0_9[3], delta_modadd_0_9[4], phi_modadd_0_9[4]], [0,0,0,(a_modadd_0_9[3]+delta_modadd_0_9[3])/2,1,0,1,0,a_modadd_0_9[3],1/2,1,0,0,a_modadd_0_9[3],1/2,1,1,0,a_modadd_0_9[3],1-(a_modadd_0_9[3]+delta_modadd_0_9[3]-2*a_modadd_0_9[3]*delta_modadd_0_9[3]),0,1,1,delta_modadd_0_9[3],1/2,1,0,1,delta_modadd_0_9[3],1/2,1,1,1,1/2,a_modadd_0_9[3]+delta_modadd_0_9[3]-2*a_modadd_0_9[3]*delta_modadd_0_9[3]]);
constraint w_modadd_0_9[4]=int(100*log2(phi_modadd_0_9[4]));
constraint table([key[109], modadd_0_9[5], pre_modadd_0_9[4], delta_modadd_0_9[5], phi_modadd_0_9[5]], [0,0,0,(a_modadd_0_9[4]+delta_modadd_0_9[4])/2,1,0,1,0,a_modadd_0_9[4],1/2,1,0,0,a_modadd_0_9[4],1/2,1,1,0,a_modadd_0_9[4],1-(a_modadd_0_9[4]+delta_modadd_0_9[4]-2*a_modadd_0_9[4]*delta_modadd_0_9[4]),0,1,1,delta_modadd_0_9[4],1/2,1,0,1,delta_modadd_0_9[4],1/2,1,1,1,1/2,a_modadd_0_9[4]+delta_modadd_0_9[4]-2*a_modadd_0_9[4]*delta_modadd_0_9[4]]);
constraint w_modadd_0_9[5]=int(100*log2(phi_modadd_0_9[5]));
constraint table([key[110], modadd_0_9[6], pre_modadd_0_9[5], delta_modadd_0_9[6], phi_modadd_0_9[6]], [0,0,0,(a_modadd_0_9[5]+delta_modadd_0_9[5])/2,1,0,1,0,a_modadd_0_9[5],1/2,1,0,0,a_modadd_0_9[5],1/2,1,1,0,a_modadd_0_9[5],1-(a_modadd_0_9[5]+delta_modadd_0_9[5]-2*a_modadd_0_9[5]*delta_modadd_0_9[5]),0,1,1,delta_modadd_0_9[5],1/2,1,0,1,delta_modadd_0_9[5],1/2,1,1,1,1/2,a_modadd_0_9[5]+delta_modadd_0_9[5]-2*a_modadd_0_9[5]*delta_modadd_0_9[5]]);
constraint w_modadd_0_9[6]=int(100*log2(phi_modadd_0_9[6]));
constraint table([key[111], modadd_0_9[7], pre_modadd_0_9[6], delta_modadd_0_9[7], phi_modadd_0_9[7]], [0,0,0,(a_modadd_0_9[6]+delta_modadd_0_9[6])/2,1,0,1,0,a_modadd_0_9[6],1/2,1,0,0,a_modadd_0_9[6],1/2,1,1,0,a_modadd_0_9[6],1-(a_modadd_0_9[6]+delta_modadd_0_9[6]-2*a_modadd_0_9[6]*delta_modadd_0_9[6]),0,1,1,delta_modadd_0_9[6],1/2,1,0,1,delta_modadd_0_9[6],1/2,1,1,1,1/2,a_modadd_0_9[6]+delta_modadd_0_9[6]-2*a_modadd_0_9[6]*delta_modadd_0_9[6]]);
constraint w_modadd_0_9[7]=int(100*log2(phi_modadd_0_9[7]));
constraint p[4] = sum(w_modadd_0_9);
constraint pre_modadd_0_11[0] = (key[96] + modadd_0_11[0]) mod 2;
constraint a_modadd_0_11[0] = 0;
constraint pre_modadd_0_11[1] = (key[97] + modadd_0_11[1]) mod 2;
constraint a_modadd_0_11[1] = 0;
constraint pre_modadd_0_11[2] = (key[98] + modadd_0_11[2]) mod 2;
constraint a_modadd_0_11[2] = 0;
constraint pre_modadd_0_11[3] = (key[99] + modadd_0_11[3]) mod 2;
constraint a_modadd_0_11[3] = 1;
constraint pre_modadd_0_11[4] = (key[100] + modadd_0_11[4]) mod 2;
constraint a_modadd_0_11[4] = 1;
constraint pre_modadd_0_11[5] = (key[101] + modadd_0_11[5]) mod 2;
constraint a_modadd_0_11[5] = 0;
constraint pre_modadd_0_11[6] = (key[102] + modadd_0_11[6]) mod 2;
constraint a_modadd_0_11[6] = 1;
constraint pre_modadd_0_11[7] = (key[103] + modadd_0_11[7]) mod 2;
constraint a_modadd_0_11[7] = 1;
constraint phi_modadd_0_11[0] = 1;
constraint delta_modadd_0_11[0] = 0;
constraint w_modadd_0_11[0]=0;
constraint table([key[97], modadd_0_11[1], pre_modadd_0_11[0], delta_modadd_0_11[1], phi_modadd_0_11[1]], [0,0,0,(a_modadd_0_11[0]+delta_modadd_0_11[0])/2,1,0,1,0,a_modadd_0_11[0],1/2,1,0,0,a_modadd_0_11[0],1/2,1,1,0,a_modadd_0_11[0],1-(a_modadd_0_11[0]+delta_modadd_0_11[0]-2*a_modadd_0_11[0]*delta_modadd_0_11[0]),0,1,1,delta_modadd_0_11[0],1/2,1,0,1,delta_modadd_0_11[0],1/2,1,1,1,1/2,a_modadd_0_11[0]+delta_modadd_0_11[0]-2*a_modadd_0_11[0]*delta_modadd_0_11[0]]);
constraint w_modadd_0_11[1]=int(100*log2(phi_modadd_0_11[1]));
constraint table([key[98], modadd_0_11[2], pre_modadd_0_11[1], delta_modadd_0_11[2], phi_modadd_0_11[2]], [0,0,0,(a_modadd_0_11[1]+delta_modadd_0_11[1])/2,1,0,1,0,a_modadd_0_11[1],1/2,1,0,0,a_modadd_0_11[1],1/2,1,1,0,a_modadd_0_11[1],1-(a_modadd_0_11[1]+delta_modadd_0_11[1]-2*a_modadd_0_11[1]*delta_modadd_0_11[1]),0,1,1,delta_modadd_0_11[1],1/2,1,0,1,delta_modadd_0_11[1],1/2,1,1,1,1/2,a_modadd_0_11[1]+delta_modadd_0_11[1]-2*a_modadd_0_11[1]*delta_modadd_0_11[1]]);
constraint w_modadd_0_11[2]=int(100*log2(phi_modadd_0_11[2]));
constraint table([key[99], modadd_0_11[3], pre_modadd_0_11[2], delta_modadd_0_11[3], phi_modadd_0_11[3]], [0,0,0,(a_modadd_0_11[2]+delta_modadd_0_11[2])/2,1,0,1,0,a_modadd_0_11[2],1/2,1,0,0,a_modadd_0_11[2],1/2,1,1,0,a_modadd_0_11[2],1-(a_modadd_0_11[2]+delta_modadd_0_11[2]-2*a_modadd_0_11[2]*delta_modadd_0_11[2]),0,1,1,delta_modadd_0_11[2],1/2,1,0,1,delta_modadd_0_11[2],1/2,1,1,1,1/2,a_modadd_0_11[2]+delta_modadd_0_11[2]-2*a_modadd_0_11[2]*delta_modadd_0_11[2]]);
constraint w_modadd_0_11[3]=int(100*log2(phi_modadd_0_11[3]));
constraint table([key[100], modadd_0_11[4], pre_modadd_0_11[3], delta_modadd_0_11[4], phi_modadd_0_11[4]], [0,0,0,(a_modadd_0_11[3]+delta_modadd_0_11[3])/2,1,0,1,0,a_modadd_0_11[3],1/2,1,0,0,a_modadd_0_11[3],1/2,1,1,0,a_modadd_0_11[3],1-(a_modadd_0_11[3]+delta_modadd_0_11[3]-2*a_modadd_0_11[3]*delta_modadd_0_11[3]),0,1,1,delta_modadd_0_11[3],1/2,1,0,1,delta_modadd_0_11[3],1/2,1,1,1,1/2,a_modadd_0_11[3]+delta_modadd_0_11[3]-2*a_modadd_0_11[3]*delta_modadd_0_11[3]]);
constraint w_modadd_0_11[4]=int(100*log2(phi_modadd_0_11[4]));
constraint table([key[101], modadd_0_11[5], pre_modadd_0_11[4], delta_modadd_0_11[5], phi_modadd_0_11[5]], [0,0,0,(a_modadd_0_11[4]+delta_modadd_0_11[4])/2,1,0,1,0,a_modadd_0_11[4],1/2,1,0,0,a_modadd_0_11[4],1/2,1,1,0,a_modadd_0_11[4],1-(a_modadd_0_11[4]+delta_modadd_0_11[4]-2*a_modadd_0_11[4]*delta_modadd_0_11[4]),0,1,1,delta_modadd_0_11[4],1/2,1,0,1,delta_modadd_0_11[4],1/2,1,1,1,1/2,a_modadd_0_11[4]+delta_modadd_0_11[4]-2*a_modadd_0_11[4]*delta_modadd_0_11[4]]);
constraint w_modadd_0_11[5]=int(100*log2(phi_modadd_0_11[5]));
constraint table([key[102], modadd_0_11[6], pre_modadd_0_11[5], delta_modadd_0_11[6], phi_modadd_0_11[6]], [0,0,0,(a_modadd_0_11[5]+delta_modadd_0_11[5])/2,1,0,1,0,a_modadd_0_11[5],1/2,1,0,0,a_modadd_0_11[5],1/2,1,1,0,a_modadd_0_11[5],1-(a_modadd_0_11[5]+delta_modadd_0_11[5]-2*a_modadd_0_11[5]*delta_modadd_0_11[5]),0,1,1,delta_modadd_0_11[5],1/2,1,0,1,delta_modadd_0_11[5],1/2,1,1,1,1/2,a_modadd_0_11[5]+delta_modadd_0_11[5]-2*a_modadd_0_11[5]*delta_modadd_0_11[5]]);
constraint w_modadd_0_11[6]=int(100*log2(phi_modadd_0_11[6]));
constraint table([key[103], modadd_0_11[7], pre_modadd_0_11[6], delta_modadd_0_11[7], phi_modadd_0_11[7]], [0,0,0,(a_modadd_0_11[6]+delta_modadd_0_11[6])/2,1,0,1,0,a_modadd_0_11[6],1/2,1,0,0,a_modadd_0_11[6],1/2,1,1,0,a_modadd_0_11[6],1-(a_modadd_0_11[6]+delta_modadd_0_11[6]-2*a_modadd_0_11[6]*delta_modadd_0_11[6]),0,1,1,delta_modadd_0_11[6],1/2,1,0,1,delta_modadd_0_11[6],1/2,1,1,1,1/2,a_modadd_0_11[6]+delta_modadd_0_11[6]-2*a_modadd_0_11[6]*delta_modadd_0_11[6]]);
constraint w_modadd_0_11[7]=int(100*log2(phi_modadd_0_11[7]));
constraint p[5] = sum(w_modadd_0_11);
constraint rot_0_12[0] = modadd_0_2[3];
constraint rot_0_12[1] = modadd_0_2[4];
constraint rot_0_12[2] = modadd_0_2[5];
constraint rot_0_12[3] = modadd_0_2[6];
constraint rot_0_12[4] = modadd_0_2[7];
constraint rot_0_12[5] = modadd_0_2[0];
constraint rot_0_12[6] = modadd_0_2[1];
constraint rot_0_12[7] = modadd_0_2[2];
constraint rot_0_13[0] = modadd_0_2[4];
constraint rot_0_13[1] = modadd_0_2[5];
constraint rot_0_13[2] = modadd_0_2[6];
constraint rot_0_13[3] = modadd_0_2[7];
constraint rot_0_13[4] = modadd_0_2[0];
constraint rot_0_13[5] = modadd_0_2[1];
constraint rot_0_13[6] = modadd_0_2[2];
constraint rot_0_13[7] = modadd_0_2[3];
constraint rot_0_14[0] = modadd_0_2[6];
constraint rot_0_14[1] = modadd_0_2[7];
constraint rot_0_14[2] = modadd_0_2[0];
constraint rot_0_14[3] = modadd_0_2[1];
constraint rot_0_14[4] = modadd_0_2[2];
constraint rot_0_14[5] = modadd_0_2[3];
constraint rot_0_14[6] = modadd_0_2[4];
constraint rot_0_14[7] = modadd_0_2[5];
constraint xor_0_15[0] = (rot_0_12[0] + rot_0_13[0]) mod 2;
constraint xor_0_15[1] = (rot_0_12[1] + rot_0_13[1]) mod 2;
constraint xor_0_15[2] = (rot_0_12[2] + rot_0_13[2]) mod 2;
constraint xor_0_15[3] = (rot_0_12[3] + rot_0_13[3]) mod 2;
constraint xor_0_15[4] = (rot_0_12[4] + rot_0_13[4]) mod 2;
constraint xor_0_15[5] = (rot_0_12[5] + rot_0_13[5]) mod 2;
constraint xor_0_15[6] = (rot_0_12[6] + rot_0_13[6]) mod 2;
constraint xor_0_15[7] = (rot_0_12[7] + rot_0_13[7]) mod 2;
constraint xor_0_16[0] = (xor_0_15[0] + rot_0_14[0]) mod 2;
constraint xor_0_16[1] = (xor_0_15[1] + rot_0_14[1]) mod 2;
constraint xor_0_16[2] = (xor_0_15[2] + rot_0_14[2]) mod 2;
constraint xor_0_16[3] = (xor_0_15[3] + rot_0_14[3]) mod 2;
constraint xor_0_16[4] = (xor_0_15[4] + rot_0_14[4]) mod 2;
constraint xor_0_16[5] = (xor_0_15[5] + rot_0_14[5]) mod 2;
constraint xor_0_16[6] = (xor_0_15[6] + rot_0_14[6]) mod 2;
constraint xor_0_16[7] = (xor_0_15[7] + rot_0_14[7]) mod 2;
constraint xor_0_17[0] = (xor_0_16[0] + modadd_0_9[0]) mod 2;
constraint xor_0_17[1] = (xor_0_16[1] + modadd_0_9[1]) mod 2;
constraint xor_0_17[2] = (xor_0_16[2] + modadd_0_9[2]) mod 2;
constraint xor_0_17[3] = (xor_0_16[3] + modadd_0_9[3]) mod 2;
constraint xor_0_17[4] = (xor_0_16[4] + modadd_0_9[4]) mod 2;
constraint xor_0_17[5] = (xor_0_16[5] + modadd_0_9[5]) mod 2;
constraint xor_0_17[6] = (xor_0_16[6] + modadd_0_9[6]) mod 2;
constraint xor_0_17[7] = (xor_0_16[7] + modadd_0_9[7]) mod 2;
constraint pre_modadd_0_18_0[0] = plaintext[16];
constraint pre_modadd_0_18_0[1] = plaintext[17];
constraint pre_modadd_0_18_0[2] = plaintext[18];
constraint pre_modadd_0_18_0[3] = plaintext[19];
constraint pre_modadd_0_18_0[4] = plaintext[20];
constraint pre_modadd_0_18_0[5] = plaintext[21];
constraint pre_modadd_0_18_0[6] = plaintext[22];
constraint pre_modadd_0_18_0[7] = plaintext[23];
constraint pre_modadd_0_18_1[0] = xor_0_17[0];
constraint pre_modadd_0_18_1[1] = xor_0_17[1];
constraint pre_modadd_0_18_1[2] = xor_0_17[2];
constraint pre_modadd_0_18_1[3] = xor_0_17[3];
constraint pre_modadd_0_18_1[4] = xor_0_17[4];
constraint pre_modadd_0_18_1[5] = xor_0_17[5];
constraint pre_modadd_0_18_1[6] = xor_0_17[6];
constraint pre_modadd_0_18_1[7] = xor_0_17[7];
constraint forall(j in 0..7)(if eq_modadd_0_18[j] = 1 then (sum([pre_modadd_0_18_1[j], pre_modadd_0_18_0[j], modadd_0_18[j]]) mod 2) = Shi_pre_modadd_0_18_0[j] else true endif) /\ p[6] = 800-100 * sum(eq_modadd_0_18);
constraint rot_0_19[0] = xor_0_1[1];
constraint rot_0_19[1] = xor_0_1[2];
constraint rot_0_19[2] = xor_0_1[3];
constraint rot_0_19[3] = xor_0_1[4];
constraint rot_0_19[4] = xor_0_1[5];
constraint rot_0_19[5] = xor_0_1[6];
constraint rot_0_19[6] = xor_0_1[7];
constraint rot_0_19[7] = xor_0_1[0];
constraint rot_0_20[0] = xor_0_1[2];
constraint rot_0_20[1] = xor_0_1[3];
constraint rot_0_20[2] = xor_0_1[4];
constraint rot_0_20[3] = xor_0_1[5];
constraint rot_0_20[4] = xor_0_1[6];
constraint rot_0_20[5] = xor_0_1[7];
constraint rot_0_20[6] = xor_0_1[0];
constraint rot_0_20[7] = xor_0_1[1];
constraint rot_0_21[0] = xor_0_1[7];
constraint rot_0_21[1] = xor_0_1[0];
constraint rot_0_21[2] = xor_0_1[1];
constraint rot_0_21[3] = xor_0_1[2];
constraint rot_0_21[4] = xor_0_1[3];
constraint rot_0_21[5] = xor_0_1[4];
constraint rot_0_21[6] = xor_0_1[5];
constraint rot_0_21[7] = xor_0_1[6];
constraint xor_0_22[0] = (rot_0_19[0] + rot_0_20[0]) mod 2;
constraint xor_0_22[1] = (rot_0_19[1] + rot_0_20[1]) mod 2;
constraint xor_0_22[2] = (rot_0_19[2] + rot_0_20[2]) mod 2;
constraint xor_0_22[3] = (rot_0_19[3] + rot_0_20[3]) mod 2;
constraint xor_0_22[4] = (rot_0_19[4] + rot_0_20[4]) mod 2;
constraint xor_0_22[5] = (rot_0_19[5] + rot_0_20[5]) mod 2;
constraint xor_0_22[6] = (rot_0_19[6] + rot_0_20[6]) mod 2;
constraint xor_0_22[7] = (rot_0_19[7] + rot_0_20[7]) mod 2;
constraint xor_0_23[0] = (xor_0_22[0] + rot_0_21[0]) mod 2;
constraint xor_0_23[1] = (xor_0_22[1] + rot_0_21[1]) mod 2;
constraint xor_0_23[2] = (xor_0_22[2] + rot_0_21[2]) mod 2;
constraint xor_0_23[3] = (xor_0_22[3] + rot_0_21[3]) mod 2;
constraint xor_0_23[4] = (xor_0_22[4] + rot_0_21[4]) mod 2;
constraint xor_0_23[5] = (xor_0_22[5] + rot_0_21[5]) mod 2;
constraint xor_0_23[6] = (xor_0_22[6] + rot_0_21[6]) mod 2;
constraint xor_0_23[7] = (xor_0_22[7] + rot_0_21[7]) mod 2;
constraint pre_modadd_0_24_0[0] = xor_0_23[0];
constraint pre_modadd_0_24_0[1] = xor_0_23[1];
constraint pre_modadd_0_24_0[2] = xor_0_23[2];
constraint pre_modadd_0_24_0[3] = xor_0_23[3];
constraint pre_modadd_0_24_0[4] = xor_0_23[4];
constraint pre_modadd_0_24_0[5] = xor_0_23[5];
constraint pre_modadd_0_24_0[6] = xor_0_23[6];
constraint pre_modadd_0_24_0[7] = xor_0_23[7];
constraint pre_modadd_0_24_1[0] = modadd_0_7[0];
constraint pre_modadd_0_24_1[1] = modadd_0_7[1];
constraint pre_modadd_0_24_1[2] = modadd_0_7[2];
constraint pre_modadd_0_24_1[3] = modadd_0_7[3];
constraint pre_modadd_0_24_1[4] = modadd_0_7[4];
constraint pre_modadd_0_24_1[5] = modadd_0_7[5];
constraint pre_modadd_0_24_1[6] = modadd_0_7[6];
constraint pre_modadd_0_24_1[7] = modadd_0_7[7];
constraint forall(j in 0..7)(if eq_modadd_0_24[j] = 1 then (sum([pre_modadd_0_24_1[j], pre_modadd_0_24_0[j], modadd_0_24[j]]) mod 2) = Shi_pre_modadd_0_24_0[j] else true endif) /\ p[7] = 800-100 * sum(eq_modadd_0_24);
constraint xor_0_25[0] = (plaintext[32] + modadd_0_24[0]) mod 2;
constraint xor_0_25[1] = (plaintext[33] + modadd_0_24[1]) mod 2;
constraint xor_0_25[2] = (plaintext[34] + modadd_0_24[2]) mod 2;
constraint xor_0_25[3] = (plaintext[35] + modadd_0_24[3]) mod 2;
constraint xor_0_25[4] = (plaintext[36] + modadd_0_24[4]) mod 2;
constraint xor_0_25[5] = (plaintext[37] + modadd_0_24[5]) mod 2;
constraint xor_0_25[6] = (plaintext[38] + modadd_0_24[6]) mod 2;
constraint xor_0_25[7] = (plaintext[39] + modadd_0_24[7]) mod 2;
constraint rot_0_26[0] = modadd_0_0[3];
constraint rot_0_26[1] = modadd_0_0[4];
constraint rot_0_26[2] = modadd_0_0[5];
constraint rot_0_26[3] = modadd_0_0[6];
constraint rot_0_26[4] = modadd_0_0[7];
constraint rot_0_26[5] = modadd_0_0[0];
constraint rot_0_26[6] = modadd_0_0[1];
constraint rot_0_26[7] = modadd_0_0[2];
constraint rot_0_27[0] = modadd_0_0[4];
constraint rot_0_27[1] = modadd_0_0[5];
constraint rot_0_27[2] = modadd_0_0[6];
constraint rot_0_27[3] = modadd_0_0[7];
constraint rot_0_27[4] = modadd_0_0[0];
constraint rot_0_27[5] = modadd_0_0[1];
constraint rot_0_27[6] = modadd_0_0[2];
constraint rot_0_27[7] = modadd_0_0[3];
constraint rot_0_28[0] = modadd_0_0[6];
constraint rot_0_28[1] = modadd_0_0[7];
constraint rot_0_28[2] = modadd_0_0[0];
constraint rot_0_28[3] = modadd_0_0[1];
constraint rot_0_28[4] = modadd_0_0[2];
constraint rot_0_28[5] = modadd_0_0[3];
constraint rot_0_28[6] = modadd_0_0[4];
constraint rot_0_28[7] = modadd_0_0[5];
constraint xor_0_29[0] = (rot_0_26[0] + rot_0_27[0]) mod 2;
constraint xor_0_29[1] = (rot_0_26[1] + rot_0_27[1]) mod 2;
constraint xor_0_29[2] = (rot_0_26[2] + rot_0_27[2]) mod 2;
constraint xor_0_29[3] = (rot_0_26[3] + rot_0_27[3]) mod 2;
constraint xor_0_29[4] = (rot_0_26[4] + rot_0_27[4]) mod 2;
constraint xor_0_29[5] = (rot_0_26[5] + rot_0_27[5]) mod 2;
constraint xor_0_29[6] = (rot_0_26[6] + rot_0_27[6]) mod 2;
constraint xor_0_29[7] = (rot_0_26[7] + rot_0_27[7]) mod 2;
constraint xor_0_30[0] = (xor_0_29[0] + rot_0_28[0]) mod 2;
constraint xor_0_30[1] = (xor_0_29[1] + rot_0_28[1]) mod 2;
constraint xor_0_30[2] = (xor_0_29[2] + rot_0_28[2]) mod 2;
constraint xor_0_30[3] = (xor_0_29[3] + rot_0_28[3]) mod 2;
constraint xor_0_30[4] = (xor_0_29[4] + rot_0_28[4]) mod 2;
constraint xor_0_30[5] = (xor_0_29[5] + rot_0_28[5]) mod 2;
constraint xor_0_30[6] = (xor_0_29[6] + rot_0_28[6]) mod 2;
constraint xor_0_30[7] = (xor_0_29[7] + rot_0_28[7]) mod 2;
constraint xor_0_31[0] = (xor_0_30[0] + modadd_0_5[0]) mod 2;
constraint xor_0_31[1] = (xor_0_30[1] + modadd_0_5[1]) mod 2;
constraint xor_0_31[2] = (xor_0_30[2] + modadd_0_5[2]) mod 2;
constraint xor_0_31[3] = (xor_0_30[3] + modadd_0_5[3]) mod 2;
constraint xor_0_31[4] = (xor_0_30[4] + modadd_0_5[4]) mod 2;
constraint xor_0_31[5] = (xor_0_30[5] + modadd_0_5[5]) mod 2;
constraint xor_0_31[6] = (xor_0_30[6] + modadd_0_5[6]) mod 2;
constraint xor_0_31[7] = (xor_0_30[7] + modadd_0_5[7]) mod 2;
constraint pre_modadd_0_32_0[0] = plaintext[48];
constraint pre_modadd_0_32_0[1] = plaintext[49];
constraint pre_modadd_0_32_0[2] = plaintext[50];
constraint pre_modadd_0_32_0[3] = plaintext[51];
constraint pre_modadd_0_32_0[4] = plaintext[52];
constraint pre_modadd_0_32_0[5] = plaintext[53];
constraint pre_modadd_0_32_0[6] = plaintext[54];
constraint pre_modadd_0_32_0[7] = plaintext[55];
constraint pre_modadd_0_32_1[0] = xor_0_31[0];
constraint pre_modadd_0_32_1[1] = xor_0_31[1];
constraint pre_modadd_0_32_1[2] = xor_0_31[2];
constraint pre_modadd_0_32_1[3] = xor_0_31[3];
constraint pre_modadd_0_32_1[4] = xor_0_31[4];
constraint pre_modadd_0_32_1[5] = xor_0_31[5];
constraint pre_modadd_0_32_1[6] = xor_0_31[6];
constraint pre_modadd_0_32_1[7] = xor_0_31[7];
constraint forall(j in 0..7)(if eq_modadd_0_32[j] = 1 then (sum([pre_modadd_0_32_1[j], pre_modadd_0_32_0[j], modadd_0_32[j]]) mod 2) = Shi_pre_modadd_0_32_0[j] else true endif) /\ p[8] = 800-100 * sum(eq_modadd_0_32);
constraint rot_0_33[0] = xor_0_3[1];
constraint rot_0_33[1] = xor_0_3[2];
constraint rot_0_33[2] = xor_0_3[3];
constraint rot_0_33[3] = xor_0_3[4];
constraint rot_0_33[4] = xor_0_3[5];
constraint rot_0_33[5] = xor_0_3[6];
constraint rot_0_33[6] = xor_0_3[7];
constraint rot_0_33[7] = xor_0_3[0];
constraint rot_0_34[0] = xor_0_3[2];
constraint rot_0_34[1] = xor_0_3[3];
constraint rot_0_34[2] = xor_0_3[4];
constraint rot_0_34[3] = xor_0_3[5];
constraint rot_0_34[4] = xor_0_3[6];
constraint rot_0_34[5] = xor_0_3[7];
constraint rot_0_34[6] = xor_0_3[0];
constraint rot_0_34[7] = xor_0_3[1];
constraint rot_0_35[0] = xor_0_3[7];
constraint rot_0_35[1] = xor_0_3[0];
constraint rot_0_35[2] = xor_0_3[1];
constraint rot_0_35[3] = xor_0_3[2];
constraint rot_0_35[4] = xor_0_3[3];
constraint rot_0_35[5] = xor_0_3[4];
constraint rot_0_35[6] = xor_0_3[5];
constraint rot_0_35[7] = xor_0_3[6];
constraint xor_0_36[0] = (rot_0_33[0] + rot_0_34[0]) mod 2;
constraint xor_0_36[1] = (rot_0_33[1] + rot_0_34[1]) mod 2;
constraint xor_0_36[2] = (rot_0_33[2] + rot_0_34[2]) mod 2;
constraint xor_0_36[3] = (rot_0_33[3] + rot_0_34[3]) mod 2;
constraint xor_0_36[4] = (rot_0_33[4] + rot_0_34[4]) mod 2;
constraint xor_0_36[5] = (rot_0_33[5] + rot_0_34[5]) mod 2;
constraint xor_0_36[6] = (rot_0_33[6] + rot_0_34[6]) mod 2;
constraint xor_0_36[7] = (rot_0_33[7] + rot_0_34[7]) mod 2;
constraint xor_0_37[0] = (xor_0_36[0] + rot_0_35[0]) mod 2;
constraint xor_0_37[1] = (xor_0_36[1] + rot_0_35[1]) mod 2;
constraint xor_0_37[2] = (xor_0_36[2] + rot_0_35[2]) mod 2;
constraint xor_0_37[3] = (xor_0_36[3] + rot_0_35[3]) mod 2;
constraint xor_0_37[4] = (xor_0_36[4] + rot_0_35[4]) mod 2;
constraint xor_0_37[5] = (xor_0_36[5] + rot_0_35[5]) mod 2;
constraint xor_0_37[6] = (xor_0_36[6] + rot_0_35[6]) mod 2;
constraint xor_0_37[7] = (xor_0_36[7] + rot_0_35[7]) mod 2;
constraint pre_modadd_0_38_0[0] = xor_0_37[0];
constraint pre_modadd_0_38_0[1] = xor_0_37[1];
constraint pre_modadd_0_38_0[2] = xor_0_37[2];
constraint pre_modadd_0_38_0[3] = xor_0_37[3];
constraint pre_modadd_0_38_0[4] = xor_0_37[4];
constraint pre_modadd_0_38_0[5] = xor_0_37[5];
constraint pre_modadd_0_38_0[6] = xor_0_37[6];
constraint pre_modadd_0_38_0[7] = xor_0_37[7];
constraint pre_modadd_0_38_1[0] = modadd_0_11[0];
constraint pre_modadd_0_38_1[1] = modadd_0_11[1];
constraint pre_modadd_0_38_1[2] = modadd_0_11[2];
constraint pre_modadd_0_38_1[3] = modadd_0_11[3];
constraint pre_modadd_0_38_1[4] = modadd_0_11[4];
constraint pre_modadd_0_38_1[5] = modadd_0_11[5];
constraint pre_modadd_0_38_1[6] = modadd_0_11[6];
constraint pre_modadd_0_38_1[7] = modadd_0_11[7];
constraint forall(j in 0..7)(if eq_modadd_0_38[j] = 1 then (sum([pre_modadd_0_38_1[j], pre_modadd_0_38_0[j], modadd_0_38[j]]) mod 2) = Shi_pre_modadd_0_38_0[j] else true endif) /\ p[9] = 800-100 * sum(eq_modadd_0_38);
constraint xor_0_39[0] = (plaintext[0] + modadd_0_38[0]) mod 2;
constraint xor_0_39[1] = (plaintext[1] + modadd_0_38[1]) mod 2;
constraint xor_0_39[2] = (plaintext[2] + modadd_0_38[2]) mod 2;
constraint xor_0_39[3] = (plaintext[3] + modadd_0_38[3]) mod 2;
constraint xor_0_39[4] = (plaintext[4] + modadd_0_38[4]) mod 2;
constraint xor_0_39[5] = (plaintext[5] + modadd_0_38[5]) mod 2;
constraint xor_0_39[6] = (plaintext[6] + modadd_0_38[6]) mod 2;
constraint xor_0_39[7] = (plaintext[7] + modadd_0_38[7]) mod 2;
constraint intermediate_output_0_40[0] = modadd_0_5[0];
constraint intermediate_output_0_40[1] = modadd_0_5[1];
constraint intermediate_output_0_40[2] = modadd_0_5[2];
constraint intermediate_output_0_40[3] = modadd_0_5[3];
constraint intermediate_output_0_40[4] = modadd_0_5[4];
constraint intermediate_output_0_40[5] = modadd_0_5[5];
constraint intermediate_output_0_40[6] = modadd_0_5[6];
constraint intermediate_output_0_40[7] = modadd_0_5[7];
constraint intermediate_output_0_40[8] = modadd_0_7[0];
constraint intermediate_output_0_40[9] = modadd_0_7[1];
constraint intermediate_output_0_40[10] = modadd_0_7[2];
constraint intermediate_output_0_40[11] = modadd_0_7[3];
constraint intermediate_output_0_40[12] = modadd_0_7[4];
constraint intermediate_output_0_40[13] = modadd_0_7[5];
constraint intermediate_output_0_40[14] = modadd_0_7[6];
constraint intermediate_output_0_40[15] = modadd_0_7[7];
constraint intermediate_output_0_40[16] = modadd_0_9[0];
constraint intermediate_output_0_40[17] = modadd_0_9[1];
constraint intermediate_output_0_40[18] = modadd_0_9[2];
constraint intermediate_output_0_40[19] = modadd_0_9[3];
constraint intermediate_output_0_40[20] = modadd_0_9[4];
constraint intermediate_output_0_40[21] = modadd_0_9[5];
constraint intermediate_output_0_40[22] = modadd_0_9[6];
constraint intermediate_output_0_40[23] = modadd_0_9[7];
constraint intermediate_output_0_40[24] = modadd_0_11[0];
constraint intermediate_output_0_40[25] = modadd_0_11[1];
constraint intermediate_output_0_40[26] = modadd_0_11[2];
constraint intermediate_output_0_40[27] = modadd_0_11[3];
constraint intermediate_output_0_40[28] = modadd_0_11[4];
constraint intermediate_output_0_40[29] = modadd_0_11[5];
constraint intermediate_output_0_40[30] = modadd_0_11[6];
constraint intermediate_output_0_40[31] = modadd_0_11[7];
constraint intermediate_output_0_41[0] = xor_0_3[0];
constraint intermediate_output_0_41[1] = xor_0_3[1];
constraint intermediate_output_0_41[2] = xor_0_3[2];
constraint intermediate_output_0_41[3] = xor_0_3[3];
constraint intermediate_output_0_41[4] = xor_0_3[4];
constraint intermediate_output_0_41[5] = xor_0_3[5];
constraint intermediate_output_0_41[6] = xor_0_3[6];
constraint intermediate_output_0_41[7] = xor_0_3[7];
constraint intermediate_output_0_41[8] = modadd_0_18[0];
constraint intermediate_output_0_41[9] = modadd_0_18[1];
constraint intermediate_output_0_41[10] = modadd_0_18[2];
constraint intermediate_output_0_41[11] = modadd_0_18[3];
constraint intermediate_output_0_41[12] = modadd_0_18[4];
constraint intermediate_output_0_41[13] = modadd_0_18[5];
constraint intermediate_output_0_41[14] = modadd_0_18[6];
constraint intermediate_output_0_41[15] = modadd_0_18[7];
constraint intermediate_output_0_41[16] = modadd_0_2[0];
constraint intermediate_output_0_41[17] = modadd_0_2[1];
constraint intermediate_output_0_41[18] = modadd_0_2[2];
constraint intermediate_output_0_41[19] = modadd_0_2[3];
constraint intermediate_output_0_41[20] = modadd_0_2[4];
constraint intermediate_output_0_41[21] = modadd_0_2[5];
constraint intermediate_output_0_41[22] = modadd_0_2[6];
constraint intermediate_output_0_41[23] = modadd_0_2[7];
constraint intermediate_output_0_41[24] = xor_0_25[0];
constraint intermediate_output_0_41[25] = xor_0_25[1];
constraint intermediate_output_0_41[26] = xor_0_25[2];
constraint intermediate_output_0_41[27] = xor_0_25[3];
constraint intermediate_output_0_41[28] = xor_0_25[4];
constraint intermediate_output_0_41[29] = xor_0_25[5];
constraint intermediate_output_0_41[30] = xor_0_25[6];
constraint intermediate_output_0_41[31] = xor_0_25[7];
constraint intermediate_output_0_41[32] = xor_0_1[0];
constraint intermediate_output_0_41[33] = xor_0_1[1];
constraint intermediate_output_0_41[34] = xor_0_1[2];
constraint intermediate_output_0_41[35] = xor_0_1[3];
constraint intermediate_output_0_41[36] = xor_0_1[4];
constraint intermediate_output_0_41[37] = xor_0_1[5];
constraint intermediate_output_0_41[38] = xor_0_1[6];
constraint intermediate_output_0_41[39] = xor_0_1[7];
constraint intermediate_output_0_41[40] = modadd_0_32[0];
constraint intermediate_output_0_41[41] = modadd_0_32[1];
constraint intermediate_output_0_41[42] = modadd_0_32[2];
constraint intermediate_output_0_41[43] = modadd_0_32[3];
constraint intermediate_output_0_41[44] = modadd_0_32[4];
constraint intermediate_output_0_41[45] = modadd_0_32[5];
constraint intermediate_output_0_41[46] = modadd_0_32[6];
constraint intermediate_output_0_41[47] = modadd_0_32[7];
constraint intermediate_output_0_41[48] = modadd_0_0[0];
constraint intermediate_output_0_41[49] = modadd_0_0[1];
constraint intermediate_output_0_41[50] = modadd_0_0[2];
constraint intermediate_output_0_41[51] = modadd_0_0[3];
constraint intermediate_output_0_41[52] = modadd_0_0[4];
constraint intermediate_output_0_41[53] = modadd_0_0[5];
constraint intermediate_output_0_41[54] = modadd_0_0[6];
constraint intermediate_output_0_41[55] = modadd_0_0[7];
constraint intermediate_output_0_41[56] = xor_0_39[0];
constraint intermediate_output_0_41[57] = xor_0_39[1];
constraint intermediate_output_0_41[58] = xor_0_39[2];
constraint intermediate_output_0_41[59] = xor_0_39[3];
constraint intermediate_output_0_41[60] = xor_0_39[4];
constraint intermediate_output_0_41[61] = xor_0_39[5];
constraint intermediate_output_0_41[62] = xor_0_39[6];
constraint intermediate_output_0_41[63] = xor_0_39[7];
constraint pre_modadd_1_1[0] = (key[88] + modadd_1_1[0]) mod 2;
constraint a_modadd_1_1[0] = 0;
constraint pre_modadd_1_1[1] = (key[89] + modadd_1_1[1]) mod 2;
constraint a_modadd_1_1[1] = 0;
constraint pre_modadd_1_1[2] = (key[90] + modadd_1_1[2]) mod 2;
constraint a_modadd_1_1[2] = 0;
constraint pre_modadd_1_1[3] = (key[91] + modadd_1_1[3]) mod 2;
constraint a_modadd_1_1[3] = 0;
constraint pre_modadd_1_1[4] = (key[92] + modadd_1_1[4]) mod 2;
constraint a_modadd_1_1[4] = 1;
constraint pre_modadd_1_1[5] = (key[93] + modadd_1_1[5]) mod 2;
constraint a_modadd_1_1[5] = 1;
constraint pre_modadd_1_1[6] = (key[94] + modadd_1_1[6]) mod 2;
constraint a_modadd_1_1[6] = 0;
constraint pre_modadd_1_1[7] = (key[95] + modadd_1_1[7]) mod 2;
constraint a_modadd_1_1[7] = 1;
constraint phi_modadd_1_1[0] = 1;
constraint delta_modadd_1_1[0] = 0;
constraint w_modadd_1_1[0]=0;
constraint table([key[89], modadd_1_1[1], pre_modadd_1_1[0], delta_modadd_1_1[1], phi_modadd_1_1[1]], [0,0,0,(a_modadd_1_1[0]+delta_modadd_1_1[0])/2,1,0,1,0,a_modadd_1_1[0],1/2,1,0,0,a_modadd_1_1[0],1/2,1,1,0,a_modadd_1_1[0],1-(a_modadd_1_1[0]+delta_modadd_1_1[0]-2*a_modadd_1_1[0]*delta_modadd_1_1[0]),0,1,1,delta_modadd_1_1[0],1/2,1,0,1,delta_modadd_1_1[0],1/2,1,1,1,1/2,a_modadd_1_1[0]+delta_modadd_1_1[0]-2*a_modadd_1_1[0]*delta_modadd_1_1[0]]);
constraint w_modadd_1_1[1]=int(100*log2(phi_modadd_1_1[1]));
constraint table([key[90], modadd_1_1[2], pre_modadd_1_1[1], delta_modadd_1_1[2], phi_modadd_1_1[2]], [0,0,0,(a_modadd_1_1[1]+delta_modadd_1_1[1])/2,1,0,1,0,a_modadd_1_1[1],1/2,1,0,0,a_modadd_1_1[1],1/2,1,1,0,a_modadd_1_1[1],1-(a_modadd_1_1[1]+delta_modadd_1_1[1]-2*a_modadd_1_1[1]*delta_modadd_1_1[1]),0,1,1,delta_modadd_1_1[1],1/2,1,0,1,delta_modadd_1_1[1],1/2,1,1,1,1/2,a_modadd_1_1[1]+delta_modadd_1_1[1]-2*a_modadd_1_1[1]*delta_modadd_1_1[1]]);
constraint w_modadd_1_1[2]=int(100*log2(phi_modadd_1_1[2]));
constraint table([key[91], modadd_1_1[3], pre_modadd_1_1[2], delta_modadd_1_1[3], phi_modadd_1_1[3]], [0,0,0,(a_modadd_1_1[2]+delta_modadd_1_1[2])/2,1,0,1,0,a_modadd_1_1[2],1/2,1,0,0,a_modadd_1_1[2],1/2,1,1,0,a_modadd_1_1[2],1-(a_modadd_1_1[2]+delta_modadd_1_1[2]-2*a_modadd_1_1[2]*delta_modadd_1_1[2]),0,1,1,delta_modadd_1_1[2],1/2,1,0,1,delta_modadd_1_1[2],1/2,1,1,1,1/2,a_modadd_1_1[2]+delta_modadd_1_1[2]-2*a_modadd_1_1[2]*delta_modadd_1_1[2]]);
constraint w_modadd_1_1[3]=int(100*log2(phi_modadd_1_1[3]));
constraint table([key[92], modadd_1_1[4], pre_modadd_1_1[3], delta_modadd_1_1[4], phi_modadd_1_1[4]], [0,0,0,(a_modadd_1_1[3]+delta_modadd_1_1[3])/2,1,0,1,0,a_modadd_1_1[3],1/2,1,0,0,a_modadd_1_1[3],1/2,1,1,0,a_modadd_1_1[3],1-(a_modadd_1_1[3]+delta_modadd_1_1[3]-2*a_modadd_1_1[3]*delta_modadd_1_1[3]),0,1,1,delta_modadd_1_1[3],1/2,1,0,1,delta_modadd_1_1[3],1/2,1,1,1,1/2,a_modadd_1_1[3]+delta_modadd_1_1[3]-2*a_modadd_1_1[3]*delta_modadd_1_1[3]]);
constraint w_modadd_1_1[4]=int(100*log2(phi_modadd_1_1[4]));
constraint table([key[93], modadd_1_1[5], pre_modadd_1_1[4], delta_modadd_1_1[5], phi_modadd_1_1[5]], [0,0,0,(a_modadd_1_1[4]+delta_modadd_1_1[4])/2,1,0,1,0,a_modadd_1_1[4],1/2,1,0,0,a_modadd_1_1[4],1/2,1,1,0,a_modadd_1_1[4],1-(a_modadd_1_1[4]+delta_modadd_1_1[4]-2*a_modadd_1_1[4]*delta_modadd_1_1[4]),0,1,1,delta_modadd_1_1[4],1/2,1,0,1,delta_modadd_1_1[4],1/2,1,1,1,1/2,a_modadd_1_1[4]+delta_modadd_1_1[4]-2*a_modadd_1_1[4]*delta_modadd_1_1[4]]);
constraint w_modadd_1_1[5]=int(100*log2(phi_modadd_1_1[5]));
constraint table([key[94], modadd_1_1[6], pre_modadd_1_1[5], delta_modadd_1_1[6], phi_modadd_1_1[6]], [0,0,0,(a_modadd_1_1[5]+delta_modadd_1_1[5])/2,1,0,1,0,a_modadd_1_1[5],1/2,1,0,0,a_modadd_1_1[5],1/2,1,1,0,a_modadd_1_1[5],1-(a_modadd_1_1[5]+delta_modadd_1_1[5]-2*a_modadd_1_1[5]*delta_modadd_1_1[5]),0,1,1,delta_modadd_1_1[5],1/2,1,0,1,delta_modadd_1_1[5],1/2,1,1,1,1/2,a_modadd_1_1[5]+delta_modadd_1_1[5]-2*a_modadd_1_1[5]*delta_modadd_1_1[5]]);
constraint w_modadd_1_1[6]=int(100*log2(phi_modadd_1_1[6]));
constraint table([key[95], modadd_1_1[7], pre_modadd_1_1[6], delta_modadd_1_1[7], phi_modadd_1_1[7]], [0,0,0,(a_modadd_1_1[6]+delta_modadd_1_1[6])/2,1,0,1,0,a_modadd_1_1[6],1/2,1,0,0,a_modadd_1_1[6],1/2,1,1,0,a_modadd_1_1[6],1-(a_modadd_1_1[6]+delta_modadd_1_1[6]-2*a_modadd_1_1[6]*delta_modadd_1_1[6]),0,1,1,delta_modadd_1_1[6],1/2,1,0,1,delta_modadd_1_1[6],1/2,1,1,1,1/2,a_modadd_1_1[6]+delta_modadd_1_1[6]-2*a_modadd_1_1[6]*delta_modadd_1_1[6]]);
constraint w_modadd_1_1[7]=int(100*log2(phi_modadd_1_1[7]));
constraint p[10] = sum(w_modadd_1_1);
constraint pre_modadd_1_3[0] = (key[80] + modadd_1_3[0]) mod 2;
constraint a_modadd_1_3[0] = 0;
constraint pre_modadd_1_3[1] = (key[81] + modadd_1_3[1]) mod 2;
constraint a_modadd_1_3[1] = 0;
constraint pre_modadd_1_3[2] = (key[82] + modadd_1_3[2]) mod 2;
constraint a_modadd_1_3[2] = 0;
constraint pre_modadd_1_3[3] = (key[83] + modadd_1_3[3]) mod 2;
constraint a_modadd_1_3[3] = 0;
constraint pre_modadd_1_3[4] = (key[84] + modadd_1_3[4]) mod 2;
constraint a_modadd_1_3[4] = 0;
constraint pre_modadd_1_3[5] = (key[85] + modadd_1_3[5]) mod 2;
constraint a_modadd_1_3[5] = 1;
constraint pre_modadd_1_3[6] = (key[86] + modadd_1_3[6]) mod 2;
constraint a_modadd_1_3[6] = 1;
constraint pre_modadd_1_3[7] = (key[87] + modadd_1_3[7]) mod 2;
constraint a_modadd_1_3[7] = 0;
constraint phi_modadd_1_3[0] = 1;
constraint delta_modadd_1_3[0] = 0;
constraint w_modadd_1_3[0]=0;
constraint table([key[81], modadd_1_3[1], pre_modadd_1_3[0], delta_modadd_1_3[1], phi_modadd_1_3[1]], [0,0,0,(a_modadd_1_3[0]+delta_modadd_1_3[0])/2,1,0,1,0,a_modadd_1_3[0],1/2,1,0,0,a_modadd_1_3[0],1/2,1,1,0,a_modadd_1_3[0],1-(a_modadd_1_3[0]+delta_modadd_1_3[0]-2*a_modadd_1_3[0]*delta_modadd_1_3[0]),0,1,1,delta_modadd_1_3[0],1/2,1,0,1,delta_modadd_1_3[0],1/2,1,1,1,1/2,a_modadd_1_3[0]+delta_modadd_1_3[0]-2*a_modadd_1_3[0]*delta_modadd_1_3[0]]);
constraint w_modadd_1_3[1]=int(100*log2(phi_modadd_1_3[1]));
constraint table([key[82], modadd_1_3[2], pre_modadd_1_3[1], delta_modadd_1_3[2], phi_modadd_1_3[2]], [0,0,0,(a_modadd_1_3[1]+delta_modadd_1_3[1])/2,1,0,1,0,a_modadd_1_3[1],1/2,1,0,0,a_modadd_1_3[1],1/2,1,1,0,a_modadd_1_3[1],1-(a_modadd_1_3[1]+delta_modadd_1_3[1]-2*a_modadd_1_3[1]*delta_modadd_1_3[1]),0,1,1,delta_modadd_1_3[1],1/2,1,0,1,delta_modadd_1_3[1],1/2,1,1,1,1/2,a_modadd_1_3[1]+delta_modadd_1_3[1]-2*a_modadd_1_3[1]*delta_modadd_1_3[1]]);
constraint w_modadd_1_3[2]=int(100*log2(phi_modadd_1_3[2]));
constraint table([key[83], modadd_1_3[3], pre_modadd_1_3[2], delta_modadd_1_3[3], phi_modadd_1_3[3]], [0,0,0,(a_modadd_1_3[2]+delta_modadd_1_3[2])/2,1,0,1,0,a_modadd_1_3[2],1/2,1,0,0,a_modadd_1_3[2],1/2,1,1,0,a_modadd_1_3[2],1-(a_modadd_1_3[2]+delta_modadd_1_3[2]-2*a_modadd_1_3[2]*delta_modadd_1_3[2]),0,1,1,delta_modadd_1_3[2],1/2,1,0,1,delta_modadd_1_3[2],1/2,1,1,1,1/2,a_modadd_1_3[2]+delta_modadd_1_3[2]-2*a_modadd_1_3[2]*delta_modadd_1_3[2]]);
constraint w_modadd_1_3[3]=int(100*log2(phi_modadd_1_3[3]));
constraint table([key[84], modadd_1_3[4], pre_modadd_1_3[3], delta_modadd_1_3[4], phi_modadd_1_3[4]], [0,0,0,(a_modadd_1_3[3]+delta_modadd_1_3[3])/2,1,0,1,0,a_modadd_1_3[3],1/2,1,0,0,a_modadd_1_3[3],1/2,1,1,0,a_modadd_1_3[3],1-(a_modadd_1_3[3]+delta_modadd_1_3[3]-2*a_modadd_1_3[3]*delta_modadd_1_3[3]),0,1,1,delta_modadd_1_3[3],1/2,1,0,1,delta_modadd_1_3[3],1/2,1,1,1,1/2,a_modadd_1_3[3]+delta_modadd_1_3[3]-2*a_modadd_1_3[3]*delta_modadd_1_3[3]]);
constraint w_modadd_1_3[4]=int(100*log2(phi_modadd_1_3[4]));
constraint table([key[85], modadd_1_3[5], pre_modadd_1_3[4], delta_modadd_1_3[5], phi_modadd_1_3[5]], [0,0,0,(a_modadd_1_3[4]+delta_modadd_1_3[4])/2,1,0,1,0,a_modadd_1_3[4],1/2,1,0,0,a_modadd_1_3[4],1/2,1,1,0,a_modadd_1_3[4],1-(a_modadd_1_3[4]+delta_modadd_1_3[4]-2*a_modadd_1_3[4]*delta_modadd_1_3[4]),0,1,1,delta_modadd_1_3[4],1/2,1,0,1,delta_modadd_1_3[4],1/2,1,1,1,1/2,a_modadd_1_3[4]+delta_modadd_1_3[4]-2*a_modadd_1_3[4]*delta_modadd_1_3[4]]);
constraint w_modadd_1_3[5]=int(100*log2(phi_modadd_1_3[5]));
constraint table([key[86], modadd_1_3[6], pre_modadd_1_3[5], delta_modadd_1_3[6], phi_modadd_1_3[6]], [0,0,0,(a_modadd_1_3[5]+delta_modadd_1_3[5])/2,1,0,1,0,a_modadd_1_3[5],1/2,1,0,0,a_modadd_1_3[5],1/2,1,1,0,a_modadd_1_3[5],1-(a_modadd_1_3[5]+delta_modadd_1_3[5]-2*a_modadd_1_3[5]*delta_modadd_1_3[5]),0,1,1,delta_modadd_1_3[5],1/2,1,0,1,delta_modadd_1_3[5],1/2,1,1,1,1/2,a_modadd_1_3[5]+delta_modadd_1_3[5]-2*a_modadd_1_3[5]*delta_modadd_1_3[5]]);
constraint w_modadd_1_3[6]=int(100*log2(phi_modadd_1_3[6]));
constraint table([key[87], modadd_1_3[7], pre_modadd_1_3[6], delta_modadd_1_3[7], phi_modadd_1_3[7]], [0,0,0,(a_modadd_1_3[6]+delta_modadd_1_3[6])/2,1,0,1,0,a_modadd_1_3[6],1/2,1,0,0,a_modadd_1_3[6],1/2,1,1,0,a_modadd_1_3[6],1-(a_modadd_1_3[6]+delta_modadd_1_3[6]-2*a_modadd_1_3[6]*delta_modadd_1_3[6]),0,1,1,delta_modadd_1_3[6],1/2,1,0,1,delta_modadd_1_3[6],1/2,1,1,1,1/2,a_modadd_1_3[6]+delta_modadd_1_3[6]-2*a_modadd_1_3[6]*delta_modadd_1_3[6]]);
constraint w_modadd_1_3[7]=int(100*log2(phi_modadd_1_3[7]));
constraint p[11] = sum(w_modadd_1_3);
constraint pre_modadd_1_5[0] = (key[72] + modadd_1_5[0]) mod 2;
constraint a_modadd_1_5[0] = 0;
constraint pre_modadd_1_5[1] = (key[73] + modadd_1_5[1]) mod 2;
constraint a_modadd_1_5[1] = 0;
constraint pre_modadd_1_5[2] = (key[74] + modadd_1_5[2]) mod 2;
constraint a_modadd_1_5[2] = 0;
constraint pre_modadd_1_5[3] = (key[75] + modadd_1_5[3]) mod 2;
constraint a_modadd_1_5[3] = 0;
constraint pre_modadd_1_5[4] = (key[76] + modadd_1_5[4]) mod 2;
constraint a_modadd_1_5[4] = 0;
constraint pre_modadd_1_5[5] = (key[77] + modadd_1_5[5]) mod 2;
constraint a_modadd_1_5[5] = 0;
constraint pre_modadd_1_5[6] = (key[78] + modadd_1_5[6]) mod 2;
constraint a_modadd_1_5[6] = 1;
constraint pre_modadd_1_5[7] = (key[79] + modadd_1_5[7]) mod 2;
constraint a_modadd_1_5[7] = 1;
constraint phi_modadd_1_5[0] = 1;
constraint delta_modadd_1_5[0] = 0;
constraint w_modadd_1_5[0]=0;
constraint table([key[73], modadd_1_5[1], pre_modadd_1_5[0], delta_modadd_1_5[1], phi_modadd_1_5[1]], [0,0,0,(a_modadd_1_5[0]+delta_modadd_1_5[0])/2,1,0,1,0,a_modadd_1_5[0],1/2,1,0,0,a_modadd_1_5[0],1/2,1,1,0,a_modadd_1_5[0],1-(a_modadd_1_5[0]+delta_modadd_1_5[0]-2*a_modadd_1_5[0]*delta_modadd_1_5[0]),0,1,1,delta_modadd_1_5[0],1/2,1,0,1,delta_modadd_1_5[0],1/2,1,1,1,1/2,a_modadd_1_5[0]+delta_modadd_1_5[0]-2*a_modadd_1_5[0]*delta_modadd_1_5[0]]);
constraint w_modadd_1_5[1]=int(100*log2(phi_modadd_1_5[1]));
constraint table([key[74], modadd_1_5[2], pre_modadd_1_5[1], delta_modadd_1_5[2], phi_modadd_1_5[2]], [0,0,0,(a_modadd_1_5[1]+delta_modadd_1_5[1])/2,1,0,1,0,a_modadd_1_5[1],1/2,1,0,0,a_modadd_1_5[1],1/2,1,1,0,a_modadd_1_5[1],1-(a_modadd_1_5[1]+delta_modadd_1_5[1]-2*a_modadd_1_5[1]*delta_modadd_1_5[1]),0,1,1,delta_modadd_1_5[1],1/2,1,0,1,delta_modadd_1_5[1],1/2,1,1,1,1/2,a_modadd_1_5[1]+delta_modadd_1_5[1]-2*a_modadd_1_5[1]*delta_modadd_1_5[1]]);
constraint w_modadd_1_5[2]=int(100*log2(phi_modadd_1_5[2]));
constraint table([key[75], modadd_1_5[3], pre_modadd_1_5[2], delta_modadd_1_5[3], phi_modadd_1_5[3]], [0,0,0,(a_modadd_1_5[2]+delta_modadd_1_5[2])/2,1,0,1,0,a_modadd_1_5[2],1/2,1,0,0,a_modadd_1_5[2],1/2,1,1,0,a_modadd_1_5[2],1-(a_modadd_1_5[2]+delta_modadd_1_5[2]-2*a_modadd_1_5[2]*delta_modadd_1_5[2]),0,1,1,delta_modadd_1_5[2],1/2,1,0,1,delta_modadd_1_5[2],1/2,1,1,1,1/2,a_modadd_1_5[2]+delta_modadd_1_5[2]-2*a_modadd_1_5[2]*delta_modadd_1_5[2]]);
constraint w_modadd_1_5[3]=int(100*log2(phi_modadd_1_5[3]));
constraint table([key[76], modadd_1_5[4], pre_modadd_1_5[3], delta_modadd_1_5[4], phi_modadd_1_5[4]], [0,0,0,(a_modadd_1_5[3]+delta_modadd_1_5[3])/2,1,0,1,0,a_modadd_1_5[3],1/2,1,0,0,a_modadd_1_5[3],1/2,1,1,0,a_modadd_1_5[3],1-(a_modadd_1_5[3]+delta_modadd_1_5[3]-2*a_modadd_1_5[3]*delta_modadd_1_5[3]),0,1,1,delta_modadd_1_5[3],1/2,1,0,1,delta_modadd_1_5[3],1/2,1,1,1,1/2,a_modadd_1_5[3]+delta_modadd_1_5[3]-2*a_modadd_1_5[3]*delta_modadd_1_5[3]]);
constraint w_modadd_1_5[4]=int(100*log2(phi_modadd_1_5[4]));
constraint table([key[77], modadd_1_5[5], pre_modadd_1_5[4], delta_modadd_1_5[5], phi_modadd_1_5[5]], [0,0,0,(a_modadd_1_5[4]+delta_modadd_1_5[4])/2,1,0,1,0,a_modadd_1_5[4],1/2,1,0,0,a_modadd_1_5[4],1/2,1,1,0,a_modadd_1_5[4],1-(a_modadd_1_5[4]+delta_modadd_1_5[4]-2*a_modadd_1_5[4]*delta_modadd_1_5[4]),0,1,1,delta_modadd_1_5[4],1/2,1,0,1,delta_modadd_1_5[4],1/2,1,1,1,1/2,a_modadd_1_5[4]+delta_modadd_1_5[4]-2*a_modadd_1_5[4]*delta_modadd_1_5[4]]);
constraint w_modadd_1_5[5]=int(100*log2(phi_modadd_1_5[5]));
constraint table([key[78], modadd_1_5[6], pre_modadd_1_5[5], delta_modadd_1_5[6], phi_modadd_1_5[6]], [0,0,0,(a_modadd_1_5[5]+delta_modadd_1_5[5])/2,1,0,1,0,a_modadd_1_5[5],1/2,1,0,0,a_modadd_1_5[5],1/2,1,1,0,a_modadd_1_5[5],1-(a_modadd_1_5[5]+delta_modadd_1_5[5]-2*a_modadd_1_5[5]*delta_modadd_1_5[5]),0,1,1,delta_modadd_1_5[5],1/2,1,0,1,delta_modadd_1_5[5],1/2,1,1,1,1/2,a_modadd_1_5[5]+delta_modadd_1_5[5]-2*a_modadd_1_5[5]*delta_modadd_1_5[5]]);
constraint w_modadd_1_5[6]=int(100*log2(phi_modadd_1_5[6]));
constraint table([key[79], modadd_1_5[7], pre_modadd_1_5[6], delta_modadd_1_5[7], phi_modadd_1_5[7]], [0,0,0,(a_modadd_1_5[6]+delta_modadd_1_5[6])/2,1,0,1,0,a_modadd_1_5[6],1/2,1,0,0,a_modadd_1_5[6],1/2,1,1,0,a_modadd_1_5[6],1-(a_modadd_1_5[6]+delta_modadd_1_5[6]-2*a_modadd_1_5[6]*delta_modadd_1_5[6]),0,1,1,delta_modadd_1_5[6],1/2,1,0,1,delta_modadd_1_5[6],1/2,1,1,1,1/2,a_modadd_1_5[6]+delta_modadd_1_5[6]-2*a_modadd_1_5[6]*delta_modadd_1_5[6]]);
constraint w_modadd_1_5[7]=int(100*log2(phi_modadd_1_5[7]));
constraint p[12] = sum(w_modadd_1_5);
constraint pre_modadd_1_7[0] = (key[64] + modadd_1_7[0]) mod 2;
constraint a_modadd_1_7[0] = 0;
constraint pre_modadd_1_7[1] = (key[65] + modadd_1_7[1]) mod 2;
constraint a_modadd_1_7[1] = 1;
constraint pre_modadd_1_7[2] = (key[66] + modadd_1_7[2]) mod 2;
constraint a_modadd_1_7[2] = 0;
constraint pre_modadd_1_7[3] = (key[67] + modadd_1_7[3]) mod 2;
constraint a_modadd_1_7[3] = 0;
constraint pre_modadd_1_7[4] = (key[68] + modadd_1_7[4]) mod 2;
constraint a_modadd_1_7[4] = 0;
constraint pre_modadd_1_7[5] = (key[69] + modadd_1_7[5]) mod 2;
constraint a_modadd_1_7[5] = 0;
constraint pre_modadd_1_7[6] = (key[70] + modadd_1_7[6]) mod 2;
constraint a_modadd_1_7[6] = 0;
constraint pre_modadd_1_7[7] = (key[71] + modadd_1_7[7]) mod 2;
constraint a_modadd_1_7[7] = 1;
constraint phi_modadd_1_7[0] = 1;
constraint delta_modadd_1_7[0] = 0;
constraint w_modadd_1_7[0]=0;
constraint table([key[65], modadd_1_7[1], pre_modadd_1_7[0], delta_modadd_1_7[1], phi_modadd_1_7[1]], [0,0,0,(a_modadd_1_7[0]+delta_modadd_1_7[0])/2,1,0,1,0,a_modadd_1_7[0],1/2,1,0,0,a_modadd_1_7[0],1/2,1,1,0,a_modadd_1_7[0],1-(a_modadd_1_7[0]+delta_modadd_1_7[0]-2*a_modadd_1_7[0]*delta_modadd_1_7[0]),0,1,1,delta_modadd_1_7[0],1/2,1,0,1,delta_modadd_1_7[0],1/2,1,1,1,1/2,a_modadd_1_7[0]+delta_modadd_1_7[0]-2*a_modadd_1_7[0]*delta_modadd_1_7[0]]);
constraint w_modadd_1_7[1]=int(100*log2(phi_modadd_1_7[1]));
constraint table([key[66], modadd_1_7[2], pre_modadd_1_7[1], delta_modadd_1_7[2], phi_modadd_1_7[2]], [0,0,0,(a_modadd_1_7[1]+delta_modadd_1_7[1])/2,1,0,1,0,a_modadd_1_7[1],1/2,1,0,0,a_modadd_1_7[1],1/2,1,1,0,a_modadd_1_7[1],1-(a_modadd_1_7[1]+delta_modadd_1_7[1]-2*a_modadd_1_7[1]*delta_modadd_1_7[1]),0,1,1,delta_modadd_1_7[1],1/2,1,0,1,delta_modadd_1_7[1],1/2,1,1,1,1/2,a_modadd_1_7[1]+delta_modadd_1_7[1]-2*a_modadd_1_7[1]*delta_modadd_1_7[1]]);
constraint w_modadd_1_7[2]=int(100*log2(phi_modadd_1_7[2]));
constraint table([key[67], modadd_1_7[3], pre_modadd_1_7[2], delta_modadd_1_7[3], phi_modadd_1_7[3]], [0,0,0,(a_modadd_1_7[2]+delta_modadd_1_7[2])/2,1,0,1,0,a_modadd_1_7[2],1/2,1,0,0,a_modadd_1_7[2],1/2,1,1,0,a_modadd_1_7[2],1-(a_modadd_1_7[2]+delta_modadd_1_7[2]-2*a_modadd_1_7[2]*delta_modadd_1_7[2]),0,1,1,delta_modadd_1_7[2],1/2,1,0,1,delta_modadd_1_7[2],1/2,1,1,1,1/2,a_modadd_1_7[2]+delta_modadd_1_7[2]-2*a_modadd_1_7[2]*delta_modadd_1_7[2]]);
constraint w_modadd_1_7[3]=int(100*log2(phi_modadd_1_7[3]));
constraint table([key[68], modadd_1_7[4], pre_modadd_1_7[3], delta_modadd_1_7[4], phi_modadd_1_7[4]], [0,0,0,(a_modadd_1_7[3]+delta_modadd_1_7[3])/2,1,0,1,0,a_modadd_1_7[3],1/2,1,0,0,a_modadd_1_7[3],1/2,1,1,0,a_modadd_1_7[3],1-(a_modadd_1_7[3]+delta_modadd_1_7[3]-2*a_modadd_1_7[3]*delta_modadd_1_7[3]),0,1,1,delta_modadd_1_7[3],1/2,1,0,1,delta_modadd_1_7[3],1/2,1,1,1,1/2,a_modadd_1_7[3]+delta_modadd_1_7[3]-2*a_modadd_1_7[3]*delta_modadd_1_7[3]]);
constraint w_modadd_1_7[4]=int(100*log2(phi_modadd_1_7[4]));
constraint table([key[69], modadd_1_7[5], pre_modadd_1_7[4], delta_modadd_1_7[5], phi_modadd_1_7[5]], [0,0,0,(a_modadd_1_7[4]+delta_modadd_1_7[4])/2,1,0,1,0,a_modadd_1_7[4],1/2,1,0,0,a_modadd_1_7[4],1/2,1,1,0,a_modadd_1_7[4],1-(a_modadd_1_7[4]+delta_modadd_1_7[4]-2*a_modadd_1_7[4]*delta_modadd_1_7[4]),0,1,1,delta_modadd_1_7[4],1/2,1,0,1,delta_modadd_1_7[4],1/2,1,1,1,1/2,a_modadd_1_7[4]+delta_modadd_1_7[4]-2*a_modadd_1_7[4]*delta_modadd_1_7[4]]);
constraint w_modadd_1_7[5]=int(100*log2(phi_modadd_1_7[5]));
constraint table([key[70], modadd_1_7[6], pre_modadd_1_7[5], delta_modadd_1_7[6], phi_modadd_1_7[6]], [0,0,0,(a_modadd_1_7[5]+delta_modadd_1_7[5])/2,1,0,1,0,a_modadd_1_7[5],1/2,1,0,0,a_modadd_1_7[5],1/2,1,1,0,a_modadd_1_7[5],1-(a_modadd_1_7[5]+delta_modadd_1_7[5]-2*a_modadd_1_7[5]*delta_modadd_1_7[5]),0,1,1,delta_modadd_1_7[5],1/2,1,0,1,delta_modadd_1_7[5],1/2,1,1,1,1/2,a_modadd_1_7[5]+delta_modadd_1_7[5]-2*a_modadd_1_7[5]*delta_modadd_1_7[5]]);
constraint w_modadd_1_7[6]=int(100*log2(phi_modadd_1_7[6]));
constraint table([key[71], modadd_1_7[7], pre_modadd_1_7[6], delta_modadd_1_7[7], phi_modadd_1_7[7]], [0,0,0,(a_modadd_1_7[6]+delta_modadd_1_7[6])/2,1,0,1,0,a_modadd_1_7[6],1/2,1,0,0,a_modadd_1_7[6],1/2,1,1,0,a_modadd_1_7[6],1-(a_modadd_1_7[6]+delta_modadd_1_7[6]-2*a_modadd_1_7[6]*delta_modadd_1_7[6]),0,1,1,delta_modadd_1_7[6],1/2,1,0,1,delta_modadd_1_7[6],1/2,1,1,1,1/2,a_modadd_1_7[6]+delta_modadd_1_7[6]-2*a_modadd_1_7[6]*delta_modadd_1_7[6]]);
constraint w_modadd_1_7[7]=int(100*log2(phi_modadd_1_7[7]));
constraint p[13] = sum(w_modadd_1_7);
constraint rot_1_8[0] = xor_0_25[3];
constraint rot_1_8[1] = xor_0_25[4];
constraint rot_1_8[2] = xor_0_25[5];
constraint rot_1_8[3] = xor_0_25[6];
constraint rot_1_8[4] = xor_0_25[7];
constraint rot_1_8[5] = xor_0_25[0];
constraint rot_1_8[6] = xor_0_25[1];
constraint rot_1_8[7] = xor_0_25[2];
constraint rot_1_9[0] = xor_0_25[4];
constraint rot_1_9[1] = xor_0_25[5];
constraint rot_1_9[2] = xor_0_25[6];
constraint rot_1_9[3] = xor_0_25[7];
constraint rot_1_9[4] = xor_0_25[0];
constraint rot_1_9[5] = xor_0_25[1];
constraint rot_1_9[6] = xor_0_25[2];
constraint rot_1_9[7] = xor_0_25[3];
constraint rot_1_10[0] = xor_0_25[6];
constraint rot_1_10[1] = xor_0_25[7];
constraint rot_1_10[2] = xor_0_25[0];
constraint rot_1_10[3] = xor_0_25[1];
constraint rot_1_10[4] = xor_0_25[2];
constraint rot_1_10[5] = xor_0_25[3];
constraint rot_1_10[6] = xor_0_25[4];
constraint rot_1_10[7] = xor_0_25[5];
constraint xor_1_11[0] = (rot_1_8[0] + rot_1_9[0]) mod 2;
constraint xor_1_11[1] = (rot_1_8[1] + rot_1_9[1]) mod 2;
constraint xor_1_11[2] = (rot_1_8[2] + rot_1_9[2]) mod 2;
constraint xor_1_11[3] = (rot_1_8[3] + rot_1_9[3]) mod 2;
constraint xor_1_11[4] = (rot_1_8[4] + rot_1_9[4]) mod 2;
constraint xor_1_11[5] = (rot_1_8[5] + rot_1_9[5]) mod 2;
constraint xor_1_11[6] = (rot_1_8[6] + rot_1_9[6]) mod 2;
constraint xor_1_11[7] = (rot_1_8[7] + rot_1_9[7]) mod 2;
constraint xor_1_12[0] = (xor_1_11[0] + rot_1_10[0]) mod 2;
constraint xor_1_12[1] = (xor_1_11[1] + rot_1_10[1]) mod 2;
constraint xor_1_12[2] = (xor_1_11[2] + rot_1_10[2]) mod 2;
constraint xor_1_12[3] = (xor_1_11[3] + rot_1_10[3]) mod 2;
constraint xor_1_12[4] = (xor_1_11[4] + rot_1_10[4]) mod 2;
constraint xor_1_12[5] = (xor_1_11[5] + rot_1_10[5]) mod 2;
constraint xor_1_12[6] = (xor_1_11[6] + rot_1_10[6]) mod 2;
constraint xor_1_12[7] = (xor_1_11[7] + rot_1_10[7]) mod 2;
constraint xor_1_13[0] = (xor_1_12[0] + modadd_1_5[0]) mod 2;
constraint xor_1_13[1] = (xor_1_12[1] + modadd_1_5[1]) mod 2;
constraint xor_1_13[2] = (xor_1_12[2] + modadd_1_5[2]) mod 2;
constraint xor_1_13[3] = (xor_1_12[3] + modadd_1_5[3]) mod 2;
constraint xor_1_13[4] = (xor_1_12[4] + modadd_1_5[4]) mod 2;
constraint xor_1_13[5] = (xor_1_12[5] + modadd_1_5[5]) mod 2;
constraint xor_1_13[6] = (xor_1_12[6] + modadd_1_5[6]) mod 2;
constraint xor_1_13[7] = (xor_1_12[7] + modadd_1_5[7]) mod 2;
constraint pre_modadd_1_14_0[0] = modadd_0_2[0];
constraint pre_modadd_1_14_0[1] = modadd_0_2[1];
constraint pre_modadd_1_14_0[2] = modadd_0_2[2];
constraint pre_modadd_1_14_0[3] = modadd_0_2[3];
constraint pre_modadd_1_14_0[4] = modadd_0_2[4];
constraint pre_modadd_1_14_0[5] = modadd_0_2[5];
constraint pre_modadd_1_14_0[6] = modadd_0_2[6];
constraint pre_modadd_1_14_0[7] = modadd_0_2[7];
constraint pre_modadd_1_14_1[0] = xor_1_13[0];
constraint pre_modadd_1_14_1[1] = xor_1_13[1];
constraint pre_modadd_1_14_1[2] = xor_1_13[2];
constraint pre_modadd_1_14_1[3] = xor_1_13[3];
constraint pre_modadd_1_14_1[4] = xor_1_13[4];
constraint pre_modadd_1_14_1[5] = xor_1_13[5];
constraint pre_modadd_1_14_1[6] = xor_1_13[6];
constraint pre_modadd_1_14_1[7] = xor_1_13[7];
constraint forall(j in 0..7)(if eq_modadd_1_14[j] = 1 then (sum([pre_modadd_1_14_1[j], pre_modadd_1_14_0[j], modadd_1_14[j]]) mod 2) = Shi_pre_modadd_1_14_0[j] else true endif) /\ p[14] = 800-100 * sum(eq_modadd_1_14);
constraint rot_1_15[0] = modadd_0_32[1];
constraint rot_1_15[1] = modadd_0_32[2];
constraint rot_1_15[2] = modadd_0_32[3];
constraint rot_1_15[3] = modadd_0_32[4];
constraint rot_1_15[4] = modadd_0_32[5];
constraint rot_1_15[5] = modadd_0_32[6];
constraint rot_1_15[6] = modadd_0_32[7];
constraint rot_1_15[7] = modadd_0_32[0];
constraint rot_1_16[0] = modadd_0_32[2];
constraint rot_1_16[1] = modadd_0_32[3];
constraint rot_1_16[2] = modadd_0_32[4];
constraint rot_1_16[3] = modadd_0_32[5];
constraint rot_1_16[4] = modadd_0_32[6];
constraint rot_1_16[5] = modadd_0_32[7];
constraint rot_1_16[6] = modadd_0_32[0];
constraint rot_1_16[7] = modadd_0_32[1];
constraint rot_1_17[0] = modadd_0_32[7];
constraint rot_1_17[1] = modadd_0_32[0];
constraint rot_1_17[2] = modadd_0_32[1];
constraint rot_1_17[3] = modadd_0_32[2];
constraint rot_1_17[4] = modadd_0_32[3];
constraint rot_1_17[5] = modadd_0_32[4];
constraint rot_1_17[6] = modadd_0_32[5];
constraint rot_1_17[7] = modadd_0_32[6];
constraint xor_1_18[0] = (rot_1_15[0] + rot_1_16[0]) mod 2;
constraint xor_1_18[1] = (rot_1_15[1] + rot_1_16[1]) mod 2;
constraint xor_1_18[2] = (rot_1_15[2] + rot_1_16[2]) mod 2;
constraint xor_1_18[3] = (rot_1_15[3] + rot_1_16[3]) mod 2;
constraint xor_1_18[4] = (rot_1_15[4] + rot_1_16[4]) mod 2;
constraint xor_1_18[5] = (rot_1_15[5] + rot_1_16[5]) mod 2;
constraint xor_1_18[6] = (rot_1_15[6] + rot_1_16[6]) mod 2;
constraint xor_1_18[7] = (rot_1_15[7] + rot_1_16[7]) mod 2;
constraint xor_1_19[0] = (xor_1_18[0] + rot_1_17[0]) mod 2;
constraint xor_1_19[1] = (xor_1_18[1] + rot_1_17[1]) mod 2;
constraint xor_1_19[2] = (xor_1_18[2] + rot_1_17[2]) mod 2;
constraint xor_1_19[3] = (xor_1_18[3] + rot_1_17[3]) mod 2;
constraint xor_1_19[4] = (xor_1_18[4] + rot_1_17[4]) mod 2;
constraint xor_1_19[5] = (xor_1_18[5] + rot_1_17[5]) mod 2;
constraint xor_1_19[6] = (xor_1_18[6] + rot_1_17[6]) mod 2;
constraint xor_1_19[7] = (xor_1_18[7] + rot_1_17[7]) mod 2;
constraint pre_modadd_1_20_0[0] = xor_1_19[0];
constraint pre_modadd_1_20_0[1] = xor_1_19[1];
constraint pre_modadd_1_20_0[2] = xor_1_19[2];
constraint pre_modadd_1_20_0[3] = xor_1_19[3];
constraint pre_modadd_1_20_0[4] = xor_1_19[4];
constraint pre_modadd_1_20_0[5] = xor_1_19[5];
constraint pre_modadd_1_20_0[6] = xor_1_19[6];
constraint pre_modadd_1_20_0[7] = xor_1_19[7];
constraint pre_modadd_1_20_1[0] = modadd_1_3[0];
constraint pre_modadd_1_20_1[1] = modadd_1_3[1];
constraint pre_modadd_1_20_1[2] = modadd_1_3[2];
constraint pre_modadd_1_20_1[3] = modadd_1_3[3];
constraint pre_modadd_1_20_1[4] = modadd_1_3[4];
constraint pre_modadd_1_20_1[5] = modadd_1_3[5];
constraint pre_modadd_1_20_1[6] = modadd_1_3[6];
constraint pre_modadd_1_20_1[7] = modadd_1_3[7];
constraint forall(j in 0..7)(if eq_modadd_1_20[j] = 1 then (sum([pre_modadd_1_20_1[j], pre_modadd_1_20_0[j], modadd_1_20[j]]) mod 2) = Shi_pre_modadd_1_20_0[j] else true endif) /\ p[15] = 800-100 * sum(eq_modadd_1_20);
constraint xor_1_21[0] = (xor_0_1[0] + modadd_1_20[0]) mod 2;
constraint xor_1_21[1] = (xor_0_1[1] + modadd_1_20[1]) mod 2;
constraint xor_1_21[2] = (xor_0_1[2] + modadd_1_20[2]) mod 2;
constraint xor_1_21[3] = (xor_0_1[3] + modadd_1_20[3]) mod 2;
constraint xor_1_21[4] = (xor_0_1[4] + modadd_1_20[4]) mod 2;
constraint xor_1_21[5] = (xor_0_1[5] + modadd_1_20[5]) mod 2;
constraint xor_1_21[6] = (xor_0_1[6] + modadd_1_20[6]) mod 2;
constraint xor_1_21[7] = (xor_0_1[7] + modadd_1_20[7]) mod 2;
constraint rot_1_22[0] = xor_0_39[3];
constraint rot_1_22[1] = xor_0_39[4];
constraint rot_1_22[2] = xor_0_39[5];
constraint rot_1_22[3] = xor_0_39[6];
constraint rot_1_22[4] = xor_0_39[7];
constraint rot_1_22[5] = xor_0_39[0];
constraint rot_1_22[6] = xor_0_39[1];
constraint rot_1_22[7] = xor_0_39[2];
constraint rot_1_23[0] = xor_0_39[4];
constraint rot_1_23[1] = xor_0_39[5];
constraint rot_1_23[2] = xor_0_39[6];
constraint rot_1_23[3] = xor_0_39[7];
constraint rot_1_23[4] = xor_0_39[0];
constraint rot_1_23[5] = xor_0_39[1];
constraint rot_1_23[6] = xor_0_39[2];
constraint rot_1_23[7] = xor_0_39[3];
constraint rot_1_24[0] = xor_0_39[6];
constraint rot_1_24[1] = xor_0_39[7];
constraint rot_1_24[2] = xor_0_39[0];
constraint rot_1_24[3] = xor_0_39[1];
constraint rot_1_24[4] = xor_0_39[2];
constraint rot_1_24[5] = xor_0_39[3];
constraint rot_1_24[6] = xor_0_39[4];
constraint rot_1_24[7] = xor_0_39[5];
constraint xor_1_25[0] = (rot_1_22[0] + rot_1_23[0]) mod 2;
constraint xor_1_25[1] = (rot_1_22[1] + rot_1_23[1]) mod 2;
constraint xor_1_25[2] = (rot_1_22[2] + rot_1_23[2]) mod 2;
constraint xor_1_25[3] = (rot_1_22[3] + rot_1_23[3]) mod 2;
constraint xor_1_25[4] = (rot_1_22[4] + rot_1_23[4]) mod 2;
constraint xor_1_25[5] = (rot_1_22[5] + rot_1_23[5]) mod 2;
constraint xor_1_25[6] = (rot_1_22[6] + rot_1_23[6]) mod 2;
constraint xor_1_25[7] = (rot_1_22[7] + rot_1_23[7]) mod 2;
constraint xor_1_26[0] = (xor_1_25[0] + rot_1_24[0]) mod 2;
constraint xor_1_26[1] = (xor_1_25[1] + rot_1_24[1]) mod 2;
constraint xor_1_26[2] = (xor_1_25[2] + rot_1_24[2]) mod 2;
constraint xor_1_26[3] = (xor_1_25[3] + rot_1_24[3]) mod 2;
constraint xor_1_26[4] = (xor_1_25[4] + rot_1_24[4]) mod 2;
constraint xor_1_26[5] = (xor_1_25[5] + rot_1_24[5]) mod 2;
constraint xor_1_26[6] = (xor_1_25[6] + rot_1_24[6]) mod 2;
constraint xor_1_26[7] = (xor_1_25[7] + rot_1_24[7]) mod 2;
constraint xor_1_27[0] = (xor_1_26[0] + modadd_1_1[0]) mod 2;
constraint xor_1_27[1] = (xor_1_26[1] + modadd_1_1[1]) mod 2;
constraint xor_1_27[2] = (xor_1_26[2] + modadd_1_1[2]) mod 2;
constraint xor_1_27[3] = (xor_1_26[3] + modadd_1_1[3]) mod 2;
constraint xor_1_27[4] = (xor_1_26[4] + modadd_1_1[4]) mod 2;
constraint xor_1_27[5] = (xor_1_26[5] + modadd_1_1[5]) mod 2;
constraint xor_1_27[6] = (xor_1_26[6] + modadd_1_1[6]) mod 2;
constraint xor_1_27[7] = (xor_1_26[7] + modadd_1_1[7]) mod 2;
constraint pre_modadd_1_28_0[0] = modadd_0_0[0];
constraint pre_modadd_1_28_0[1] = modadd_0_0[1];
constraint pre_modadd_1_28_0[2] = modadd_0_0[2];
constraint pre_modadd_1_28_0[3] = modadd_0_0[3];
constraint pre_modadd_1_28_0[4] = modadd_0_0[4];
constraint pre_modadd_1_28_0[5] = modadd_0_0[5];
constraint pre_modadd_1_28_0[6] = modadd_0_0[6];
constraint pre_modadd_1_28_0[7] = modadd_0_0[7];
constraint pre_modadd_1_28_1[0] = xor_1_27[0];
constraint pre_modadd_1_28_1[1] = xor_1_27[1];
constraint pre_modadd_1_28_1[2] = xor_1_27[2];
constraint pre_modadd_1_28_1[3] = xor_1_27[3];
constraint pre_modadd_1_28_1[4] = xor_1_27[4];
constraint pre_modadd_1_28_1[5] = xor_1_27[5];
constraint pre_modadd_1_28_1[6] = xor_1_27[6];
constraint pre_modadd_1_28_1[7] = xor_1_27[7];
constraint forall(j in 0..7)(if eq_modadd_1_28[j] = 1 then (sum([pre_modadd_1_28_1[j], pre_modadd_1_28_0[j], modadd_1_28[j]]) mod 2) = Shi_pre_modadd_1_28_0[j] else true endif) /\ p[16] = 800-100 * sum(eq_modadd_1_28);
constraint rot_1_29[0] = modadd_0_18[1];
constraint rot_1_29[1] = modadd_0_18[2];
constraint rot_1_29[2] = modadd_0_18[3];
constraint rot_1_29[3] = modadd_0_18[4];
constraint rot_1_29[4] = modadd_0_18[5];
constraint rot_1_29[5] = modadd_0_18[6];
constraint rot_1_29[6] = modadd_0_18[7];
constraint rot_1_29[7] = modadd_0_18[0];
constraint rot_1_30[0] = modadd_0_18[2];
constraint rot_1_30[1] = modadd_0_18[3];
constraint rot_1_30[2] = modadd_0_18[4];
constraint rot_1_30[3] = modadd_0_18[5];
constraint rot_1_30[4] = modadd_0_18[6];
constraint rot_1_30[5] = modadd_0_18[7];
constraint rot_1_30[6] = modadd_0_18[0];
constraint rot_1_30[7] = modadd_0_18[1];
constraint rot_1_31[0] = modadd_0_18[7];
constraint rot_1_31[1] = modadd_0_18[0];
constraint rot_1_31[2] = modadd_0_18[1];
constraint rot_1_31[3] = modadd_0_18[2];
constraint rot_1_31[4] = modadd_0_18[3];
constraint rot_1_31[5] = modadd_0_18[4];
constraint rot_1_31[6] = modadd_0_18[5];
constraint rot_1_31[7] = modadd_0_18[6];
constraint xor_1_32[0] = (rot_1_29[0] + rot_1_30[0]) mod 2;
constraint xor_1_32[1] = (rot_1_29[1] + rot_1_30[1]) mod 2;
constraint xor_1_32[2] = (rot_1_29[2] + rot_1_30[2]) mod 2;
constraint xor_1_32[3] = (rot_1_29[3] + rot_1_30[3]) mod 2;
constraint xor_1_32[4] = (rot_1_29[4] + rot_1_30[4]) mod 2;
constraint xor_1_32[5] = (rot_1_29[5] + rot_1_30[5]) mod 2;
constraint xor_1_32[6] = (rot_1_29[6] + rot_1_30[6]) mod 2;
constraint xor_1_32[7] = (rot_1_29[7] + rot_1_30[7]) mod 2;
constraint xor_1_33[0] = (xor_1_32[0] + rot_1_31[0]) mod 2;
constraint xor_1_33[1] = (xor_1_32[1] + rot_1_31[1]) mod 2;
constraint xor_1_33[2] = (xor_1_32[2] + rot_1_31[2]) mod 2;
constraint xor_1_33[3] = (xor_1_32[3] + rot_1_31[3]) mod 2;
constraint xor_1_33[4] = (xor_1_32[4] + rot_1_31[4]) mod 2;
constraint xor_1_33[5] = (xor_1_32[5] + rot_1_31[5]) mod 2;
constraint xor_1_33[6] = (xor_1_32[6] + rot_1_31[6]) mod 2;
constraint xor_1_33[7] = (xor_1_32[7] + rot_1_31[7]) mod 2;
constraint pre_modadd_1_34_0[0] = xor_1_33[0];
constraint pre_modadd_1_34_0[1] = xor_1_33[1];
constraint pre_modadd_1_34_0[2] = xor_1_33[2];
constraint pre_modadd_1_34_0[3] = xor_1_33[3];
constraint pre_modadd_1_34_0[4] = xor_1_33[4];
constraint pre_modadd_1_34_0[5] = xor_1_33[5];
constraint pre_modadd_1_34_0[6] = xor_1_33[6];
constraint pre_modadd_1_34_0[7] = xor_1_33[7];
constraint pre_modadd_1_34_1[0] = modadd_1_7[0];
constraint pre_modadd_1_34_1[1] = modadd_1_7[1];
constraint pre_modadd_1_34_1[2] = modadd_1_7[2];
constraint pre_modadd_1_34_1[3] = modadd_1_7[3];
constraint pre_modadd_1_34_1[4] = modadd_1_7[4];
constraint pre_modadd_1_34_1[5] = modadd_1_7[5];
constraint pre_modadd_1_34_1[6] = modadd_1_7[6];
constraint pre_modadd_1_34_1[7] = modadd_1_7[7];
constraint forall(j in 0..7)(if eq_modadd_1_34[j] = 1 then (sum([pre_modadd_1_34_1[j], pre_modadd_1_34_0[j], modadd_1_34[j]]) mod 2) = Shi_pre_modadd_1_34_0[j] else true endif) /\ p[17] = 800-100 * sum(eq_modadd_1_34);
constraint xor_1_35[0] = (xor_0_3[0] + modadd_1_34[0]) mod 2;
constraint xor_1_35[1] = (xor_0_3[1] + modadd_1_34[1]) mod 2;
constraint xor_1_35[2] = (xor_0_3[2] + modadd_1_34[2]) mod 2;
constraint xor_1_35[3] = (xor_0_3[3] + modadd_1_34[3]) mod 2;
constraint xor_1_35[4] = (xor_0_3[4] + modadd_1_34[4]) mod 2;
constraint xor_1_35[5] = (xor_0_3[5] + modadd_1_34[5]) mod 2;
constraint xor_1_35[6] = (xor_0_3[6] + modadd_1_34[6]) mod 2;
constraint xor_1_35[7] = (xor_0_3[7] + modadd_1_34[7]) mod 2;
constraint intermediate_output_1_36[0] = modadd_1_1[0];
constraint intermediate_output_1_36[1] = modadd_1_1[1];
constraint intermediate_output_1_36[2] = modadd_1_1[2];
constraint intermediate_output_1_36[3] = modadd_1_1[3];
constraint intermediate_output_1_36[4] = modadd_1_1[4];
constraint intermediate_output_1_36[5] = modadd_1_1[5];
constraint intermediate_output_1_36[6] = modadd_1_1[6];
constraint intermediate_output_1_36[7] = modadd_1_1[7];
constraint intermediate_output_1_36[8] = modadd_1_3[0];
constraint intermediate_output_1_36[9] = modadd_1_3[1];
constraint intermediate_output_1_36[10] = modadd_1_3[2];
constraint intermediate_output_1_36[11] = modadd_1_3[3];
constraint intermediate_output_1_36[12] = modadd_1_3[4];
constraint intermediate_output_1_36[13] = modadd_1_3[5];
constraint intermediate_output_1_36[14] = modadd_1_3[6];
constraint intermediate_output_1_36[15] = modadd_1_3[7];
constraint intermediate_output_1_36[16] = modadd_1_5[0];
constraint intermediate_output_1_36[17] = modadd_1_5[1];
constraint intermediate_output_1_36[18] = modadd_1_5[2];
constraint intermediate_output_1_36[19] = modadd_1_5[3];
constraint intermediate_output_1_36[20] = modadd_1_5[4];
constraint intermediate_output_1_36[21] = modadd_1_5[5];
constraint intermediate_output_1_36[22] = modadd_1_5[6];
constraint intermediate_output_1_36[23] = modadd_1_5[7];
constraint intermediate_output_1_36[24] = modadd_1_7[0];
constraint intermediate_output_1_36[25] = modadd_1_7[1];
constraint intermediate_output_1_36[26] = modadd_1_7[2];
constraint intermediate_output_1_36[27] = modadd_1_7[3];
constraint intermediate_output_1_36[28] = modadd_1_7[4];
constraint intermediate_output_1_36[29] = modadd_1_7[5];
constraint intermediate_output_1_36[30] = modadd_1_7[6];
constraint intermediate_output_1_36[31] = modadd_1_7[7];
constraint intermediate_output_1_37[0] = modadd_0_18[0];
constraint intermediate_output_1_37[1] = modadd_0_18[1];
constraint intermediate_output_1_37[2] = modadd_0_18[2];
constraint intermediate_output_1_37[3] = modadd_0_18[3];
constraint intermediate_output_1_37[4] = modadd_0_18[4];
constraint intermediate_output_1_37[5] = modadd_0_18[5];
constraint intermediate_output_1_37[6] = modadd_0_18[6];
constraint intermediate_output_1_37[7] = modadd_0_18[7];
constraint intermediate_output_1_37[8] = modadd_1_14[0];
constraint intermediate_output_1_37[9] = modadd_1_14[1];
constraint intermediate_output_1_37[10] = modadd_1_14[2];
constraint intermediate_output_1_37[11] = modadd_1_14[3];
constraint intermediate_output_1_37[12] = modadd_1_14[4];
constraint intermediate_output_1_37[13] = modadd_1_14[5];
constraint intermediate_output_1_37[14] = modadd_1_14[6];
constraint intermediate_output_1_37[15] = modadd_1_14[7];
constraint intermediate_output_1_37[16] = xor_0_25[0];
constraint intermediate_output_1_37[17] = xor_0_25[1];
constraint intermediate_output_1_37[18] = xor_0_25[2];
constraint intermediate_output_1_37[19] = xor_0_25[3];
constraint intermediate_output_1_37[20] = xor_0_25[4];
constraint intermediate_output_1_37[21] = xor_0_25[5];
constraint intermediate_output_1_37[22] = xor_0_25[6];
constraint intermediate_output_1_37[23] = xor_0_25[7];
constraint intermediate_output_1_37[24] = xor_1_21[0];
constraint intermediate_output_1_37[25] = xor_1_21[1];
constraint intermediate_output_1_37[26] = xor_1_21[2];
constraint intermediate_output_1_37[27] = xor_1_21[3];
constraint intermediate_output_1_37[28] = xor_1_21[4];
constraint intermediate_output_1_37[29] = xor_1_21[5];
constraint intermediate_output_1_37[30] = xor_1_21[6];
constraint intermediate_output_1_37[31] = xor_1_21[7];
constraint intermediate_output_1_37[32] = modadd_0_32[0];
constraint intermediate_output_1_37[33] = modadd_0_32[1];
constraint intermediate_output_1_37[34] = modadd_0_32[2];
constraint intermediate_output_1_37[35] = modadd_0_32[3];
constraint intermediate_output_1_37[36] = modadd_0_32[4];
constraint intermediate_output_1_37[37] = modadd_0_32[5];
constraint intermediate_output_1_37[38] = modadd_0_32[6];
constraint intermediate_output_1_37[39] = modadd_0_32[7];
constraint intermediate_output_1_37[40] = modadd_1_28[0];
constraint intermediate_output_1_37[41] = modadd_1_28[1];
constraint intermediate_output_1_37[42] = modadd_1_28[2];
constraint intermediate_output_1_37[43] = modadd_1_28[3];
constraint intermediate_output_1_37[44] = modadd_1_28[4];
constraint intermediate_output_1_37[45] = modadd_1_28[5];
constraint intermediate_output_1_37[46] = modadd_1_28[6];
constraint intermediate_output_1_37[47] = modadd_1_28[7];
constraint intermediate_output_1_37[48] = xor_0_39[0];
constraint intermediate_output_1_37[49] = xor_0_39[1];
constraint intermediate_output_1_37[50] = xor_0_39[2];
constraint intermediate_output_1_37[51] = xor_0_39[3];
constraint intermediate_output_1_37[52] = xor_0_39[4];
constraint intermediate_output_1_37[53] = xor_0_39[5];
constraint intermediate_output_1_37[54] = xor_0_39[6];
constraint intermediate_output_1_37[55] = xor_0_39[7];
constraint intermediate_output_1_37[56] = xor_1_35[0];
constraint intermediate_output_1_37[57] = xor_1_35[1];
constraint intermediate_output_1_37[58] = xor_1_35[2];
constraint intermediate_output_1_37[59] = xor_1_35[3];
constraint intermediate_output_1_37[60] = xor_1_35[4];
constraint intermediate_output_1_37[61] = xor_1_35[5];
constraint intermediate_output_1_37[62] = xor_1_35[6];
constraint intermediate_output_1_37[63] = xor_1_35[7];
constraint pre_modadd_2_1[0] = (key[56] + modadd_2_1[0]) mod 2;
constraint a_modadd_2_1[0] = 0;
constraint pre_modadd_2_1[1] = (key[57] + modadd_2_1[1]) mod 2;
constraint a_modadd_2_1[1] = 1;
constraint pre_modadd_2_1[2] = (key[58] + modadd_2_1[2]) mod 2;
constraint a_modadd_2_1[2] = 1;
constraint pre_modadd_2_1[3] = (key[59] + modadd_2_1[3]) mod 2;
constraint a_modadd_2_1[3] = 0;
constraint pre_modadd_2_1[4] = (key[60] + modadd_2_1[4]) mod 2;
constraint a_modadd_2_1[4] = 0;
constraint pre_modadd_2_1[5] = (key[61] + modadd_2_1[5]) mod 2;
constraint a_modadd_2_1[5] = 0;
constraint pre_modadd_2_1[6] = (key[62] + modadd_2_1[6]) mod 2;
constraint a_modadd_2_1[6] = 0;
constraint pre_modadd_2_1[7] = (key[63] + modadd_2_1[7]) mod 2;
constraint a_modadd_2_1[7] = 0;
constraint phi_modadd_2_1[0] = 1;
constraint delta_modadd_2_1[0] = 0;
constraint w_modadd_2_1[0]=0;
constraint table([key[57], modadd_2_1[1], pre_modadd_2_1[0], delta_modadd_2_1[1], phi_modadd_2_1[1]], [0,0,0,(a_modadd_2_1[0]+delta_modadd_2_1[0])/2,1,0,1,0,a_modadd_2_1[0],1/2,1,0,0,a_modadd_2_1[0],1/2,1,1,0,a_modadd_2_1[0],1-(a_modadd_2_1[0]+delta_modadd_2_1[0]-2*a_modadd_2_1[0]*delta_modadd_2_1[0]),0,1,1,delta_modadd_2_1[0],1/2,1,0,1,delta_modadd_2_1[0],1/2,1,1,1,1/2,a_modadd_2_1[0]+delta_modadd_2_1[0]-2*a_modadd_2_1[0]*delta_modadd_2_1[0]]);
constraint w_modadd_2_1[1]=int(100*log2(phi_modadd_2_1[1]));
constraint table([key[58], modadd_2_1[2], pre_modadd_2_1[1], delta_modadd_2_1[2], phi_modadd_2_1[2]], [0,0,0,(a_modadd_2_1[1]+delta_modadd_2_1[1])/2,1,0,1,0,a_modadd_2_1[1],1/2,1,0,0,a_modadd_2_1[1],1/2,1,1,0,a_modadd_2_1[1],1-(a_modadd_2_1[1]+delta_modadd_2_1[1]-2*a_modadd_2_1[1]*delta_modadd_2_1[1]),0,1,1,delta_modadd_2_1[1],1/2,1,0,1,delta_modadd_2_1[1],1/2,1,1,1,1/2,a_modadd_2_1[1]+delta_modadd_2_1[1]-2*a_modadd_2_1[1]*delta_modadd_2_1[1]]);
constraint w_modadd_2_1[2]=int(100*log2(phi_modadd_2_1[2]));
constraint table([key[59], modadd_2_1[3], pre_modadd_2_1[2], delta_modadd_2_1[3], phi_modadd_2_1[3]], [0,0,0,(a_modadd_2_1[2]+delta_modadd_2_1[2])/2,1,0,1,0,a_modadd_2_1[2],1/2,1,0,0,a_modadd_2_1[2],1/2,1,1,0,a_modadd_2_1[2],1-(a_modadd_2_1[2]+delta_modadd_2_1[2]-2*a_modadd_2_1[2]*delta_modadd_2_1[2]),0,1,1,delta_modadd_2_1[2],1/2,1,0,1,delta_modadd_2_1[2],1/2,1,1,1,1/2,a_modadd_2_1[2]+delta_modadd_2_1[2]-2*a_modadd_2_1[2]*delta_modadd_2_1[2]]);
constraint w_modadd_2_1[3]=int(100*log2(phi_modadd_2_1[3]));
constraint table([key[60], modadd_2_1[4], pre_modadd_2_1[3], delta_modadd_2_1[4], phi_modadd_2_1[4]], [0,0,0,(a_modadd_2_1[3]+delta_modadd_2_1[3])/2,1,0,1,0,a_modadd_2_1[3],1/2,1,0,0,a_modadd_2_1[3],1/2,1,1,0,a_modadd_2_1[3],1-(a_modadd_2_1[3]+delta_modadd_2_1[3]-2*a_modadd_2_1[3]*delta_modadd_2_1[3]),0,1,1,delta_modadd_2_1[3],1/2,1,0,1,delta_modadd_2_1[3],1/2,1,1,1,1/2,a_modadd_2_1[3]+delta_modadd_2_1[3]-2*a_modadd_2_1[3]*delta_modadd_2_1[3]]);
constraint w_modadd_2_1[4]=int(100*log2(phi_modadd_2_1[4]));
constraint table([key[61], modadd_2_1[5], pre_modadd_2_1[4], delta_modadd_2_1[5], phi_modadd_2_1[5]], [0,0,0,(a_modadd_2_1[4]+delta_modadd_2_1[4])/2,1,0,1,0,a_modadd_2_1[4],1/2,1,0,0,a_modadd_2_1[4],1/2,1,1,0,a_modadd_2_1[4],1-(a_modadd_2_1[4]+delta_modadd_2_1[4]-2*a_modadd_2_1[4]*delta_modadd_2_1[4]),0,1,1,delta_modadd_2_1[4],1/2,1,0,1,delta_modadd_2_1[4],1/2,1,1,1,1/2,a_modadd_2_1[4]+delta_modadd_2_1[4]-2*a_modadd_2_1[4]*delta_modadd_2_1[4]]);
constraint w_modadd_2_1[5]=int(100*log2(phi_modadd_2_1[5]));
constraint table([key[62], modadd_2_1[6], pre_modadd_2_1[5], delta_modadd_2_1[6], phi_modadd_2_1[6]], [0,0,0,(a_modadd_2_1[5]+delta_modadd_2_1[5])/2,1,0,1,0,a_modadd_2_1[5],1/2,1,0,0,a_modadd_2_1[5],1/2,1,1,0,a_modadd_2_1[5],1-(a_modadd_2_1[5]+delta_modadd_2_1[5]-2*a_modadd_2_1[5]*delta_modadd_2_1[5]),0,1,1,delta_modadd_2_1[5],1/2,1,0,1,delta_modadd_2_1[5],1/2,1,1,1,1/2,a_modadd_2_1[5]+delta_modadd_2_1[5]-2*a_modadd_2_1[5]*delta_modadd_2_1[5]]);
constraint w_modadd_2_1[6]=int(100*log2(phi_modadd_2_1[6]));
constraint table([key[63], modadd_2_1[7], pre_modadd_2_1[6], delta_modadd_2_1[7], phi_modadd_2_1[7]], [0,0,0,(a_modadd_2_1[6]+delta_modadd_2_1[6])/2,1,0,1,0,a_modadd_2_1[6],1/2,1,0,0,a_modadd_2_1[6],1/2,1,1,0,a_modadd_2_1[6],1-(a_modadd_2_1[6]+delta_modadd_2_1[6]-2*a_modadd_2_1[6]*delta_modadd_2_1[6]),0,1,1,delta_modadd_2_1[6],1/2,1,0,1,delta_modadd_2_1[6],1/2,1,1,1,1/2,a_modadd_2_1[6]+delta_modadd_2_1[6]-2*a_modadd_2_1[6]*delta_modadd_2_1[6]]);
constraint w_modadd_2_1[7]=int(100*log2(phi_modadd_2_1[7]));
constraint p[18] = sum(w_modadd_2_1);
constraint pre_modadd_2_3[0] = (key[48] + modadd_2_3[0]) mod 2;
constraint a_modadd_2_3[0] = 0;
constraint pre_modadd_2_3[1] = (key[49] + modadd_2_3[1]) mod 2;
constraint a_modadd_2_3[1] = 0;
constraint pre_modadd_2_3[2] = (key[50] + modadd_2_3[2]) mod 2;
constraint a_modadd_2_3[2] = 1;
constraint pre_modadd_2_3[3] = (key[51] + modadd_2_3[3]) mod 2;
constraint a_modadd_2_3[3] = 1;
constraint pre_modadd_2_3[4] = (key[52] + modadd_2_3[4]) mod 2;
constraint a_modadd_2_3[4] = 0;
constraint pre_modadd_2_3[5] = (key[53] + modadd_2_3[5]) mod 2;
constraint a_modadd_2_3[5] = 0;
constraint pre_modadd_2_3[6] = (key[54] + modadd_2_3[6]) mod 2;
constraint a_modadd_2_3[6] = 0;
constraint pre_modadd_2_3[7] = (key[55] + modadd_2_3[7]) mod 2;
constraint a_modadd_2_3[7] = 0;
constraint phi_modadd_2_3[0] = 1;
constraint delta_modadd_2_3[0] = 0;
constraint w_modadd_2_3[0]=0;
constraint table([key[49], modadd_2_3[1], pre_modadd_2_3[0], delta_modadd_2_3[1], phi_modadd_2_3[1]], [0,0,0,(a_modadd_2_3[0]+delta_modadd_2_3[0])/2,1,0,1,0,a_modadd_2_3[0],1/2,1,0,0,a_modadd_2_3[0],1/2,1,1,0,a_modadd_2_3[0],1-(a_modadd_2_3[0]+delta_modadd_2_3[0]-2*a_modadd_2_3[0]*delta_modadd_2_3[0]),0,1,1,delta_modadd_2_3[0],1/2,1,0,1,delta_modadd_2_3[0],1/2,1,1,1,1/2,a_modadd_2_3[0]+delta_modadd_2_3[0]-2*a_modadd_2_3[0]*delta_modadd_2_3[0]]);
constraint w_modadd_2_3[1]=int(100*log2(phi_modadd_2_3[1]));
constraint table([key[50], modadd_2_3[2], pre_modadd_2_3[1], delta_modadd_2_3[2], phi_modadd_2_3[2]], [0,0,0,(a_modadd_2_3[1]+delta_modadd_2_3[1])/2,1,0,1,0,a_modadd_2_3[1],1/2,1,0,0,a_modadd_2_3[1],1/2,1,1,0,a_modadd_2_3[1],1-(a_modadd_2_3[1]+delta_modadd_2_3[1]-2*a_modadd_2_3[1]*delta_modadd_2_3[1]),0,1,1,delta_modadd_2_3[1],1/2,1,0,1,delta_modadd_2_3[1],1/2,1,1,1,1/2,a_modadd_2_3[1]+delta_modadd_2_3[1]-2*a_modadd_2_3[1]*delta_modadd_2_3[1]]);
constraint w_modadd_2_3[2]=int(100*log2(phi_modadd_2_3[2]));
constraint table([key[51], modadd_2_3[3], pre_modadd_2_3[2], delta_modadd_2_3[3], phi_modadd_2_3[3]], [0,0,0,(a_modadd_2_3[2]+delta_modadd_2_3[2])/2,1,0,1,0,a_modadd_2_3[2],1/2,1,0,0,a_modadd_2_3[2],1/2,1,1,0,a_modadd_2_3[2],1-(a_modadd_2_3[2]+delta_modadd_2_3[2]-2*a_modadd_2_3[2]*delta_modadd_2_3[2]),0,1,1,delta_modadd_2_3[2],1/2,1,0,1,delta_modadd_2_3[2],1/2,1,1,1,1/2,a_modadd_2_3[2]+delta_modadd_2_3[2]-2*a_modadd_2_3[2]*delta_modadd_2_3[2]]);
constraint w_modadd_2_3[3]=int(100*log2(phi_modadd_2_3[3]));
constraint table([key[52], modadd_2_3[4], pre_modadd_2_3[3], delta_modadd_2_3[4], phi_modadd_2_3[4]], [0,0,0,(a_modadd_2_3[3]+delta_modadd_2_3[3])/2,1,0,1,0,a_modadd_2_3[3],1/2,1,0,0,a_modadd_2_3[3],1/2,1,1,0,a_modadd_2_3[3],1-(a_modadd_2_3[3]+delta_modadd_2_3[3]-2*a_modadd_2_3[3]*delta_modadd_2_3[3]),0,1,1,delta_modadd_2_3[3],1/2,1,0,1,delta_modadd_2_3[3],1/2,1,1,1,1/2,a_modadd_2_3[3]+delta_modadd_2_3[3]-2*a_modadd_2_3[3]*delta_modadd_2_3[3]]);
constraint w_modadd_2_3[4]=int(100*log2(phi_modadd_2_3[4]));
constraint table([key[53], modadd_2_3[5], pre_modadd_2_3[4], delta_modadd_2_3[5], phi_modadd_2_3[5]], [0,0,0,(a_modadd_2_3[4]+delta_modadd_2_3[4])/2,1,0,1,0,a_modadd_2_3[4],1/2,1,0,0,a_modadd_2_3[4],1/2,1,1,0,a_modadd_2_3[4],1-(a_modadd_2_3[4]+delta_modadd_2_3[4]-2*a_modadd_2_3[4]*delta_modadd_2_3[4]),0,1,1,delta_modadd_2_3[4],1/2,1,0,1,delta_modadd_2_3[4],1/2,1,1,1,1/2,a_modadd_2_3[4]+delta_modadd_2_3[4]-2*a_modadd_2_3[4]*delta_modadd_2_3[4]]);
constraint w_modadd_2_3[5]=int(100*log2(phi_modadd_2_3[5]));
constraint table([key[54], modadd_2_3[6], pre_modadd_2_3[5], delta_modadd_2_3[6], phi_modadd_2_3[6]], [0,0,0,(a_modadd_2_3[5]+delta_modadd_2_3[5])/2,1,0,1,0,a_modadd_2_3[5],1/2,1,0,0,a_modadd_2_3[5],1/2,1,1,0,a_modadd_2_3[5],1-(a_modadd_2_3[5]+delta_modadd_2_3[5]-2*a_modadd_2_3[5]*delta_modadd_2_3[5]),0,1,1,delta_modadd_2_3[5],1/2,1,0,1,delta_modadd_2_3[5],1/2,1,1,1,1/2,a_modadd_2_3[5]+delta_modadd_2_3[5]-2*a_modadd_2_3[5]*delta_modadd_2_3[5]]);
constraint w_modadd_2_3[6]=int(100*log2(phi_modadd_2_3[6]));
constraint table([key[55], modadd_2_3[7], pre_modadd_2_3[6], delta_modadd_2_3[7], phi_modadd_2_3[7]], [0,0,0,(a_modadd_2_3[6]+delta_modadd_2_3[6])/2,1,0,1,0,a_modadd_2_3[6],1/2,1,0,0,a_modadd_2_3[6],1/2,1,1,0,a_modadd_2_3[6],1-(a_modadd_2_3[6]+delta_modadd_2_3[6]-2*a_modadd_2_3[6]*delta_modadd_2_3[6]),0,1,1,delta_modadd_2_3[6],1/2,1,0,1,delta_modadd_2_3[6],1/2,1,1,1,1/2,a_modadd_2_3[6]+delta_modadd_2_3[6]-2*a_modadd_2_3[6]*delta_modadd_2_3[6]]);
constraint w_modadd_2_3[7]=int(100*log2(phi_modadd_2_3[7]));
constraint p[19] = sum(w_modadd_2_3);
constraint pre_modadd_2_5[0] = (key[40] + modadd_2_5[0]) mod 2;
constraint a_modadd_2_5[0] = 0;
constraint pre_modadd_2_5[1] = (key[41] + modadd_2_5[1]) mod 2;
constraint a_modadd_2_5[1] = 0;
constraint pre_modadd_2_5[2] = (key[42] + modadd_2_5[2]) mod 2;
constraint a_modadd_2_5[2] = 0;
constraint pre_modadd_2_5[3] = (key[43] + modadd_2_5[3]) mod 2;
constraint a_modadd_2_5[3] = 1;
constraint pre_modadd_2_5[4] = (key[44] + modadd_2_5[4]) mod 2;
constraint a_modadd_2_5[4] = 1;
constraint pre_modadd_2_5[5] = (key[45] + modadd_2_5[5]) mod 2;
constraint a_modadd_2_5[5] = 0;
constraint pre_modadd_2_5[6] = (key[46] + modadd_2_5[6]) mod 2;
constraint a_modadd_2_5[6] = 0;
constraint pre_modadd_2_5[7] = (key[47] + modadd_2_5[7]) mod 2;
constraint a_modadd_2_5[7] = 0;
constraint phi_modadd_2_5[0] = 1;
constraint delta_modadd_2_5[0] = 0;
constraint w_modadd_2_5[0]=0;
constraint table([key[41], modadd_2_5[1], pre_modadd_2_5[0], delta_modadd_2_5[1], phi_modadd_2_5[1]], [0,0,0,(a_modadd_2_5[0]+delta_modadd_2_5[0])/2,1,0,1,0,a_modadd_2_5[0],1/2,1,0,0,a_modadd_2_5[0],1/2,1,1,0,a_modadd_2_5[0],1-(a_modadd_2_5[0]+delta_modadd_2_5[0]-2*a_modadd_2_5[0]*delta_modadd_2_5[0]),0,1,1,delta_modadd_2_5[0],1/2,1,0,1,delta_modadd_2_5[0],1/2,1,1,1,1/2,a_modadd_2_5[0]+delta_modadd_2_5[0]-2*a_modadd_2_5[0]*delta_modadd_2_5[0]]);
constraint w_modadd_2_5[1]=int(100*log2(phi_modadd_2_5[1]));
constraint table([key[42], modadd_2_5[2], pre_modadd_2_5[1], delta_modadd_2_5[2], phi_modadd_2_5[2]], [0,0,0,(a_modadd_2_5[1]+delta_modadd_2_5[1])/2,1,0,1,0,a_modadd_2_5[1],1/2,1,0,0,a_modadd_2_5[1],1/2,1,1,0,a_modadd_2_5[1],1-(a_modadd_2_5[1]+delta_modadd_2_5[1]-2*a_modadd_2_5[1]*delta_modadd_2_5[1]),0,1,1,delta_modadd_2_5[1],1/2,1,0,1,delta_modadd_2_5[1],1/2,1,1,1,1/2,a_modadd_2_5[1]+delta_modadd_2_5[1]-2*a_modadd_2_5[1]*delta_modadd_2_5[1]]);
constraint w_modadd_2_5[2]=int(100*log2(phi_modadd_2_5[2]));
constraint table([key[43], modadd_2_5[3], pre_modadd_2_5[2], delta_modadd_2_5[3], phi_modadd_2_5[3]], [0,0,0,(a_modadd_2_5[2]+delta_modadd_2_5[2])/2,1,0,1,0,a_modadd_2_5[2],1/2,1,0,0,a_modadd_2_5[2],1/2,1,1,0,a_modadd_2_5[2],1-(a_modadd_2_5[2]+delta_modadd_2_5[2]-2*a_modadd_2_5[2]*delta_modadd_2_5[2]),0,1,1,delta_modadd_2_5[2],1/2,1,0,1,delta_modadd_2_5[2],1/2,1,1,1,1/2,a_modadd_2_5[2]+delta_modadd_2_5[2]-2*a_modadd_2_5[2]*delta_modadd_2_5[2]]);
constraint w_modadd_2_5[3]=int(100*log2(phi_modadd_2_5[3]));
constraint table([key[44], modadd_2_5[4], pre_modadd_2_5[3], delta_modadd_2_5[4], phi_modadd_2_5[4]], [0,0,0,(a_modadd_2_5[3]+delta_modadd_2_5[3])/2,1,0,1,0,a_modadd_2_5[3],1/2,1,0,0,a_modadd_2_5[3],1/2,1,1,0,a_modadd_2_5[3],1-(a_modadd_2_5[3]+delta_modadd_2_5[3]-2*a_modadd_2_5[3]*delta_modadd_2_5[3]),0,1,1,delta_modadd_2_5[3],1/2,1,0,1,delta_modadd_2_5[3],1/2,1,1,1,1/2,a_modadd_2_5[3]+delta_modadd_2_5[3]-2*a_modadd_2_5[3]*delta_modadd_2_5[3]]);
constraint w_modadd_2_5[4]=int(100*log2(phi_modadd_2_5[4]));
constraint table([key[45], modadd_2_5[5], pre_modadd_2_5[4], delta_modadd_2_5[5], phi_modadd_2_5[5]], [0,0,0,(a_modadd_2_5[4]+delta_modadd_2_5[4])/2,1,0,1,0,a_modadd_2_5[4],1/2,1,0,0,a_modadd_2_5[4],1/2,1,1,0,a_modadd_2_5[4],1-(a_modadd_2_5[4]+delta_modadd_2_5[4]-2*a_modadd_2_5[4]*delta_modadd_2_5[4]),0,1,1,delta_modadd_2_5[4],1/2,1,0,1,delta_modadd_2_5[4],1/2,1,1,1,1/2,a_modadd_2_5[4]+delta_modadd_2_5[4]-2*a_modadd_2_5[4]*delta_modadd_2_5[4]]);
constraint w_modadd_2_5[5]=int(100*log2(phi_modadd_2_5[5]));
constraint table([key[46], modadd_2_5[6], pre_modadd_2_5[5], delta_modadd_2_5[6], phi_modadd_2_5[6]], [0,0,0,(a_modadd_2_5[5]+delta_modadd_2_5[5])/2,1,0,1,0,a_modadd_2_5[5],1/2,1,0,0,a_modadd_2_5[5],1/2,1,1,0,a_modadd_2_5[5],1-(a_modadd_2_5[5]+delta_modadd_2_5[5]-2*a_modadd_2_5[5]*delta_modadd_2_5[5]),0,1,1,delta_modadd_2_5[5],1/2,1,0,1,delta_modadd_2_5[5],1/2,1,1,1,1/2,a_modadd_2_5[5]+delta_modadd_2_5[5]-2*a_modadd_2_5[5]*delta_modadd_2_5[5]]);
constraint w_modadd_2_5[6]=int(100*log2(phi_modadd_2_5[6]));
constraint table([key[47], modadd_2_5[7], pre_modadd_2_5[6], delta_modadd_2_5[7], phi_modadd_2_5[7]], [0,0,0,(a_modadd_2_5[6]+delta_modadd_2_5[6])/2,1,0,1,0,a_modadd_2_5[6],1/2,1,0,0,a_modadd_2_5[6],1/2,1,1,0,a_modadd_2_5[6],1-(a_modadd_2_5[6]+delta_modadd_2_5[6]-2*a_modadd_2_5[6]*delta_modadd_2_5[6]),0,1,1,delta_modadd_2_5[6],1/2,1,0,1,delta_modadd_2_5[6],1/2,1,1,1,1/2,a_modadd_2_5[6]+delta_modadd_2_5[6]-2*a_modadd_2_5[6]*delta_modadd_2_5[6]]);
constraint w_modadd_2_5[7]=int(100*log2(phi_modadd_2_5[7]));
constraint p[20] = sum(w_modadd_2_5);
constraint pre_modadd_2_7[0] = (key[32] + modadd_2_7[0]) mod 2;
constraint a_modadd_2_7[0] = 0;
constraint pre_modadd_2_7[1] = (key[33] + modadd_2_7[1]) mod 2;
constraint a_modadd_2_7[1] = 1;
constraint pre_modadd_2_7[2] = (key[34] + modadd_2_7[2]) mod 2;
constraint a_modadd_2_7[2] = 0;
constraint pre_modadd_2_7[3] = (key[35] + modadd_2_7[3]) mod 2;
constraint a_modadd_2_7[3] = 0;
constraint pre_modadd_2_7[4] = (key[36] + modadd_2_7[4]) mod 2;
constraint a_modadd_2_7[4] = 1;
constraint pre_modadd_2_7[5] = (key[37] + modadd_2_7[5]) mod 2;
constraint a_modadd_2_7[5] = 1;
constraint pre_modadd_2_7[6] = (key[38] + modadd_2_7[6]) mod 2;
constraint a_modadd_2_7[6] = 0;
constraint pre_modadd_2_7[7] = (key[39] + modadd_2_7[7]) mod 2;
constraint a_modadd_2_7[7] = 0;
constraint phi_modadd_2_7[0] = 1;
constraint delta_modadd_2_7[0] = 0;
constraint w_modadd_2_7[0]=0;
constraint table([key[33], modadd_2_7[1], pre_modadd_2_7[0], delta_modadd_2_7[1], phi_modadd_2_7[1]], [0,0,0,(a_modadd_2_7[0]+delta_modadd_2_7[0])/2,1,0,1,0,a_modadd_2_7[0],1/2,1,0,0,a_modadd_2_7[0],1/2,1,1,0,a_modadd_2_7[0],1-(a_modadd_2_7[0]+delta_modadd_2_7[0]-2*a_modadd_2_7[0]*delta_modadd_2_7[0]),0,1,1,delta_modadd_2_7[0],1/2,1,0,1,delta_modadd_2_7[0],1/2,1,1,1,1/2,a_modadd_2_7[0]+delta_modadd_2_7[0]-2*a_modadd_2_7[0]*delta_modadd_2_7[0]]);
constraint w_modadd_2_7[1]=int(100*log2(phi_modadd_2_7[1]));
constraint table([key[34], modadd_2_7[2], pre_modadd_2_7[1], delta_modadd_2_7[2], phi_modadd_2_7[2]], [0,0,0,(a_modadd_2_7[1]+delta_modadd_2_7[1])/2,1,0,1,0,a_modadd_2_7[1],1/2,1,0,0,a_modadd_2_7[1],1/2,1,1,0,a_modadd_2_7[1],1-(a_modadd_2_7[1]+delta_modadd_2_7[1]-2*a_modadd_2_7[1]*delta_modadd_2_7[1]),0,1,1,delta_modadd_2_7[1],1/2,1,0,1,delta_modadd_2_7[1],1/2,1,1,1,1/2,a_modadd_2_7[1]+delta_modadd_2_7[1]-2*a_modadd_2_7[1]*delta_modadd_2_7[1]]);
constraint w_modadd_2_7[2]=int(100*log2(phi_modadd_2_7[2]));
constraint table([key[35], modadd_2_7[3], pre_modadd_2_7[2], delta_modadd_2_7[3], phi_modadd_2_7[3]], [0,0,0,(a_modadd_2_7[2]+delta_modadd_2_7[2])/2,1,0,1,0,a_modadd_2_7[2],1/2,1,0,0,a_modadd_2_7[2],1/2,1,1,0,a_modadd_2_7[2],1-(a_modadd_2_7[2]+delta_modadd_2_7[2]-2*a_modadd_2_7[2]*delta_modadd_2_7[2]),0,1,1,delta_modadd_2_7[2],1/2,1,0,1,delta_modadd_2_7[2],1/2,1,1,1,1/2,a_modadd_2_7[2]+delta_modadd_2_7[2]-2*a_modadd_2_7[2]*delta_modadd_2_7[2]]);
constraint w_modadd_2_7[3]=int(100*log2(phi_modadd_2_7[3]));
constraint table([key[36], modadd_2_7[4], pre_modadd_2_7[3], delta_modadd_2_7[4], phi_modadd_2_7[4]], [0,0,0,(a_modadd_2_7[3]+delta_modadd_2_7[3])/2,1,0,1,0,a_modadd_2_7[3],1/2,1,0,0,a_modadd_2_7[3],1/2,1,1,0,a_modadd_2_7[3],1-(a_modadd_2_7[3]+delta_modadd_2_7[3]-2*a_modadd_2_7[3]*delta_modadd_2_7[3]),0,1,1,delta_modadd_2_7[3],1/2,1,0,1,delta_modadd_2_7[3],1/2,1,1,1,1/2,a_modadd_2_7[3]+delta_modadd_2_7[3]-2*a_modadd_2_7[3]*delta_modadd_2_7[3]]);
constraint w_modadd_2_7[4]=int(100*log2(phi_modadd_2_7[4]));
constraint table([key[37], modadd_2_7[5], pre_modadd_2_7[4], delta_modadd_2_7[5], phi_modadd_2_7[5]], [0,0,0,(a_modadd_2_7[4]+delta_modadd_2_7[4])/2,1,0,1,0,a_modadd_2_7[4],1/2,1,0,0,a_modadd_2_7[4],1/2,1,1,0,a_modadd_2_7[4],1-(a_modadd_2_7[4]+delta_modadd_2_7[4]-2*a_modadd_2_7[4]*delta_modadd_2_7[4]),0,1,1,delta_modadd_2_7[4],1/2,1,0,1,delta_modadd_2_7[4],1/2,1,1,1,1/2,a_modadd_2_7[4]+delta_modadd_2_7[4]-2*a_modadd_2_7[4]*delta_modadd_2_7[4]]);
constraint w_modadd_2_7[5]=int(100*log2(phi_modadd_2_7[5]));
constraint table([key[38], modadd_2_7[6], pre_modadd_2_7[5], delta_modadd_2_7[6], phi_modadd_2_7[6]], [0,0,0,(a_modadd_2_7[5]+delta_modadd_2_7[5])/2,1,0,1,0,a_modadd_2_7[5],1/2,1,0,0,a_modadd_2_7[5],1/2,1,1,0,a_modadd_2_7[5],1-(a_modadd_2_7[5]+delta_modadd_2_7[5]-2*a_modadd_2_7[5]*delta_modadd_2_7[5]),0,1,1,delta_modadd_2_7[5],1/2,1,0,1,delta_modadd_2_7[5],1/2,1,1,1,1/2,a_modadd_2_7[5]+delta_modadd_2_7[5]-2*a_modadd_2_7[5]*delta_modadd_2_7[5]]);
constraint w_modadd_2_7[6]=int(100*log2(phi_modadd_2_7[6]));
constraint table([key[39], modadd_2_7[7], pre_modadd_2_7[6], delta_modadd_2_7[7], phi_modadd_2_7[7]], [0,0,0,(a_modadd_2_7[6]+delta_modadd_2_7[6])/2,1,0,1,0,a_modadd_2_7[6],1/2,1,0,0,a_modadd_2_7[6],1/2,1,1,0,a_modadd_2_7[6],1-(a_modadd_2_7[6]+delta_modadd_2_7[6]-2*a_modadd_2_7[6]*delta_modadd_2_7[6]),0,1,1,delta_modadd_2_7[6],1/2,1,0,1,delta_modadd_2_7[6],1/2,1,1,1,1/2,a_modadd_2_7[6]+delta_modadd_2_7[6]-2*a_modadd_2_7[6]*delta_modadd_2_7[6]]);
constraint w_modadd_2_7[7]=int(100*log2(phi_modadd_2_7[7]));
constraint p[21] = sum(w_modadd_2_7);
constraint rot_2_8[0] = xor_1_21[3];
constraint rot_2_8[1] = xor_1_21[4];
constraint rot_2_8[2] = xor_1_21[5];
constraint rot_2_8[3] = xor_1_21[6];
constraint rot_2_8[4] = xor_1_21[7];
constraint rot_2_8[5] = xor_1_21[0];
constraint rot_2_8[6] = xor_1_21[1];
constraint rot_2_8[7] = xor_1_21[2];
constraint rot_2_9[0] = xor_1_21[4];
constraint rot_2_9[1] = xor_1_21[5];
constraint rot_2_9[2] = xor_1_21[6];
constraint rot_2_9[3] = xor_1_21[7];
constraint rot_2_9[4] = xor_1_21[0];
constraint rot_2_9[5] = xor_1_21[1];
constraint rot_2_9[6] = xor_1_21[2];
constraint rot_2_9[7] = xor_1_21[3];
constraint rot_2_10[0] = xor_1_21[6];
constraint rot_2_10[1] = xor_1_21[7];
constraint rot_2_10[2] = xor_1_21[0];
constraint rot_2_10[3] = xor_1_21[1];
constraint rot_2_10[4] = xor_1_21[2];
constraint rot_2_10[5] = xor_1_21[3];
constraint rot_2_10[6] = xor_1_21[4];
constraint rot_2_10[7] = xor_1_21[5];
constraint xor_2_11[0] = (rot_2_8[0] + rot_2_9[0]) mod 2;
constraint xor_2_11[1] = (rot_2_8[1] + rot_2_9[1]) mod 2;
constraint xor_2_11[2] = (rot_2_8[2] + rot_2_9[2]) mod 2;
constraint xor_2_11[3] = (rot_2_8[3] + rot_2_9[3]) mod 2;
constraint xor_2_11[4] = (rot_2_8[4] + rot_2_9[4]) mod 2;
constraint xor_2_11[5] = (rot_2_8[5] + rot_2_9[5]) mod 2;
constraint xor_2_11[6] = (rot_2_8[6] + rot_2_9[6]) mod 2;
constraint xor_2_11[7] = (rot_2_8[7] + rot_2_9[7]) mod 2;
constraint xor_2_12[0] = (xor_2_11[0] + rot_2_10[0]) mod 2;
constraint xor_2_12[1] = (xor_2_11[1] + rot_2_10[1]) mod 2;
constraint xor_2_12[2] = (xor_2_11[2] + rot_2_10[2]) mod 2;
constraint xor_2_12[3] = (xor_2_11[3] + rot_2_10[3]) mod 2;
constraint xor_2_12[4] = (xor_2_11[4] + rot_2_10[4]) mod 2;
constraint xor_2_12[5] = (xor_2_11[5] + rot_2_10[5]) mod 2;
constraint xor_2_12[6] = (xor_2_11[6] + rot_2_10[6]) mod 2;
constraint xor_2_12[7] = (xor_2_11[7] + rot_2_10[7]) mod 2;
constraint xor_2_13[0] = (xor_2_12[0] + modadd_2_5[0]) mod 2;
constraint xor_2_13[1] = (xor_2_12[1] + modadd_2_5[1]) mod 2;
constraint xor_2_13[2] = (xor_2_12[2] + modadd_2_5[2]) mod 2;
constraint xor_2_13[3] = (xor_2_12[3] + modadd_2_5[3]) mod 2;
constraint xor_2_13[4] = (xor_2_12[4] + modadd_2_5[4]) mod 2;
constraint xor_2_13[5] = (xor_2_12[5] + modadd_2_5[5]) mod 2;
constraint xor_2_13[6] = (xor_2_12[6] + modadd_2_5[6]) mod 2;
constraint xor_2_13[7] = (xor_2_12[7] + modadd_2_5[7]) mod 2;
constraint pre_modadd_2_14_0[0] = xor_0_25[0];
constraint pre_modadd_2_14_0[1] = xor_0_25[1];
constraint pre_modadd_2_14_0[2] = xor_0_25[2];
constraint pre_modadd_2_14_0[3] = xor_0_25[3];
constraint pre_modadd_2_14_0[4] = xor_0_25[4];
constraint pre_modadd_2_14_0[5] = xor_0_25[5];
constraint pre_modadd_2_14_0[6] = xor_0_25[6];
constraint pre_modadd_2_14_0[7] = xor_0_25[7];
constraint pre_modadd_2_14_1[0] = xor_2_13[0];
constraint pre_modadd_2_14_1[1] = xor_2_13[1];
constraint pre_modadd_2_14_1[2] = xor_2_13[2];
constraint pre_modadd_2_14_1[3] = xor_2_13[3];
constraint pre_modadd_2_14_1[4] = xor_2_13[4];
constraint pre_modadd_2_14_1[5] = xor_2_13[5];
constraint pre_modadd_2_14_1[6] = xor_2_13[6];
constraint pre_modadd_2_14_1[7] = xor_2_13[7];
constraint forall(j in 0..7)(if eq_modadd_2_14[j] = 1 then (sum([pre_modadd_2_14_1[j], pre_modadd_2_14_0[j], modadd_2_14[j]]) mod 2) = Shi_pre_modadd_2_14_0[j] else true endif) /\ p[22] = 800-100 * sum(eq_modadd_2_14);
constraint rot_2_15[0] = modadd_1_28[1];
constraint rot_2_15[1] = modadd_1_28[2];
constraint rot_2_15[2] = modadd_1_28[3];
constraint rot_2_15[3] = modadd_1_28[4];
constraint rot_2_15[4] = modadd_1_28[5];
constraint rot_2_15[5] = modadd_1_28[6];
constraint rot_2_15[6] = modadd_1_28[7];
constraint rot_2_15[7] = modadd_1_28[0];
constraint rot_2_16[0] = modadd_1_28[2];
constraint rot_2_16[1] = modadd_1_28[3];
constraint rot_2_16[2] = modadd_1_28[4];
constraint rot_2_16[3] = modadd_1_28[5];
constraint rot_2_16[4] = modadd_1_28[6];
constraint rot_2_16[5] = modadd_1_28[7];
constraint rot_2_16[6] = modadd_1_28[0];
constraint rot_2_16[7] = modadd_1_28[1];
constraint rot_2_17[0] = modadd_1_28[7];
constraint rot_2_17[1] = modadd_1_28[0];
constraint rot_2_17[2] = modadd_1_28[1];
constraint rot_2_17[3] = modadd_1_28[2];
constraint rot_2_17[4] = modadd_1_28[3];
constraint rot_2_17[5] = modadd_1_28[4];
constraint rot_2_17[6] = modadd_1_28[5];
constraint rot_2_17[7] = modadd_1_28[6];
constraint xor_2_18[0] = (rot_2_15[0] + rot_2_16[0]) mod 2;
constraint xor_2_18[1] = (rot_2_15[1] + rot_2_16[1]) mod 2;
constraint xor_2_18[2] = (rot_2_15[2] + rot_2_16[2]) mod 2;
constraint xor_2_18[3] = (rot_2_15[3] + rot_2_16[3]) mod 2;
constraint xor_2_18[4] = (rot_2_15[4] + rot_2_16[4]) mod 2;
constraint xor_2_18[5] = (rot_2_15[5] + rot_2_16[5]) mod 2;
constraint xor_2_18[6] = (rot_2_15[6] + rot_2_16[6]) mod 2;
constraint xor_2_18[7] = (rot_2_15[7] + rot_2_16[7]) mod 2;
constraint xor_2_19[0] = (xor_2_18[0] + rot_2_17[0]) mod 2;
constraint xor_2_19[1] = (xor_2_18[1] + rot_2_17[1]) mod 2;
constraint xor_2_19[2] = (xor_2_18[2] + rot_2_17[2]) mod 2;
constraint xor_2_19[3] = (xor_2_18[3] + rot_2_17[3]) mod 2;
constraint xor_2_19[4] = (xor_2_18[4] + rot_2_17[4]) mod 2;
constraint xor_2_19[5] = (xor_2_18[5] + rot_2_17[5]) mod 2;
constraint xor_2_19[6] = (xor_2_18[6] + rot_2_17[6]) mod 2;
constraint xor_2_19[7] = (xor_2_18[7] + rot_2_17[7]) mod 2;
constraint pre_modadd_2_20_0[0] = xor_2_19[0];
constraint pre_modadd_2_20_0[1] = xor_2_19[1];
constraint pre_modadd_2_20_0[2] = xor_2_19[2];
constraint pre_modadd_2_20_0[3] = xor_2_19[3];
constraint pre_modadd_2_20_0[4] = xor_2_19[4];
constraint pre_modadd_2_20_0[5] = xor_2_19[5];
constraint pre_modadd_2_20_0[6] = xor_2_19[6];
constraint pre_modadd_2_20_0[7] = xor_2_19[7];
constraint pre_modadd_2_20_1[0] = modadd_2_3[0];
constraint pre_modadd_2_20_1[1] = modadd_2_3[1];
constraint pre_modadd_2_20_1[2] = modadd_2_3[2];
constraint pre_modadd_2_20_1[3] = modadd_2_3[3];
constraint pre_modadd_2_20_1[4] = modadd_2_3[4];
constraint pre_modadd_2_20_1[5] = modadd_2_3[5];
constraint pre_modadd_2_20_1[6] = modadd_2_3[6];
constraint pre_modadd_2_20_1[7] = modadd_2_3[7];
constraint forall(j in 0..7)(if eq_modadd_2_20[j] = 1 then (sum([pre_modadd_2_20_1[j], pre_modadd_2_20_0[j], modadd_2_20[j]]) mod 2) = Shi_pre_modadd_2_20_0[j] else true endif) /\ p[23] = 800-100 * sum(eq_modadd_2_20);
constraint xor_2_21[0] = (modadd_0_32[0] + modadd_2_20[0]) mod 2;
constraint xor_2_21[1] = (modadd_0_32[1] + modadd_2_20[1]) mod 2;
constraint xor_2_21[2] = (modadd_0_32[2] + modadd_2_20[2]) mod 2;
constraint xor_2_21[3] = (modadd_0_32[3] + modadd_2_20[3]) mod 2;
constraint xor_2_21[4] = (modadd_0_32[4] + modadd_2_20[4]) mod 2;
constraint xor_2_21[5] = (modadd_0_32[5] + modadd_2_20[5]) mod 2;
constraint xor_2_21[6] = (modadd_0_32[6] + modadd_2_20[6]) mod 2;
constraint xor_2_21[7] = (modadd_0_32[7] + modadd_2_20[7]) mod 2;
constraint rot_2_22[0] = xor_1_35[3];
constraint rot_2_22[1] = xor_1_35[4];
constraint rot_2_22[2] = xor_1_35[5];
constraint rot_2_22[3] = xor_1_35[6];
constraint rot_2_22[4] = xor_1_35[7];
constraint rot_2_22[5] = xor_1_35[0];
constraint rot_2_22[6] = xor_1_35[1];
constraint rot_2_22[7] = xor_1_35[2];
constraint rot_2_23[0] = xor_1_35[4];
constraint rot_2_23[1] = xor_1_35[5];
constraint rot_2_23[2] = xor_1_35[6];
constraint rot_2_23[3] = xor_1_35[7];
constraint rot_2_23[4] = xor_1_35[0];
constraint rot_2_23[5] = xor_1_35[1];
constraint rot_2_23[6] = xor_1_35[2];
constraint rot_2_23[7] = xor_1_35[3];
constraint rot_2_24[0] = xor_1_35[6];
constraint rot_2_24[1] = xor_1_35[7];
constraint rot_2_24[2] = xor_1_35[0];
constraint rot_2_24[3] = xor_1_35[1];
constraint rot_2_24[4] = xor_1_35[2];
constraint rot_2_24[5] = xor_1_35[3];
constraint rot_2_24[6] = xor_1_35[4];
constraint rot_2_24[7] = xor_1_35[5];
constraint xor_2_25[0] = (rot_2_22[0] + rot_2_23[0]) mod 2;
constraint xor_2_25[1] = (rot_2_22[1] + rot_2_23[1]) mod 2;
constraint xor_2_25[2] = (rot_2_22[2] + rot_2_23[2]) mod 2;
constraint xor_2_25[3] = (rot_2_22[3] + rot_2_23[3]) mod 2;
constraint xor_2_25[4] = (rot_2_22[4] + rot_2_23[4]) mod 2;
constraint xor_2_25[5] = (rot_2_22[5] + rot_2_23[5]) mod 2;
constraint xor_2_25[6] = (rot_2_22[6] + rot_2_23[6]) mod 2;
constraint xor_2_25[7] = (rot_2_22[7] + rot_2_23[7]) mod 2;
constraint xor_2_26[0] = (xor_2_25[0] + rot_2_24[0]) mod 2;
constraint xor_2_26[1] = (xor_2_25[1] + rot_2_24[1]) mod 2;
constraint xor_2_26[2] = (xor_2_25[2] + rot_2_24[2]) mod 2;
constraint xor_2_26[3] = (xor_2_25[3] + rot_2_24[3]) mod 2;
constraint xor_2_26[4] = (xor_2_25[4] + rot_2_24[4]) mod 2;
constraint xor_2_26[5] = (xor_2_25[5] + rot_2_24[5]) mod 2;
constraint xor_2_26[6] = (xor_2_25[6] + rot_2_24[6]) mod 2;
constraint xor_2_26[7] = (xor_2_25[7] + rot_2_24[7]) mod 2;
constraint xor_2_27[0] = (xor_2_26[0] + modadd_2_1[0]) mod 2;
constraint xor_2_27[1] = (xor_2_26[1] + modadd_2_1[1]) mod 2;
constraint xor_2_27[2] = (xor_2_26[2] + modadd_2_1[2]) mod 2;
constraint xor_2_27[3] = (xor_2_26[3] + modadd_2_1[3]) mod 2;
constraint xor_2_27[4] = (xor_2_26[4] + modadd_2_1[4]) mod 2;
constraint xor_2_27[5] = (xor_2_26[5] + modadd_2_1[5]) mod 2;
constraint xor_2_27[6] = (xor_2_26[6] + modadd_2_1[6]) mod 2;
constraint xor_2_27[7] = (xor_2_26[7] + modadd_2_1[7]) mod 2;
constraint pre_modadd_2_28_0[0] = xor_0_39[0];
constraint pre_modadd_2_28_0[1] = xor_0_39[1];
constraint pre_modadd_2_28_0[2] = xor_0_39[2];
constraint pre_modadd_2_28_0[3] = xor_0_39[3];
constraint pre_modadd_2_28_0[4] = xor_0_39[4];
constraint pre_modadd_2_28_0[5] = xor_0_39[5];
constraint pre_modadd_2_28_0[6] = xor_0_39[6];
constraint pre_modadd_2_28_0[7] = xor_0_39[7];
constraint pre_modadd_2_28_1[0] = xor_2_27[0];
constraint pre_modadd_2_28_1[1] = xor_2_27[1];
constraint pre_modadd_2_28_1[2] = xor_2_27[2];
constraint pre_modadd_2_28_1[3] = xor_2_27[3];
constraint pre_modadd_2_28_1[4] = xor_2_27[4];
constraint pre_modadd_2_28_1[5] = xor_2_27[5];
constraint pre_modadd_2_28_1[6] = xor_2_27[6];
constraint pre_modadd_2_28_1[7] = xor_2_27[7];
constraint forall(j in 0..7)(if eq_modadd_2_28[j] = 1 then (sum([pre_modadd_2_28_1[j], pre_modadd_2_28_0[j], modadd_2_28[j]]) mod 2) = Shi_pre_modadd_2_28_0[j] else true endif) /\ p[24] = 800-100 * sum(eq_modadd_2_28);
constraint rot_2_29[0] = modadd_1_14[1];
constraint rot_2_29[1] = modadd_1_14[2];
constraint rot_2_29[2] = modadd_1_14[3];
constraint rot_2_29[3] = modadd_1_14[4];
constraint rot_2_29[4] = modadd_1_14[5];
constraint rot_2_29[5] = modadd_1_14[6];
constraint rot_2_29[6] = modadd_1_14[7];
constraint rot_2_29[7] = modadd_1_14[0];
constraint rot_2_30[0] = modadd_1_14[2];
constraint rot_2_30[1] = modadd_1_14[3];
constraint rot_2_30[2] = modadd_1_14[4];
constraint rot_2_30[3] = modadd_1_14[5];
constraint rot_2_30[4] = modadd_1_14[6];
constraint rot_2_30[5] = modadd_1_14[7];
constraint rot_2_30[6] = modadd_1_14[0];
constraint rot_2_30[7] = modadd_1_14[1];
constraint rot_2_31[0] = modadd_1_14[7];
constraint rot_2_31[1] = modadd_1_14[0];
constraint rot_2_31[2] = modadd_1_14[1];
constraint rot_2_31[3] = modadd_1_14[2];
constraint rot_2_31[4] = modadd_1_14[3];
constraint rot_2_31[5] = modadd_1_14[4];
constraint rot_2_31[6] = modadd_1_14[5];
constraint rot_2_31[7] = modadd_1_14[6];
constraint xor_2_32[0] = (rot_2_29[0] + rot_2_30[0]) mod 2;
constraint xor_2_32[1] = (rot_2_29[1] + rot_2_30[1]) mod 2;
constraint xor_2_32[2] = (rot_2_29[2] + rot_2_30[2]) mod 2;
constraint xor_2_32[3] = (rot_2_29[3] + rot_2_30[3]) mod 2;
constraint xor_2_32[4] = (rot_2_29[4] + rot_2_30[4]) mod 2;
constraint xor_2_32[5] = (rot_2_29[5] + rot_2_30[5]) mod 2;
constraint xor_2_32[6] = (rot_2_29[6] + rot_2_30[6]) mod 2;
constraint xor_2_32[7] = (rot_2_29[7] + rot_2_30[7]) mod 2;
constraint xor_2_33[0] = (xor_2_32[0] + rot_2_31[0]) mod 2;
constraint xor_2_33[1] = (xor_2_32[1] + rot_2_31[1]) mod 2;
constraint xor_2_33[2] = (xor_2_32[2] + rot_2_31[2]) mod 2;
constraint xor_2_33[3] = (xor_2_32[3] + rot_2_31[3]) mod 2;
constraint xor_2_33[4] = (xor_2_32[4] + rot_2_31[4]) mod 2;
constraint xor_2_33[5] = (xor_2_32[5] + rot_2_31[5]) mod 2;
constraint xor_2_33[6] = (xor_2_32[6] + rot_2_31[6]) mod 2;
constraint xor_2_33[7] = (xor_2_32[7] + rot_2_31[7]) mod 2;
constraint pre_modadd_2_34_0[0] = xor_2_33[0];
constraint pre_modadd_2_34_0[1] = xor_2_33[1];
constraint pre_modadd_2_34_0[2] = xor_2_33[2];
constraint pre_modadd_2_34_0[3] = xor_2_33[3];
constraint pre_modadd_2_34_0[4] = xor_2_33[4];
constraint pre_modadd_2_34_0[5] = xor_2_33[5];
constraint pre_modadd_2_34_0[6] = xor_2_33[6];
constraint pre_modadd_2_34_0[7] = xor_2_33[7];
constraint pre_modadd_2_34_1[0] = modadd_2_7[0];
constraint pre_modadd_2_34_1[1] = modadd_2_7[1];
constraint pre_modadd_2_34_1[2] = modadd_2_7[2];
constraint pre_modadd_2_34_1[3] = modadd_2_7[3];
constraint pre_modadd_2_34_1[4] = modadd_2_7[4];
constraint pre_modadd_2_34_1[5] = modadd_2_7[5];
constraint pre_modadd_2_34_1[6] = modadd_2_7[6];
constraint pre_modadd_2_34_1[7] = modadd_2_7[7];
constraint forall(j in 0..7)(if eq_modadd_2_34[j] = 1 then (sum([pre_modadd_2_34_1[j], pre_modadd_2_34_0[j], modadd_2_34[j]]) mod 2) = Shi_pre_modadd_2_34_0[j] else true endif) /\ p[25] = 800-100 * sum(eq_modadd_2_34);
constraint xor_2_35[0] = (modadd_0_18[0] + modadd_2_34[0]) mod 2;
constraint xor_2_35[1] = (modadd_0_18[1] + modadd_2_34[1]) mod 2;
constraint xor_2_35[2] = (modadd_0_18[2] + modadd_2_34[2]) mod 2;
constraint xor_2_35[3] = (modadd_0_18[3] + modadd_2_34[3]) mod 2;
constraint xor_2_35[4] = (modadd_0_18[4] + modadd_2_34[4]) mod 2;
constraint xor_2_35[5] = (modadd_0_18[5] + modadd_2_34[5]) mod 2;
constraint xor_2_35[6] = (modadd_0_18[6] + modadd_2_34[6]) mod 2;
constraint xor_2_35[7] = (modadd_0_18[7] + modadd_2_34[7]) mod 2;
constraint pre_modadd_2_36_0[0] = xor_1_35[0];
constraint pre_modadd_2_36_0[1] = xor_1_35[1];
constraint pre_modadd_2_36_0[2] = xor_1_35[2];
constraint pre_modadd_2_36_0[3] = xor_1_35[3];
constraint pre_modadd_2_36_0[4] = xor_1_35[4];
constraint pre_modadd_2_36_0[5] = xor_1_35[5];
constraint pre_modadd_2_36_0[6] = xor_1_35[6];
constraint pre_modadd_2_36_0[7] = xor_1_35[7];
constraint pre_modadd_2_36_1[0] = key[120];
constraint pre_modadd_2_36_1[1] = key[121];
constraint pre_modadd_2_36_1[2] = key[122];
constraint pre_modadd_2_36_1[3] = key[123];
constraint pre_modadd_2_36_1[4] = key[124];
constraint pre_modadd_2_36_1[5] = key[125];
constraint pre_modadd_2_36_1[6] = key[126];
constraint pre_modadd_2_36_1[7] = key[127];
constraint forall(j in 0..7)(if eq_modadd_2_36[j] = 1 then (sum([pre_modadd_2_36_1[j], pre_modadd_2_36_0[j], modadd_2_36[j]]) mod 2) = Shi_pre_modadd_2_36_0[j] else true endif) /\ p[26] = 800-100 * sum(eq_modadd_2_36);
constraint xor_2_37[0] = (modadd_1_28[0] + key[112]) mod 2;
constraint xor_2_37[1] = (modadd_1_28[1] + key[113]) mod 2;
constraint xor_2_37[2] = (modadd_1_28[2] + key[114]) mod 2;
constraint xor_2_37[3] = (modadd_1_28[3] + key[115]) mod 2;
constraint xor_2_37[4] = (modadd_1_28[4] + key[116]) mod 2;
constraint xor_2_37[5] = (modadd_1_28[5] + key[117]) mod 2;
constraint xor_2_37[6] = (modadd_1_28[6] + key[118]) mod 2;
constraint xor_2_37[7] = (modadd_1_28[7] + key[119]) mod 2;
constraint pre_modadd_2_38_0[0] = xor_1_21[0];
constraint pre_modadd_2_38_0[1] = xor_1_21[1];
constraint pre_modadd_2_38_0[2] = xor_1_21[2];
constraint pre_modadd_2_38_0[3] = xor_1_21[3];
constraint pre_modadd_2_38_0[4] = xor_1_21[4];
constraint pre_modadd_2_38_0[5] = xor_1_21[5];
constraint pre_modadd_2_38_0[6] = xor_1_21[6];
constraint pre_modadd_2_38_0[7] = xor_1_21[7];
constraint pre_modadd_2_38_1[0] = key[104];
constraint pre_modadd_2_38_1[1] = key[105];
constraint pre_modadd_2_38_1[2] = key[106];
constraint pre_modadd_2_38_1[3] = key[107];
constraint pre_modadd_2_38_1[4] = key[108];
constraint pre_modadd_2_38_1[5] = key[109];
constraint pre_modadd_2_38_1[6] = key[110];
constraint pre_modadd_2_38_1[7] = key[111];
constraint forall(j in 0..7)(if eq_modadd_2_38[j] = 1 then (sum([pre_modadd_2_38_1[j], pre_modadd_2_38_0[j], modadd_2_38[j]]) mod 2) = Shi_pre_modadd_2_38_0[j] else true endif) /\ p[27] = 800-100 * sum(eq_modadd_2_38);
constraint xor_2_39[0] = (modadd_1_14[0] + key[96]) mod 2;
constraint xor_2_39[1] = (modadd_1_14[1] + key[97]) mod 2;
constraint xor_2_39[2] = (modadd_1_14[2] + key[98]) mod 2;
constraint xor_2_39[3] = (modadd_1_14[3] + key[99]) mod 2;
constraint xor_2_39[4] = (modadd_1_14[4] + key[100]) mod 2;
constraint xor_2_39[5] = (modadd_1_14[5] + key[101]) mod 2;
constraint xor_2_39[6] = (modadd_1_14[6] + key[102]) mod 2;
constraint xor_2_39[7] = (modadd_1_14[7] + key[103]) mod 2;
constraint intermediate_output_2_40[0] = modadd_2_1[0];
constraint intermediate_output_2_40[1] = modadd_2_1[1];
constraint intermediate_output_2_40[2] = modadd_2_1[2];
constraint intermediate_output_2_40[3] = modadd_2_1[3];
constraint intermediate_output_2_40[4] = modadd_2_1[4];
constraint intermediate_output_2_40[5] = modadd_2_1[5];
constraint intermediate_output_2_40[6] = modadd_2_1[6];
constraint intermediate_output_2_40[7] = modadd_2_1[7];
constraint intermediate_output_2_40[8] = modadd_2_3[0];
constraint intermediate_output_2_40[9] = modadd_2_3[1];
constraint intermediate_output_2_40[10] = modadd_2_3[2];
constraint intermediate_output_2_40[11] = modadd_2_3[3];
constraint intermediate_output_2_40[12] = modadd_2_3[4];
constraint intermediate_output_2_40[13] = modadd_2_3[5];
constraint intermediate_output_2_40[14] = modadd_2_3[6];
constraint intermediate_output_2_40[15] = modadd_2_3[7];
constraint intermediate_output_2_40[16] = modadd_2_5[0];
constraint intermediate_output_2_40[17] = modadd_2_5[1];
constraint intermediate_output_2_40[18] = modadd_2_5[2];
constraint intermediate_output_2_40[19] = modadd_2_5[3];
constraint intermediate_output_2_40[20] = modadd_2_5[4];
constraint intermediate_output_2_40[21] = modadd_2_5[5];
constraint intermediate_output_2_40[22] = modadd_2_5[6];
constraint intermediate_output_2_40[23] = modadd_2_5[7];
constraint intermediate_output_2_40[24] = modadd_2_7[0];
constraint intermediate_output_2_40[25] = modadd_2_7[1];
constraint intermediate_output_2_40[26] = modadd_2_7[2];
constraint intermediate_output_2_40[27] = modadd_2_7[3];
constraint intermediate_output_2_40[28] = modadd_2_7[4];
constraint intermediate_output_2_40[29] = modadd_2_7[5];
constraint intermediate_output_2_40[30] = modadd_2_7[6];
constraint intermediate_output_2_40[31] = modadd_2_7[7];
constraint cipher_output_2_41[0] = xor_2_35[0];
constraint cipher_output_2_41[1] = xor_2_35[1];
constraint cipher_output_2_41[2] = xor_2_35[2];
constraint cipher_output_2_41[3] = xor_2_35[3];
constraint cipher_output_2_41[4] = xor_2_35[4];
constraint cipher_output_2_41[5] = xor_2_35[5];
constraint cipher_output_2_41[6] = xor_2_35[6];
constraint cipher_output_2_41[7] = xor_2_35[7];
constraint cipher_output_2_41[8] = xor_2_39[0];
constraint cipher_output_2_41[9] = xor_2_39[1];
constraint cipher_output_2_41[10] = xor_2_39[2];
constraint cipher_output_2_41[11] = xor_2_39[3];
constraint cipher_output_2_41[12] = xor_2_39[4];
constraint cipher_output_2_41[13] = xor_2_39[5];
constraint cipher_output_2_41[14] = xor_2_39[6];
constraint cipher_output_2_41[15] = xor_2_39[7];
constraint cipher_output_2_41[16] = modadd_2_14[0];
constraint cipher_output_2_41[17] = modadd_2_14[1];
constraint cipher_output_2_41[18] = modadd_2_14[2];
constraint cipher_output_2_41[19] = modadd_2_14[3];
constraint cipher_output_2_41[20] = modadd_2_14[4];
constraint cipher_output_2_41[21] = modadd_2_14[5];
constraint cipher_output_2_41[22] = modadd_2_14[6];
constraint cipher_output_2_41[23] = modadd_2_14[7];
constraint cipher_output_2_41[24] = modadd_2_38[0];
constraint cipher_output_2_41[25] = modadd_2_38[1];
constraint cipher_output_2_41[26] = modadd_2_38[2];
constraint cipher_output_2_41[27] = modadd_2_38[3];
constraint cipher_output_2_41[28] = modadd_2_38[4];
constraint cipher_output_2_41[29] = modadd_2_38[5];
constraint cipher_output_2_41[30] = modadd_2_38[6];
constraint cipher_output_2_41[31] = modadd_2_38[7];
constraint cipher_output_2_41[32] = xor_2_21[0];
constraint cipher_output_2_41[33] = xor_2_21[1];
constraint cipher_output_2_41[34] = xor_2_21[2];
constraint cipher_output_2_41[35] = xor_2_21[3];
constraint cipher_output_2_41[36] = xor_2_21[4];
constraint cipher_output_2_41[37] = xor_2_21[5];
constraint cipher_output_2_41[38] = xor_2_21[6];
constraint cipher_output_2_41[39] = xor_2_21[7];
constraint cipher_output_2_41[40] = xor_2_37[0];
constraint cipher_output_2_41[41] = xor_2_37[1];
constraint cipher_output_2_41[42] = xor_2_37[2];
constraint cipher_output_2_41[43] = xor_2_37[3];
constraint cipher_output_2_41[44] = xor_2_37[4];
constraint cipher_output_2_41[45] = xor_2_37[5];
constraint cipher_output_2_41[46] = xor_2_37[6];
constraint cipher_output_2_41[47] = xor_2_37[7];
constraint cipher_output_2_41[48] = modadd_2_28[0];
constraint cipher_output_2_41[49] = modadd_2_28[1];
constraint cipher_output_2_41[50] = modadd_2_28[2];
constraint cipher_output_2_41[51] = modadd_2_28[3];
constraint cipher_output_2_41[52] = modadd_2_28[4];
constraint cipher_output_2_41[53] = modadd_2_28[5];
constraint cipher_output_2_41[54] = modadd_2_28[6];
constraint cipher_output_2_41[55] = modadd_2_28[7];
constraint cipher_output_2_41[56] = modadd_2_36[0];
constraint cipher_output_2_41[57] = modadd_2_36[1];
constraint cipher_output_2_41[58] = modadd_2_36[2];
constraint cipher_output_2_41[59] = modadd_2_36[3];
constraint cipher_output_2_41[60] = modadd_2_36[4];
constraint cipher_output_2_41[61] = modadd_2_36[5];
constraint cipher_output_2_41[62] = modadd_2_36[6];
constraint cipher_output_2_41[63] = modadd_2_36[7];
solve:: int_search(p, smallest, indomain_min, complete) minimize weight;
output["plaintext = "++ show(plaintext) ++ "\n" ++"key = "++ show(key) ++ "\n" ++"modadd_0_0 = "++ show(modadd_0_0)++ "\n" ++ show(p[0]/100) ++ "\n" ++"xor_0_1 = "++ show(xor_0_1)++ "\n" ++ "0" ++ "\n" ++"modadd_0_2 = "++ show(modadd_0_2)++ "\n" ++ show(p[1]/100) ++ "\n" ++"xor_0_3 = "++ show(xor_0_3)++ "\n" ++ "0" ++ "\n" ++"constant_0_4 = "++ show(constant_0_4)++ "\n" ++ "0" ++ "\n" ++"modadd_0_5 = "++ show(modadd_0_5)++ "\n" ++ show(p[2]/100) ++ "\n" ++"constant_0_6 = "++ show(constant_0_6)++ "\n" ++ "0" ++ "\n" ++"modadd_0_7 = "++ show(modadd_0_7)++ "\n" ++ show(p[3]/100) ++ "\n" ++"constant_0_8 = "++ show(constant_0_8)++ "\n" ++ "0" ++ "\n" ++"modadd_0_9 = "++ show(modadd_0_9)++ "\n" ++ show(p[4]/100) ++ "\n" ++"constant_0_10 = "++ show(constant_0_10)++ "\n" ++ "0" ++ "\n" ++"modadd_0_11 = "++ show(modadd_0_11)++ "\n" ++ show(p[5]/100) ++ "\n" ++"rot_0_12 = "++ show(rot_0_12)++ "\n" ++ "0" ++ "\n" ++"rot_0_13 = "++ show(rot_0_13)++ "\n" ++ "0" ++ "\n" ++"rot_0_14 = "++ show(rot_0_14)++ "\n" ++ "0" ++ "\n" ++"xor_0_15 = "++ show(xor_0_15)++ "\n" ++ "0" ++ "\n" ++"xor_0_16 = "++ show(xor_0_16)++ "\n" ++ "0" ++ "\n" ++"xor_0_17 = "++ show(xor_0_17)++ "\n" ++ "0" ++ "\n" ++"modadd_0_18 = "++ show(modadd_0_18)++ "\n" ++ show(p[6]/100) ++ "\n" ++"rot_0_19 = "++ show(rot_0_19)++ "\n" ++ "0" ++ "\n" ++"rot_0_20 = "++ show(rot_0_20)++ "\n" ++ "0" ++ "\n" ++"rot_0_21 = "++ show(rot_0_21)++ "\n" ++ "0" ++ "\n" ++"xor_0_22 = "++ show(xor_0_22)++ "\n" ++ "0" ++ "\n" ++"xor_0_23 = "++ show(xor_0_23)++ "\n" ++ "0" ++ "\n" ++"modadd_0_24 = "++ show(modadd_0_24)++ "\n" ++ show(p[7]/100) ++ "\n" ++"xor_0_25 = "++ show(xor_0_25)++ "\n" ++ "0" ++ "\n" ++"rot_0_26 = "++ show(rot_0_26)++ "\n" ++ "0" ++ "\n" ++"rot_0_27 = "++ show(rot_0_27)++ "\n" ++ "0" ++ "\n" ++"rot_0_28 = "++ show(rot_0_28)++ "\n" ++ "0" ++ "\n" ++"xor_0_29 = "++ show(xor_0_29)++ "\n" ++ "0" ++ "\n" ++"xor_0_30 = "++ show(xor_0_30)++ "\n" ++ "0" ++ "\n" ++"xor_0_31 = "++ show(xor_0_31)++ "\n" ++ "0" ++ "\n" ++"modadd_0_32 = "++ show(modadd_0_32)++ "\n" ++ show(p[8]/100) ++ "\n" ++"rot_0_33 = "++ show(rot_0_33)++ "\n" ++ "0" ++ "\n" ++"rot_0_34 = "++ show(rot_0_34)++ "\n" ++ "0" ++ "\n" ++"rot_0_35 = "++ show(rot_0_35)++ "\n" ++ "0" ++ "\n" ++"xor_0_36 = "++ show(xor_0_36)++ "\n" ++ "0" ++ "\n" ++"xor_0_37 = "++ show(xor_0_37)++ "\n" ++ "0" ++ "\n" ++"modadd_0_38 = "++ show(modadd_0_38)++ "\n" ++ show(p[9]/100) ++ "\n" ++"xor_0_39 = "++ show(xor_0_39)++ "\n" ++ "0" ++ "\n" ++"intermediate_output_0_40 = "++ show(intermediate_output_0_40)++ "\n" ++ "0" ++ "\n" ++"intermediate_output_0_41 = "++ show(intermediate_output_0_41)++ "\n" ++ "0" ++ "\n" ++"constant_1_0 = "++ show(constant_1_0)++ "\n" ++ "0" ++ "\n" ++"modadd_1_1 = "++ show(modadd_1_1)++ "\n" ++ show(p[10]/100) ++ "\n" ++"constant_1_2 = "++ show(constant_1_2)++ "\n" ++ "0" ++ "\n" ++"modadd_1_3 = "++ show(modadd_1_3)++ "\n" ++ show(p[11]/100) ++ "\n" ++"constant_1_4 = "++ show(constant_1_4)++ "\n" ++ "0" ++ "\n" ++"modadd_1_5 = "++ show(modadd_1_5)++ "\n" ++ show(p[12]/100) ++ "\n" ++"constant_1_6 = "++ show(constant_1_6)++ "\n" ++ "0" ++ "\n" ++"modadd_1_7 = "++ show(modadd_1_7)++ "\n" ++ show(p[13]/100) ++ "\n" ++"rot_1_8 = "++ show(rot_1_8)++ "\n" ++ "0" ++ "\n" ++"rot_1_9 = "++ show(rot_1_9)++ "\n" ++ "0" ++ "\n" ++"rot_1_10 = "++ show(rot_1_10)++ "\n" ++ "0" ++ "\n" ++"xor_1_11 = "++ show(xor_1_11)++ "\n" ++ "0" ++ "\n" ++"xor_1_12 = "++ show(xor_1_12)++ "\n" ++ "0" ++ "\n" ++"xor_1_13 = "++ show(xor_1_13)++ "\n" ++ "0" ++ "\n" ++"modadd_1_14 = "++ show(modadd_1_14)++ "\n" ++ show(p[14]/100) ++ "\n" ++"rot_1_15 = "++ show(rot_1_15)++ "\n" ++ "0" ++ "\n" ++"rot_1_16 = "++ show(rot_1_16)++ "\n" ++ "0" ++ "\n" ++"rot_1_17 = "++ show(rot_1_17)++ "\n" ++ "0" ++ "\n" ++"xor_1_18 = "++ show(xor_1_18)++ "\n" ++ "0" ++ "\n" ++"xor_1_19 = "++ show(xor_1_19)++ "\n" ++ "0" ++ "\n" ++"modadd_1_20 = "++ show(modadd_1_20)++ "\n" ++ show(p[15]/100) ++ "\n" ++"xor_1_21 = "++ show(xor_1_21)++ "\n" ++ "0" ++ "\n" ++"rot_1_22 = "++ show(rot_1_22)++ "\n" ++ "0" ++ "\n" ++"rot_1_23 = "++ show(rot_1_23)++ "\n" ++ "0" ++ "\n" ++"rot_1_24 = "++ show(rot_1_24)++ "\n" ++ "0" ++ "\n" ++"xor_1_25 = "++ show(xor_1_25)++ "\n" ++ "0" ++ "\n" ++"xor_1_26 = "++ show(xor_1_26)++ "\n" ++ "0" ++ "\n" ++"xor_1_27 = "++ show(xor_1_27)++ "\n" ++ "0" ++ "\n" ++"modadd_1_28 = "++ show(modadd_1_28)++ "\n" ++ show(p[16]/100) ++ "\n" ++"rot_1_29 = "++ show(rot_1_29)++ "\n" ++ "0" ++ "\n" ++"rot_1_30 = "++ show(rot_1_30)++ "\n" ++ "0" ++ "\n" ++"rot_1_31 = "++ show(rot_1_31)++ "\n" ++ "0" ++ "\n" ++"xor_1_32 = "++ show(xor_1_32)++ "\n" ++ "0" ++ "\n" ++"xor_1_33 = "++ show(xor_1_33)++ "\n" ++ "0" ++ "\n" ++"modadd_1_34 = "++ show(modadd_1_34)++ "\n" ++ show(p[17]/100) ++ "\n" ++"xor_1_35 = "++ show(xor_1_35)++ "\n" ++ "0" ++ "\n" ++"intermediate_output_1_36 = "++ show(intermediate_output_1_36)++ "\n" ++ "0" ++ "\n" ++"intermediate_output_1_37 = "++ show(intermediate_output_1_37)++ "\n" ++ "0" ++ "\n" ++"constant_2_0 = "++ show(constant_2_0)++ "\n" ++ "0" ++ "\n" ++"modadd_2_1 = "++ show(modadd_2_1)++ "\n" ++ show(p[18]/100) ++ "\n" ++"constant_2_2 = "++ show(constant_2_2)++ "\n" ++ "0" ++ "\n" ++"modadd_2_3 = "++ show(modadd_2_3)++ "\n" ++ show(p[19]/100) ++ "\n" ++"constant_2_4 = "++ show(constant_2_4)++ "\n" ++ "0" ++ "\n" ++"modadd_2_5 = "++ show(modadd_2_5)++ "\n" ++ show(p[20]/100) ++ "\n" ++"constant_2_6 = "++ show(constant_2_6)++ "\n" ++ "0" ++ "\n" ++"modadd_2_7 = "++ show(modadd_2_7)++ "\n" ++ show(p[21]/100) ++ "\n" ++"rot_2_8 = "++ show(rot_2_8)++ "\n" ++ "0" ++ "\n" ++"rot_2_9 = "++ show(rot_2_9)++ "\n" ++ "0" ++ "\n" ++"rot_2_10 = "++ show(rot_2_10)++ "\n" ++ "0" ++ "\n" ++"xor_2_11 = "++ show(xor_2_11)++ "\n" ++ "0" ++ "\n" ++"xor_2_12 = "++ show(xor_2_12)++ "\n" ++ "0" ++ "\n" ++"xor_2_13 = "++ show(xor_2_13)++ "\n" ++ "0" ++ "\n" ++"modadd_2_14 = "++ show(modadd_2_14)++ "\n" ++ show(p[22]/100) ++ "\n" ++"rot_2_15 = "++ show(rot_2_15)++ "\n" ++ "0" ++ "\n" ++"rot_2_16 = "++ show(rot_2_16)++ "\n" ++ "0" ++ "\n" ++"rot_2_17 = "++ show(rot_2_17)++ "\n" ++ "0" ++ "\n" ++"xor_2_18 = "++ show(xor_2_18)++ "\n" ++ "0" ++ "\n" ++"xor_2_19 = "++ show(xor_2_19)++ "\n" ++ "0" ++ "\n" ++"modadd_2_20 = "++ show(modadd_2_20)++ "\n" ++ show(p[23]/100) ++ "\n" ++"xor_2_21 = "++ show(xor_2_21)++ "\n" ++ "0" ++ "\n" ++"rot_2_22 = "++ show(rot_2_22)++ "\n" ++ "0" ++ "\n" ++"rot_2_23 = "++ show(rot_2_23)++ "\n" ++ "0" ++ "\n" ++"rot_2_24 = "++ show(rot_2_24)++ "\n" ++ "0" ++ "\n" ++"xor_2_25 = "++ show(xor_2_25)++ "\n" ++ "0" ++ "\n" ++"xor_2_26 = "++ show(xor_2_26)++ "\n" ++ "0" ++ "\n" ++"xor_2_27 = "++ show(xor_2_27)++ "\n" ++ "0" ++ "\n" ++"modadd_2_28 = "++ show(modadd_2_28)++ "\n" ++ show(p[24]/100) ++ "\n" ++"rot_2_29 = "++ show(rot_2_29)++ "\n" ++ "0" ++ "\n" ++"rot_2_30 = "++ show(rot_2_30)++ "\n" ++ "0" ++ "\n" ++"rot_2_31 = "++ show(rot_2_31)++ "\n" ++ "0" ++ "\n" ++"xor_2_32 = "++ show(xor_2_32)++ "\n" ++ "0" ++ "\n" ++"xor_2_33 = "++ show(xor_2_33)++ "\n" ++ "0" ++ "\n" ++"modadd_2_34 = "++ show(modadd_2_34)++ "\n" ++ show(p[25]/100) ++ "\n" ++"xor_2_35 = "++ show(xor_2_35)++ "\n" ++ "0" ++ "\n" ++"modadd_2_36 = "++ show(modadd_2_36)++ "\n" ++ show(p[26]/100) ++ "\n" ++"xor_2_37 = "++ show(xor_2_37)++ "\n" ++ "0" ++ "\n" ++"modadd_2_38 = "++ show(modadd_2_38)++ "\n" ++ show(p[27]/100) ++ "\n" ++"xor_2_39 = "++ show(xor_2_39)++ "\n" ++ "0" ++ "\n" ++"intermediate_output_2_40 = "++ show(intermediate_output_2_40)++ "\n" ++ "0" ++ "\n" ++"cipher_output_2_41 = "++ show(cipher_output_2_41)++ "\n" ++ "0" ++ "\n" ++"Trail weight = " ++ show(weight)];
